<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网购这么多年，淘宝 | 京东 | 拼多多 | 苏宁这些大型互联网电商平台不为人知的网购黑幕你又了解多少？？</title>
      <link href="/e6b7.html"/>
      <url>/e6b7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>分享一些网购小常识，网购这么多年，不知道这些你的损失就太大啦… <a id="more"></a></p></blockquote><p>此刻看到这篇博客的小伙伴，相信都已经具备了在淘宝、京东、拼多多等大型互联网电商平台多年的购物实战经验了吧，不瞒大家说，我也是… O(∩_∩)O 😆</p><p>常年在各大网站混的小伙伴们，一定见过类似下面的这种片儿吧：</p><div align="center">    <img alt="微博返利视频图片举例" class="post-image-center" src="/img/blog/profit/wb_img1.jpg" height="23%" width="23%" >&nbsp;&nbsp;<img alt="微博返利视频图片举例" class="post-image-center" src="/img/blog/profit/wb_img2.jpg" height="23%" width="23%" >&nbsp;&nbsp;<img alt="微博返利视频图片举例" class="post-image-center" src="/img/blog/profit/wb_img3.jpg" height="23%" width="23%" >&nbsp;&nbsp;<img alt="微博返利视频图片举例" class="post-image-center" src="/img/blog/profit/wb_img4.jpg" height="23%" width="23%" ></div><br><blockquote><p>用了 8 年的微信，都不知道的隐藏功能<br>看了这个视频，你会回来感谢我~<br>建议收藏备用…</p></blockquote><p>本来还期待介绍个牛逼的微信功能，让我开开眼，然后情节一转，女主开始 <code>举栗说明</code>，她都是怎么领取 <code>隐藏优惠券</code> 买到李佳琪推荐的爆款口红💄，并解释 <code>隐藏优惠券</code> 和 <code>返利</code> 都是商家给的。</p><p>然后就是给你推荐 <code>微信公众号返利机器人</code> 或 <code>其他微博博主</code> ,巴拉巴拉…</p><p>接下来的视频内容就是教你领取淘宝隐藏优惠券的教程啦~</p><div align="left">    <img alt="教你领取淘宝隐藏优惠券的教程" class="post-image-center" src="/img/blog/profit/wb_img5.jpeg" height="23%" width="23%" ></div><p>实际上，有的视频剧情甚至让人看了尴尬至极，其实看了视频的大多数人并不在意剧情的不适感，而是将所有注意力集中到了那个关注即可领取优惠券的 <strong>微博博主</strong> 或 <strong>公众号</strong> 身上，随手一个关注，跟着视频一顿操作后将藏在购物车中的 <strong>宝贝链接</strong> 发给 <strong>博主</strong> or <strong>微信机器人</strong> (￣▽￣)”</p><p>哇！果然领到了高额的优惠券，一阵窃喜后就顺手下了单</p><p>就这样，这些博主或公众号积累了上百万的粉丝，还会时不时给你发发优惠券、抢免单等等、</p><h2 id="为什么网购的商品会有返利佣金，购物返利是不是骗局？"><a href="#为什么网购的商品会有返利佣金，购物返利是不是骗局？" class="headerlink" title="为什么网购的商品会有返利佣金，购物返利是不是骗局？"></a>为什么网购的商品会有返利佣金，购物返利是不是骗局？</h2><p>其实早在 2011 年底，<strong>一淘网</strong> 等返利网站已经占据了返利行业的大半壁江山，那个时候网购大军的获得返利的方式，只是通过网页进行。</p><blockquote><p>一淘网，阿里巴巴旗下官方促销导购平台，成立于2010年，通过超高返利、大额红包、超值优惠券等丰富的利益点，为用户提供高性价比的品牌好货，是必不可少的网购省钱利器。</p></blockquote><p>另外大部分购物返利的优惠券都来自 <strong>淘宝联盟</strong>（淘宝官方的推广平台），后来出现的第三方返利网站 / app、公众号、微博省钱博主或微信返利机器人，都是帮助商家吸引流量的一个工具（都是基于电商平台官方的返利规则接口二次开发的），包括浏览量和订单销量；</p><p>他们赚的基本上是推广的佣金，而你领的隐藏优惠券，只是推广佣金的一部分啦~</p><p>最为关键的是，商品的成本和标价事实上是有很大差距的，也就是说商家本来就有很多的让利空间，通俗的说商家的 <strong>商品标价</strong> 可以分由三部分组成 <strong>商品成本</strong> + <strong>隐藏优惠券</strong> + <strong>推广返佣</strong>；</p><p>还有一点就是这些工具的返利形式，从  <strong>「先购物，后返利」</strong>   变成  <strong>「先送优惠，再让用户购物，同时还会有返利」</strong>，送优惠指的是通过返利平台领取 <strong>隐藏优惠券</strong> 形式（大家在淘宝对应的店铺是领取不到这样的优惠券的），商家通过这种方法给了用户确定性，降低了用户防御心理，让用户占到了便宜。</p><p>另外据统计，各大电商平台 <strong>70%</strong> 的商品<strong>都有</strong>隐藏优惠券，<strong>90%</strong> 以上的商品都有商品佣金返利！</p><p>如果你能在购物之前就了解了这些商家的小心机，再加上有比较好的获取高额推广佣金的渠道，不开玩笑的说，你已经打败了 <code>90%</code> 以上的网购小伙伴。</p><p>有经验的朋友手机里可能安装了自己钟意的返利 app，但你今天看到这里不妨接着往下看，为了帮助大家更好的选择最具性价比的返利平台，为大家整理出了各大返利平台的模式对比。</p><h2 id="各大返利平台对比分析"><a href="#各大返利平台对比分析" class="headerlink" title="各大返利平台对比分析"></a>各大返利平台对比分析</h2><blockquote><p>主要挑选了一些具有代表性的平台拿出来做对比，一目了然<br>对于常年活跃在各大电商平台的剁手党，建议仔细看完，一年能省个 <strong><code>万儿八千</code></strong> 的不是问题！</p></blockquote><br/><div align="center">    <img alt="各大返利平台对比分析" class="post-image-center" src="/img/blog/profit/compare_app1.jpg" height="100%" width="100%" ></div><br/><p>如果仔细看完这个完整对比分析的话，就可以看出买小道的优势啦，下面简单做下整理</p><ul><li>永久免费升级，不收会员费，不收人头费</li><li>升级团长门槛低，轻松赚取高额佣金</li><li>团队大牛不定期分享经验，让你快速成为赚钱专家</li></ul><h2 id="返利产品哪家强？"><a href="#返利产品哪家强？" class="headerlink" title="返利产品哪家强？"></a>返利产品哪家强？</h2><p>拿天猫旗舰店样子吸尘器做举例，淘口令如下：（可能当您复制下面这个淘口令打开淘宝查看的时候价格可能会有所变化，但是整体返利比例是一致的，以下对比仅供参考，点击可查看大图了解具体返利情况）</p><blockquote><p>「好货必抢」扬子手持有线吸尘器，14000pa大吸力，轻松举提握，灵动地刷，超薄探底不卡顿!<br>一吸即净！整屋洁净！<br>復製这条(yePl1nvmFgH),进入「Tao宝」即可抢购<br>「原价」159.00元<br>「券后价」79.00元</p></blockquote><div align="center">    <img alt="福袋生活 VS 买小道" class="post-image-center" src="/img/blog/profit/福袋生活vs买小道.png" height="23%" width="23%" >&nbsp;&nbsp;<img alt="花生日记 VS 买小道" class="post-image-center" src="/img/blog/profit/花生日记vs买小道.png" height="23%" width="23%" >&nbsp;&nbsp;<img alt="粉象生活 VS 买小道" class="post-image-center" src="/img/blog/profit/粉象生活vs买小道.png" height="23%" width="23%" >&nbsp;&nbsp;<img alt="蜜源 VS 买小道" class="post-image-center" src="/img/blog/profit/蜜源VS买小道.png" height="23%" width="23%" ></div><br><div align="center">    <img alt="美逛 VS 买小道" class="post-image-center" src="/img/blog/profit/美逛VS买小道.png" height="23%" width="23%" >&nbsp;&nbsp;<img alt="好省 VS 买小道" class="post-image-center" src="/img/blog/profit/好省vs买小道.png" height="23%" width="23%" >&nbsp;&nbsp;<img alt="省钱快报 VS 买小道" class="post-image-center" src="/img/blog/profit/省钱快报vs买小道.png" height="23%" width="23%" >&nbsp;&nbsp;<img alt="淘宝 VS 买小道" class="post-image-center" src="/img/blog/profit/淘宝和买小道.png" height="23%" width="23%" ></div><br><div align="center">  <font size="8">买小道胜出</font></div><p><img src="./img/blog/profit/openmxd.png" alt="买小道"></p><blockquote><p>下面对于买小道进行一个详细的介绍，如果已经领悟到的小伙伴想直接想下载使用买小道，请点击 <a href="#下载并注册买小道">下载并注册买小道</a></p></blockquote><h2 id="买小道的四大核心亮点"><a href="#买小道的四大核心亮点" class="headerlink" title="买小道的四大核心亮点"></a>买小道的四大核心亮点</h2><h3 id="值得买"><a href="#值得买" class="headerlink" title="值得买"></a><strong>值得买</strong></h3><p>通过大数据、人工智能的方式，监控各大电商平台，时时抓取全网商家最新优惠信息，所有的商品上架时间，都是按商家搞活动时间排序的，所以一定是最新最超值最优惠的。</p><h3 id="商品清单"><a href="#商品清单" class="headerlink" title="商品清单"></a><strong>商品清单</strong></h3><p>App 中<code>今日必推</code>栏目里的商品是在系统挑选后的基础上，再通过人工仔细精心甄选而出。<br>可以直接点击<code>清单</code>中喜欢的商品直接下单，也可以帮助有群的朋友无忧发群，分享到朋友圈。</p><h3 id="自购省钱"><a href="#自购省钱" class="headerlink" title="自购省钱"></a><strong>自购省钱</strong></h3><p>为您实时推荐全网最新物美价廉的商品并附有商家购物优惠券，下单购买不仅可以<code>优惠</code>而且可以得到商家的<code>返利</code>；<br>即使是商家活动促销<code>没有优惠券</code>，下单也一样可以获得<code>返利</code>。</p><h3 id="分享赚钱"><a href="#分享赚钱" class="headerlink" title="分享赚钱"></a><strong>分享赚钱</strong></h3><p>可以将买小道<code>推荐</code>给你的<code>好友</code>，好友<code>成功下载</code>买小道<code>下单</code>后，好友在 <strong><code>省钱</code></strong> 的基础上您也可以获得一定的 <strong><code>佣金</code></strong> 。</p><blockquote><p>一句话，邀请伙伴加入买小道，省的多，同时赚的多。</p></blockquote><div align="left">    <img alt="省的多赚的多" class="post-image-center" src="/img/blog/profit/preferential.png" height="60%" width="60%" ></div><br><h2 id="小道的会员权益"><a href="#小道的会员权益" class="headerlink" title="小道的会员权益"></a>小道的会员权益</h2><h3 id="小道会员特权"><a href="#小道会员特权" class="headerlink" title="小道会员特权"></a>小道会员特权</h3><blockquote><p>对于普通用户注册也就是小道会员</p></blockquote><p>自购省钱、分享赚钱；<br>邀请的好友购买商品，本人享受返利；</p><h3 id="小道团长特权"><a href="#小道团长特权" class="headerlink" title="小道团长特权"></a>小道团长特权</h3><blockquote><p>所谓小道团长，是需要在小道会员基础上完成一个晋升任务就可以享受下面的特权啦,具体的晋升任务可以在小道的 <strong><code>会员</code></strong> 界面点击 <strong><code>立即申请成为团长</code></strong> 查看哦~</p></blockquote><p>自购收益，在<code>小道会员收益</code>的基础上提升 <strong><code>30%</code></strong>；<br>推广收益，在<code>小道会员推广收益</code>基础上提升 <strong><code>183%</code></strong>；<br>多级团队<code>持续收益奖励</code>；<br>培养团长<code>持续返利</code>；</p><h3 id="小道的更多权益"><a href="#小道的更多权益" class="headerlink" title="小道的更多权益"></a>小道的更多权益</h3><br><div align="left">    <img alt="小道的更多会员权益" class="post-image-center" src="/img/blog/profit/tips.png" height="50%" width="50%" ></div><br><h2 id="小道省钱"><a href="#小道省钱" class="headerlink" title="小道省钱"></a>小道省钱</h2><h3 id="省钱小三步"><a href="#省钱小三步" class="headerlink" title="省钱小三步"></a>省钱小三步</h3><p><strong>第一步 复制商品标题或链接</strong><br><strong>第二步 打开买小道</strong><br><strong>第三步 详情页领券购买</strong></p><br><h3 id="淘宝省钱攻略"><a href="#淘宝省钱攻略" class="headerlink" title="淘宝省钱攻略"></a>淘宝省钱攻略</h3><p><strong>第一步 在淘宝内长按商品标题，点击 “复制” 或 “拷贝链接”</strong></p><div align="center">    <img alt="“拷贝链接”" class="post-image-center" src="/img/blog/profit/tbsq.png" height="60%" width="60%" ></div><p><strong>第二步 打开买小道</strong></p><div align="center">    <img alt="打开买小道" class="post-image-center" src="/img/blog/profit/openmxd.png" height="60%" width="60%" ></div><p><strong>第三步 找到对应商品，领取对应的优惠券，返现金</strong></p><div align="center">    <img alt="领取对应的优惠券，返现金" class="post-image-center" src="/img/blog/profit/lyh1.png" height="60%" width="60%" ></div><div align="center">    <img alt="领取对应的优惠券，返现金" class="post-image-center" src="/img/blog/profit/lyh2.png" height="60%" width="60%" ></div><br><h3 id="微信省钱攻略"><a href="#微信省钱攻略" class="headerlink" title="微信省钱攻略"></a>微信省钱攻略</h3><p><strong>第一步 复制淘口令</strong></p><div align="center">    <img alt="复制淘口令" class="post-image-center" src="/img/blog/profit/wxsq.png" height="60%" width="60%" ></div><p><strong>第二步 打开买小道</strong></p><div align="center">    <img alt="打开买小道" class="post-image-center" src="/img/blog/profit/openmxd.png" height="60%" width="60%" ></div><p><strong>第三步 领取对应的优惠券，返现金</strong></p><div align="center">    <img alt="领取对应的优惠券，返现金" class="post-image-center" src="/img/blog/profit/lyh1.png" height="60%" width="60%" ></div><div align="center">    <img alt="领取对应的优惠券，返现金" class="post-image-center" src="/img/blog/profit/lyh2.png" height="60%" width="60%" ></div><br><h3 id="京东、拼多多、苏宁易购、唯品会等省钱攻略"><a href="#京东、拼多多、苏宁易购、唯品会等省钱攻略" class="headerlink" title="京东、拼多多、苏宁易购、唯品会等省钱攻略"></a>京东、拼多多、苏宁易购、唯品会等省钱攻略</h3><p><strong>第一步 在京东、拼多多、苏宁易购、唯品会等电商平台手机 APP 内长按商品标题，点击 “拷贝” 或者 “复制”</strong></p><div align="center">    <img alt="京东购物" class="post-image-center" src="/img/blog/profit/other.png" height="60%" width="60%" ></div><p><strong>第二步 打开买小道</strong></p><div align="center">    <img alt="打开买小道" class="post-image-center" src="/img/blog/profit/openmxd.png" height="60%" width="60%" ></div><p><strong>第三步 领取对应的优惠券，返现金</strong></p><div align="center">    <img alt="领取对应的优惠券，返现金" class="post-image-center" src="/img/blog/profit/lyh1.png" height="60%" width="60%" ></div><div align="center">    <img alt="领取对应的优惠券，返现金" class="post-image-center" src="/img/blog/profit/lyh2.png" height="60%" width="60%" ></div><p>啰嗦完啦，总之小道省钱只需三步呦~</p><div align="center">    <img alt="省钱开心" class="post-image-center" src="/img/blog/profit/girl.gif" height="50%" width="50%" ></div><br><h2 id="下载并注册买小道"><a href="#下载并注册买小道" class="headerlink" title="下载并注册买小道"></a>下载并注册买小道</h2><h3 id="扫描下方二维码快速下载买小道"><a href="#扫描下方二维码快速下载买小道" class="headerlink" title="扫描下方二维码快速下载买小道"></a>扫描下方二维码快速下载买小道</h3><div align="center">    <img alt="qr_code" class="post-image-center" src="/img/blog/profit/qr_code.jpg" height="50%" width="50%" ></div><br><h3 id="下载小道后注册时需先填写邀请码"><a href="#下载小道后注册时需先填写邀请码" class="headerlink" title="下载小道后注册时需先填写邀请码"></a>下载小道后注册时需先填写邀请码</h3><p>为了大家能够快速 <code>开启省钱模式</code>，下面送出我的邀请码~</p><blockquote><p>邀请码是买小道为会员提供的专属编码，新会员需要有老会员的邀请码推荐才可在买小道得到会员身份，并可获得新会员专享权益（新人免单等权益）</p></blockquote><div align="center">  <font size="18">686868</font></div><div align="center">  <font size="18">686868</font></div><div align="center">  <font size="18">686868</font></div>重要的事情写三遍，哈哈哈~<br><br><h2 id="观看买小道快速上手视频"><a href="#观看买小道快速上手视频" class="headerlink" title="观看买小道快速上手视频"></a>观看买小道快速上手视频</h2><div align="center">    <video src='/video/mxdsq.mp4' type='video/mp4' controls='controls'  width='40%' height='40%'>     </video>    <video src='/video/mxdxd.mp4' type='video/mp4' controls='controls'  width='40%' height='40%'>    </video></div><br><br><p><strong>开始愉快的买买买吧~</strong><br><br></p><div align="center">    <img alt="buy" class="post-image-center" src="/img/blog/profit/buybuybuy.gif" height="100%" width="100%" ></div>]]></content>
      
      
      <categories>
          
          <category> benefit-share </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 福利分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mac 将 iPhone 数据备份到移动硬盘</title>
      <link href="/3415.html"/>
      <url>/3415.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近用电脑备份 iphone 数据时提示我的 mac 内存不足，因为手机上的数据乱七八糟大概 <code>100G+</code><a id="more"></a>； 刚好棍子节买了个硬盘，考虑把备份内容安排到我的硬盘上。我的电脑系统是 <code>macOS Catalina 版本 10.15.1</code> 所以这个版本用的是 Finder 来备份手机，老系统的话，还继续使用 iTunes，操作是一样的。</p></blockquote><p><strong>可以参考以下步骤</strong></p><p>硬盘连接到 <code>Mac</code> 后，确保硬盘的剩余空间足够容纳 <code>iPhone</code> 的备份;<br><br>在外置硬盘根目录新建一个名为 <code>MobileSync</code> 的文件夹，看好啊是<code>根目录</code>，在 MobileSync 下新建 <code>Backup</code> 的文件夹，主要是因为系统默认备份时创建的目录结构是 <code>/Users/devliang/Library/Application\ Support/MobileSync/Backup</code>，这个路径是我个人电脑路径，可以类比看下自己的。<br><br>打开 mac 的 <code>Finder</code> 找到 <code>前往文件夹</code>，把刚系统的备份路径复制进去打开，找到对应的备份目录，然后删除 <code>MobileSync</code> 下的 <code>Backup</code> 文件夹；<br></p><p>打开终端命令行执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Volumes/Micro\ SD/MobileSync/Backup /Users/liangyanqiao/Library/Application\ Support/MobileSync</span><br></pre></td></tr></table></figure><p>描述下命令行大致是这样的 ln -s <code>移动硬盘中的 Backup 路径</code>  <code>系统 MobileSync 路径</code><br><em>注意：</em></p><ul><li>文件夹路径不会操作，可以直接把文件夹拖拽到终端里即可看到路径！</li><li>文件夹名字如果有空格的使用 <code>\空格</code> 表示！</li><li>移动硬盘名字不知道的，可以在磁盘工具里查看！</li><li>执行命令后可以看到系统级别目录里多出一个快捷键图标的目录 <code>Backup</code>，然后当 <code>Backup</code> 下有文件的时候，实际打开的是外置硬盘的目录；<br></li></ul><p>到这一步操作基本结束了，之后使用 Finder 备份的话，就会备份到新的路径上了，前提是移动设备需要提前连接上；<br></p><p><strong>一些其他问题</strong></p><ul><li>可能出现备份过程中手机断开了，导致备份失败，下次开机后重连备份多次不成功的，极端的办法就是清除外置硬盘 Backup 文件夹下的所有文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin 入门笔记整理</title>
      <link href="/aa8e.html"/>
      <url>/aa8e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>抽出时间把自己学习 kotlin 过程的笔记整理总结一下啦…<a id="more"></a>暂时先把我自己整成笔记的 PDF 贴出来。pdf 展示上还有些问题，参考了 <a href="http://lingr7.coding.me/2019/10/02/theme-hexo-pdf使用技巧-解决hexo-pdf文件显示不全的问题.html" target="_blank" rel="noopener">http://lingr7.coding.me/2019/10/02/theme-hexo-pdf使用技巧-解决hexo-pdf文件显示不全的问题.html</a> 高度还是不够，不太好哈</p></blockquote><h3 id="如果不方便也可以点击下面链接"><a href="#如果不方便也可以点击下面链接" class="headerlink" title="如果不方便也可以点击下面链接"></a>如果不方便也可以点击下面链接</h3><p><a href="http://note.youdao.com/noteshare?id=62ae698083efcc683ee6b86edb594706" target="_blank" rel="noopener">有道云笔记</a></p><br><div class="row">    <embed src="/pdf/kotlin_entry_study_notes.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用 Charles 抓包失败报 SSLHandshake: Received fatal alert: certificate_unknown 最有效的解决方案</title>
      <link href="/adb1.html"/>
      <url>/adb1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Android 使用 Charles 抓取 Https 请求的报文时，Android 和 Charles 都正确安装了证书之后出现抓包失败，报错 SSLHandshake: Received fatal alert: certificate_unknown,<a id="more"></a> 官方有个说明文档，<a href="https://developer.android.google.cn/training/articles/security-config.html" target="_blank" rel="noopener">点击查看</a></p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>安卓7之后调整了安全策略会导致部分手机抓包失败，请参考此链接：<a href="https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2016/07/changes-to-trusted-certificate.html</a> ，文中提到默认情况下，针对 API Level 24 及更高版本的应用程序不再信任用户或管理员添加的CA用于安全连接。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>个人手机上已经正确安装了 Charles 证书，证书不懂怎么安装的可以自行搜索。<br>在你的 AndroidManifest.xml 文件中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;application android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br><span class="line">                ... &gt;</span><br><span class="line">...</span><br><span class="line">&lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>在res目录下新建一个xml文件夹，之后在res/xml/路径下新建文件 network_security_config.xml,名字可以随意定义，路径res/xml/network_security_config.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">    &lt;network-security-config&gt;</span><br><span class="line">        &lt;domain-config&gt;</span><br><span class="line">        &lt;domain includeSubdomains=&quot;true&quot;&gt;你要抓取的域名(eg:baidu.com)&lt;/domain&gt;</span><br><span class="line">        &lt;trust-anchors&gt;</span><br><span class="line">        &lt;certificates src=&quot;user&quot;/&gt;//信任用户自己安装的证书</span><br><span class="line">        &lt;/trust-anchors&gt;</span><br><span class="line">    &lt;/domain-config&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>手机上是否有装证书也都可以使用下面的方法：<br>在你的AndroidManifest.xml文件中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;application android:networkSecurityConfig=&quot;@xml/network_security_config&quot;</span><br><span class="line">                ... &gt;</span><br><span class="line">...</span><br><span class="line">&lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>在res目录下新建一个xml文件夹，之后在 res/xml/ 路径下新建文件 network_security_config.xml，路径res/xml/network_security_config.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">    &lt;network-security-config&gt;</span><br><span class="line">        &lt;domain-config&gt;</span><br><span class="line">        &lt;domain includeSubdomains=&quot;true&quot;&gt;你要抓取的域名（eg:baidu.com）&lt;/domain&gt;</span><br><span class="line">        &lt;trust-anchors&gt;</span><br><span class="line">        &lt;certificates src=&quot;@raw/证书文件名&quot;/&gt;</span><br><span class="line">        &lt;/trust-anchors&gt;</span><br><span class="line">    &lt;/domain-config&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br></pre></td></tr></table></figure><p>在res目录下新建一个raw文件夹，将手机上安装的证书文件 copy 到你的工程目录，res/raw/ 目录下，证书格式：pem，crt等（chales的话就是将你在手机浏览器打开 <a href="http://charlesproxy.com/getssl" target="_blank" rel="noopener">http://charlesproxy.com/getssl</a> 下载的证书放入即可），证书文件名，就是你放入res/raw/目录下文件的名字<br>配置完重新运行项目，就可以看到报文了！</p><p>PS:如果配置后还是没看到 <code>https</code> 对应的报文，再次检查下你输入的<code>域名</code>，有没有带 <code>https：//</code>，去掉即可！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重逢餐厅母子惊喜相见，共品彼此最熟悉的味道</title>
      <link href="/e48f.html"/>
      <url>/e48f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>王宝强：李咏送你的项链多少钱？妈妈的回答，王宝强瞬间乐啦…<a id="more"></a></p></blockquote><br><!-- <img src="/img/git.png" width = "900" height = "600" alt="git" align=center /> --><video src='/video/bq.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video>]]></content>
      
      
      <categories>
          
          <category> 视频推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频推荐 </tag>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 React Native 开发环境中遇到的问题记录</title>
      <link href="/c994.html"/>
      <url>/c994.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近因为工作需要在学习 React Native，过程中遇到的一些问题，简单整理一下，方便以后查阅~ <a id="more"></a> ，主要参考的是 React Native 中文官网的一些指南，遇到问题再针对性的解决。比如安装过程中会提示你 NVM 环境变量没配置啦，你需要按照 log 提示进行配置等诸如此类问题~</p></blockquote><h2 id="nvm，node，npm，nrm-之间的区别"><a href="#nvm，node，npm，nrm-之间的区别" class="headerlink" title="nvm，node，npm，nrm 之间的区别"></a>nvm，node，npm，nrm 之间的区别</h2><p>nvm：nodejs 版本管理工具<br>nodejs：在项目开发时的所需要的代码库(node -v)<br>npm：nodejs 包管理工具<br>nrm: (npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换镜像源</p><h2 id="You-need-to-run-“nvm-install-N-A”-to-install-it-before-using-it"><a href="#You-need-to-run-“nvm-install-N-A”-to-install-it-before-using-it" class="headerlink" title="You need to run “nvm install N/A” to install it before using it"></a>You need to run “nvm install N/A” to install it before using it</h2><p>打开终端后一直提示这个，很烦，解决方法：<br>查看 node 版本 node -v </p><p>执行命令： nvm ls   查看 “default” Node 版本，如果是 default -&gt; node (-&gt; N/A) 类似这样的代码，这是引起报错的原因。<br>执行命令：nvm alias default node<br>执行命令：nvm ls 查看展示<br>中间可能会出现一些不能设置默认版本的，那可以再下载一个别的版本，然后再次切换。</p><h2 id="在创建-android-demo-时候，打开-app-界面很多红色背景的-log-信息"><a href="#在创建-android-demo-时候，打开-app-界面很多红色背景的-log-信息" class="headerlink" title="在创建 android demo 时候，打开 app 界面很多红色背景的 log 信息"></a>在创建 android demo 时候，打开 app 界面很多红色背景的 log 信息</h2><p>可能是因为服务没有启动<br>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start</span><br></pre></td></tr></table></figure><p>如果提示什么端口被占用，还需要把占用的端口关掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">异常如：</span><br><span class="line">Metro Bundler can&apos;t listen on port 8081</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">sudo lsof -i :8081  列出占用的列表</span><br><span class="line">kill 查到的 对应的 pid 号</span><br></pre></td></tr></table></figure><h2 id="nvm-的有关命令"><a href="#nvm-的有关命令" class="headerlink" title="nvm 的有关命令"></a>nvm 的有关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable ## 安装最新稳定版 node</span><br><span class="line">nvm install &lt;version&gt; ## 安装指定版本</span><br><span class="line">nvm uninstall &lt;version&gt; ## 删除已安装的指定版本</span><br><span class="line">nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line">nvm ls ## 列出所有安装的版本</span><br><span class="line">nvm ls-remote ## 列出所有远程服务器的版本</span><br><span class="line">nvm current ## 显示当前的版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line">nvm reinstall-packages &lt;version&gt; ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span><br><span class="line">nvm alias default [node版本号] ##设置默认版本</span><br></pre></td></tr></table></figure><h2 id="react-native-一些命令"><a href="#react-native-一些命令" class="headerlink" title="react-native 一些命令"></a>react-native 一些命令</h2><p>react-native link   build node_modules 库<br>react-native start  开启服务<br>react-native run-android    编译安卓程序到手机</p><h2 id="执行-brew-install-watchman-没有权限"><a href="#执行-brew-install-watchman-没有权限" class="headerlink" title="执行 brew install watchman 没有权限"></a>执行 brew install watchman 没有权限</h2><p>使用如下指令获取 usr/local 文件夹的写入权限<br>sudo chown -R $(whoami) /usr/local/*<br>重新调用 brew install watchman ，即可正常完成安装。</p><p>‘whoami’ linux 命令，命令用于打印当前有效的用户名称，相当于执行 id -un 命令。</p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava2.0 使用过程中遇到的 bug 总结</title>
      <link href="/a450.html"/>
      <url>/a450.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>日常开发中遇到的 RxJava2.0 问题，在这里进行一个简单的记录，也希望可以帮助到更多被这些问题困扰的小伙伴们<a id="more"></a>，持续更新…</p></blockquote><h2 id="io-reactivex-exceptions-UndeliverableException"><a href="#io-reactivex-exceptions-UndeliverableException" class="headerlink" title="io.reactivex.exceptions.UndeliverableException"></a>io.reactivex.exceptions.UndeliverableException</h2><p> RxJava2 取消订阅后，抛出的异常无法捕获，导致程序崩溃：<br> 详细异常打印日志：（io.reactivex.exceptions.UndeliverableException:The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with.）</p><p>UndeliverableException 从字面意思看，意思是不可送达的异常。<br>通过源码跟踪，发现抛出io.reactivex.exceptions.UndeliverableException 唯一地方是 RxJavaPlugins 类。</p><p>RxJava2 当取消订阅后(dispose())，RxJava 抛出的异常后续无法接收(此时后台线程仍在跑，可能会抛出IO等异常),全部由 RxJavaPlugin 接收，需要提前设置 ErrorHandler.</p><p>RxJava2的一个重要的设计理念是：不吃掉任何一个异常。产生的问题是，当RxJava2“downStream”取消订阅后，“upStream”仍有可能抛出异常，这时由于已经取消订阅，“downStream”无法处理异常，此时的异常无人处理，便会导致程序崩溃。</p><p>个人出问题的代码，也是常规写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Observable.create((ObservableOnSubscribe&lt;HouseVOListSchema&gt;) emitter -&gt; &#123;</span><br><span class="line">    if (isViewAttached()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ResultBean result = apiInstance.requestData(token);</span><br><span class="line">            if (result == null) &#123;</span><br><span class="line">                emitter.onError(new NullPointerException());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                emitter.onNext(result);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ApiException e) &#123;</span><br><span class="line">            Trace.e(&quot;Rxjava 接口调用异常&quot;, &quot;getSearchPageIndex123 e.getMessage() &quot;+e.getMessage() + &quot; e.getCode() &quot;+e.getCode()+&quot; e.getResponseBody() &quot; +e.getResponseBody());</span><br><span class="line">            emitter.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        // Memory leak</span><br><span class="line">        .as(mMvpView.bindAutoDispose())</span><br><span class="line">        .subscribe(result -&gt; &#123;</span><br><span class="line">                    mMvpView.dismissLoading();</span><br><span class="line">                    if (isViewAttached()) &#123;</span><br><span class="line">                        if (AppConstant.RESPONSE_RESULE_CODE == result.getCode()) &#123;</span><br><span class="line">                            mMvpView.onSuccess(result.getResult());</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            mMvpView.onError(result.getMessage());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, throwable -&gt; mMvpView.onThrowable(throwable)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>就这种常规操作的代码，出问题了。</p><p>解决方案：在 Application 初始化时候设置 RxJavaPlugin 的 ErrorHandler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void setRxJavaErrorHandler() &#123;</span><br><span class="line">        RxJavaPlugins.setErrorHandler(throwable -&gt; &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            Trace.e(&quot;MyApplication&quot;, &quot;MyApplication setRxJavaErrorHandler &quot;  + throwable.getMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Java </category>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 日常开发 bug 总结 </title>
      <link href="/484.html"/>
      <url>/484.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>日常开发中遇到的一些问题，在这里进行一个简单的记录，也希望可以帮助到更多被这些问题困扰的小伙伴们~<a id="more"></a></p></blockquote><h2 id="Gradle-Permission-denied-解决方案"><a href="#Gradle-Permission-denied-解决方案" class="headerlink" title="Gradle Permission denied 解决方案"></a>Gradle Permission denied 解决方案</h2><p>解决方案的地址  <a href="https://stackoverflow.com/questions/17668265/gradlew-permission-denied" target="_blank" rel="noopener">https://stackoverflow.com/questions/17668265/gradlew-permission-denied</a></p><p>输入 chmod +x gradlew 就可以解除执行权限了！</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Java </category>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 工程中方法数超过 65536 解决方案</title>
      <link href="/8c75.html"/>
      <url>/8c75.html</url>
      
        <content type="html"><![CDATA[<h2 id="Android-Studio-错误提示"><a href="#Android-Studio-错误提示" class="headerlink" title="Android Studio 错误提示"></a>Android Studio 错误提示</h2><blockquote><p>Error: null, Cannot fit requested classes in a single dex file (# methods: 66457 &gt; 65536)</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>build.gradle 文件 android 的 defaultConfig 里面增加 multiDexEnabled true</strong></p><p><strong>build.gradle 文件 dependencies 里面增加 implementation ‘com.android.support:multidex:1.0.3’</strong></p><p><strong>Application 类中增加 kotlin 写法</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> override fun attachBaseContext(base: Context) &#123;</span><br><span class="line">    super.attachBaseContext(base)</span><br><span class="line">    MultiDex.install(this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Application 类中增加 java 写法</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void attachBaseContext(Context base) &#123;</span><br><span class="line">       super.attachBaseContext(base);</span><br><span class="line">       MultiDex.install(this);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升开发效率工具整理</title>
      <link href="/4794.html"/>
      <url>/4794.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里记录的软件和相关配置都是基于 MacOs 操作系统下…</p></blockquote><h2 id="提升开发效率工具整理"><a href="#提升开发效率工具整理" class="headerlink" title="提升开发效率工具整理"></a>提升开发效率工具整理</h2><h3 id="APKPure"><a href="#APKPure" class="headerlink" title="APKPure"></a>APKPure</h3><p>APK下载器在线极速下载原版应用 - <a href="https://apkpure.com/cn" target="_blank" rel="noopener">APKPure官网</a>,不能翻墙下载 GooglePlay 的方便啦  </p><h3 id="Scrcpy"><a href="#Scrcpy" class="headerlink" title="Scrcpy"></a>Scrcpy</h3><p><a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">Scrcpy</a> android 客户端投屏插件</p><p>This application provides display and control of Android devices connected on USB (or over TCP/IP). It does not require any root access. It works on GNU/Linux, Windows and MacOS.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install scrcpy</span><br><span class="line">run:  scrcpy 命令</span><br></pre></td></tr></table></figure><h3 id="Codota"><a href="#Codota" class="headerlink" title="Codota"></a>Codota</h3><p><a href="https://www.codota.com/code/java/methods/io.swagger.v3.oas.models.servers.Server/toIndentedString" target="_blank" rel="noopener">Codota</a></p><h3 id="AS-快捷键，几个快捷键名字记录"><a href="#AS-快捷键，几个快捷键名字记录" class="headerlink" title="AS 快捷键，几个快捷键名字记录"></a>AS 快捷键，几个快捷键名字记录</h3><p>related symbol ，open xml source;<br>Jump to Source<br>declaration or usages</p><h3 id="Apple-Command-Line-Tools"><a href="#Apple-Command-Line-Tools" class="headerlink" title="Apple Command Line Tools"></a>Apple Command Line Tools</h3><blockquote><p>从App Store上下载的Xcode，默认是不会安装Command Line Tools的，Command Line Tools是在Xcode中的一款工具，可以在命令行中运行 C 程序。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The bottle needs the Apple Command Line Tools to be installed.</span><br><span class="line">You can install them, if desired, with:</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="mac-下使用-brew-包管理工具安装-tree"><a href="#mac-下使用-brew-包管理工具安装-tree" class="headerlink" title="mac 下使用 brew 包管理工具安装 tree"></a>mac 下使用 brew 包管理工具安装 tree</h3><blockquote><p>相信很多使用过Linux的用户都用过 tree 命令，它可以像windows的文件管理器一样清楚明了的显示目录结构。更多可参考：<a href="https://www.jianshu.com/p/008b4c696bf1" target="_blank" rel="noopener">https://www.jianshu.com/p/008b4c696bf1</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><p>在对应某个目录下，可直接使用 tree 查看当天 目录结构；</p><p>使用 tree –help 查看更多帮助信息；</p><h2 id="MacOS-下安装-JAVA-JDK-相关问题"><a href="#MacOS-下安装-JAVA-JDK-相关问题" class="headerlink" title="MacOS 下安装 JAVA JDK 相关问题"></a>MacOS 下安装 JAVA JDK 相关问题</h2><blockquote><p>之前安装 java jdk 都是在官网下载 pkg 包安装，有新版本然后再重新下，管理、升级和卸载起来都极不方便，另外现在直接在官网下载还是会以 0 kb 提示用户下载失败， vpn 也试了最后没成功，相较而言，使用 brew 提供自动安装和卸载的功能，管理起来也比自行安装方便轻松。如果还没用过 brew 的话可以自行 google 安装；整理借鉴：<a href="https://juejin.im/post/5d550c5d51882504fb3022f7；" target="_blank" rel="noopener">https://juejin.im/post/5d550c5d51882504fb3022f7；</a></p></blockquote><p>如果安装最新版本的 JDK，直接执行 <code>brew cask install java</code>,很多时候开发环境并不一定需要最新版的 JDK 的特性，还需要在一些低版本的 JDK 基础上开发，如果使用 brew 安装其他版本的 JDK 还需要使用 <code>homebrew-cask-versions</code>，此命令行工具主要用于安装应用的历史版本，如果你未曾使用过则需要先进行以下的命令配置下</p><p>可能会看到类似这样的命令 <code>brew tap caskroom/versions</code>，这个是相对老版本的配置了，会提示 <code>caskroom/versions was moved. Tap homebrew/cask-versions instead.</code> 替换以下就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/cask-versions</span><br></pre></td></tr></table></figure><p>可以执行 brew 的 search 命令看看有哪些 JDK 版本可供安装的：<code>brew search java</code>；</p><p>安装指定版本时早些日子常用 <code>brew cask install java8</code> 来安装，但是会提示 <code>Error: Cask &#39;java8&#39; is unavailable: No Cask with this name exists.</code> 可以尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew tap AdoptOpenJDK/openjdk</span><br><span class="line"></span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Tapping adoptopenjdk/openjdk</span><br><span class="line">Cloning into &apos;/usr/local/Homebrew/Library/Taps/adoptopenjdk/homebrew-openjdk&apos;...</span><br><span class="line">remote: Enumerating objects: 40, done.</span><br><span class="line">remote: Counting objects: 100% (40/40), done.</span><br><span class="line">remote: Compressing objects: 100% (37/37), done.</span><br><span class="line">remote: Total 40 (delta 23), reused 6 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (40/40), done.</span><br><span class="line">Tapped 26 casks (98 files, 100.6KB).</span><br></pre></td></tr></table></figure><p>完事儿后再执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 安装的就是 jdk8 最新的版本</span><br><span class="line">➜  ~ brew cask install adoptopenjdk8</span><br><span class="line"></span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Downloading https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u232-b09/OpenJDK8U-jdk_x64_mac_hotsp</span><br><span class="line">==&gt; Downloading from https://github-production-release-asset-2e65be.s3.amazonaws.com/140418865/f8992f00-f3f0-11e9-951b-b9bbc</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Verifying SHA-256 checksum for Cask &apos;adoptopenjdk8&apos;.</span><br><span class="line">==&gt; Installing Cask adoptopenjdk8</span><br><span class="line">==&gt; Creating Caskroom at /usr/local/Caskroom</span><br><span class="line">==&gt; We&apos;ll set permissions properly so we won&apos;t need sudo in the future.</span><br><span class="line">Password:输入密码</span><br><span class="line">==&gt; Running installer for adoptopenjdk8; your password may be necessary.</span><br><span class="line">==&gt; Package installers may write to any location; options such as --appdir are ignored.</span><br><span class="line">installer: Package name is AdoptOpenJDK</span><br><span class="line">installer: Installing at base path /</span><br><span class="line">installer: The install was successful.</span><br><span class="line">🍺  adoptopenjdk8 was successfully installed!</span><br></pre></td></tr></table></figure><p>安装过程可能会因为网络不稳定多次失败，多操作几次即可；执行过程中需要输入密码授权。<br>执行过程中创建的路径<code>/usr/local/Caskroom</code>，对应我的电脑路径下是这样的 <code>/usr/local/Caskroom/adoptopenjdk8/8,232:b09/OpenJDK8U-jdk_x64_mac_hotspot_8u232b09.pkg</code>，我理解的应该会把 pkg 文件解压安装到 mac 目录<code>/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk</code> 下，这个 pkg 文件对应的可以删掉。</p><p>此时执行 <code>java -version</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ java -version</span><br><span class="line"></span><br><span class="line">openjdk version &quot;1.8.0_232&quot;</span><br><span class="line">OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_232-b09)</span><br><span class="line">OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.232-b09, mixed mode)</span><br></pre></td></tr></table></figure><p>之前在官网下载后配置效果，对比一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ java -version</span><br><span class="line"></span><br><span class="line">java version &quot;1.8.0_212&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_212-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.212-b10, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="查看所有已安装的-JDK-版本路径地址："><a href="#查看所有已安装的-JDK-版本路径地址：" class="headerlink" title="查看所有已安装的 JDK 版本路径地址："></a>查看所有已安装的 JDK 版本路径地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home -V</span><br><span class="line">/usr/libexec/java_home -- v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米手机 Toast 显示带应用名称问题解决方法</title>
      <link href="/e95e.html"/>
      <url>/e95e.html</url>
      
        <content type="html"><![CDATA[<h2 id="小米-Toast-问题"><a href="#小米-Toast-问题" class="headerlink" title="小米 Toast 问题"></a>小米 Toast 问题</h2><p>小米 青春8 手机，有不少适配问题，最令人不舒服的是 Toast 内容前带应用名称。</p><h3 id="网上的方案"><a href="#网上的方案" class="headerlink" title="网上的方案"></a>网上的方案</h3><p>网上的解决方法很多，诸如下面这种方式的很多:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private Toast toast;</span><br><span class="line">public void show(String text) &#123;</span><br><span class="line">    if (toast == null) &#123;</span><br><span class="line">        toast = Toast.makeText(this, null, Toast.LENGTH_SHORT);</span><br><span class="line">        toast.setText(text);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        toast.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line">    toast.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makeText() 后第二个参数为 <code>null</code> ，自测了下，确实是没有了烦人的应用名称。</p><p>但是如果留心看 log 日志的话，会报这样一个异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">W/System.err: java.lang.NullPointerException: Attempt to invoke interface method &apos;java.lang.String java.lang.CharSequence.toString()&apos; on a null object reference</span><br><span class="line">W/System.err:     at android.widget.ToastInjector.addAppName(ToastInjector.java:50)</span><br><span class="line">W/System.err:     at android.widget.Toast.makeText(Toast.java:287)</span><br><span class="line">W/System.err:     at android.widget.Toast.makeText(Toast.java:270)</span><br><span class="line">W/System.err:     at com.android.rxjavaproject.MainActivity.show(MainActivity.java:105)</span><br><span class="line">W/System.err:     at com.android.rxjavaproject.MainActivity.onCreate(MainActivity.java:98)</span><br><span class="line">W/System.err:     at android.app.Activity.performCreate(Activity.java:7210)</span><br><span class="line">W/System.err:     at android.app.Activity.performCreate(Activity.java:7201)</span><br><span class="line">W/System.err:     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1272)</span><br><span class="line">W/System.err:     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2926)</span><br><span class="line">W/System.err:     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3081)</span><br><span class="line">W/System.err:     at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)</span><br><span class="line">W/System.err:     at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)</span><br><span class="line">W/System.err:     at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)</span><br><span class="line">W/System.err:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1831)</span><br><span class="line">W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:106)</span><br><span class="line">W/System.err:     at android.os.Looper.loop(Looper.java:201)</span><br><span class="line">W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6806)</span><br><span class="line">W/System.err:     at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">W/System.err:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:547)</span><br><span class="line">W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:873)</span><br></pre></td></tr></table></figure><p>NullPointerException 异常，这样的问题是小米手机新版本系统，深度定制导致的。</p><p>个人的处理方式是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void show(String text) &#123;</span><br><span class="line">    if (toast == null) &#123;</span><br><span class="line">        toast = Toast.makeText(this, text, Toast.LENGTH_SHORT);</span><br><span class="line">        toast.setText(text);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        toast.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line">    toast.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makeText() text 参数正常设置，之后再重新 set 下，这样既保证了去掉包名，也没有任何异常。另外我们也可以尝试自定义 toast 来满足 toast 需求。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> XiaoMi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> XiaoMi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 常见面试问题整理</title>
      <link href="/242f.html"/>
      <url>/242f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对 Android 面试常见问题点进行总结分析，方便对碎片知识进行回顾<a id="more"></a>。<br>Android 基础常见面试问题的整理，会持续更新…</p></blockquote><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><h4 id="说下-handler-机制，Looper-通过-MessageQueue-取消息，消息队列是先进先出模式，那我延迟发两个消息，第一个消息延迟-2-个小时，第二个消息延迟-1-个小时，那么第二个消息需要等-3-个小时才能取到吗？"><a href="#说下-handler-机制，Looper-通过-MessageQueue-取消息，消息队列是先进先出模式，那我延迟发两个消息，第一个消息延迟-2-个小时，第二个消息延迟-1-个小时，那么第二个消息需要等-3-个小时才能取到吗？" class="headerlink" title="说下 handler 机制，Looper 通过 MessageQueue 取消息，消息队列是先进先出模式，那我延迟发两个消息，第一个消息延迟 2 个小时，第二个消息延迟 1 个小时，那么第二个消息需要等 3 个小时才能取到吗？"></a>说下 handler 机制，Looper 通过 MessageQueue 取消息，消息队列是先进先出模式，那我延迟发两个消息，第一个消息延迟 2 个小时，第二个消息延迟 1 个小时，那么第二个消息需要等 3 个小时才能取到吗？</h4><blockquote><p>参考：<a href="https://www.jianshu.com/p/558ed68d6888" target="_blank" rel="noopener">https://www.jianshu.com/p/558ed68d6888</a></p></blockquote><p>MessageQueue 的实现不是队列，不要被名称迷惑，他是一个链表；每次发送消息都会按照 delay 值从小到大进行重排；所有的 delay 消息都是并行的，不是串行的；第一个延迟 2 个小时，第二个延迟 1 小时，会优先执行第二个，再过 1 小时执行第一个。</p><h2 id="Android-为什么不能在子线程更新-UI-？"><a href="#Android-为什么不能在子线程更新-UI-？" class="headerlink" title="Android 为什么不能在子线程更新 UI ？"></a>Android 为什么不能在子线程更新 UI ？</h2><p>谷歌提出：“一定要在主线程更新UI”，实际是为了提高界面的效率和安全性，带来更好的流畅性；<br>反推一下，假如允许多线程更新UI，但是访问 UI 是没有加锁的，一旦多线程抢占了资源，那么界面将会乱套更新了，体验效果就不言而喻了；<br>UI 控件是非线程安全，在多线程中并发访问可能会导致UI控件处于不可预期的状态。所以在Android中规定必须在主线程更新UI。</p><h4 id="不对-UI-控件的访问加上锁机制的原因？"><a href="#不对-UI-控件的访问加上锁机制的原因？" class="headerlink" title="不对 UI 控件的访问加上锁机制的原因？"></a>不对 UI 控件的访问加上锁机制的原因？</h4><p>上锁会让UI控件变得复杂和低效；<br>上锁后会阻塞某些进程的执行；</p><h4 id="在-Activity-的-onCreate-里开一个子线程更新-UI，可以运行吗？"><a href="#在-Activity-的-onCreate-里开一个子线程更新-UI，可以运行吗？" class="headerlink" title="在 Activity 的 onCreate 里开一个子线程更新 UI，可以运行吗？"></a>在 Activity 的 onCreate 里开一个子线程更新 UI，可以运行吗？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;  </span><br><span class="line">    private TextView tvText;  </span><br><span class="line">    @Override  </span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;  </span><br><span class="line">        super.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        tvText = (TextView) findViewById(R.id.main_tv);  </span><br><span class="line">        new Thread(new Runnable() &#123;  </span><br><span class="line">            @Override  </span><br><span class="line">            public void run() &#123;  </span><br><span class="line">                try &#123;  </span><br><span class="line">                    Thread.sleep(200);  </span><br><span class="line">                &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">                tvText.setText(&quot;OtherThread&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件结果是可以运行。</p><p>原因如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public final class ViewRootImpl implements ViewParent,  </span><br><span class="line">        View.AttachInfo.Callbacks, HardwareRenderer.HardwareDrawCallbacks &#123;  </span><br><span class="line">    // 省略代码…………………………  </span><br><span class="line">  </span><br><span class="line">    void checkThread() &#123;  </span><br><span class="line">        if (mThread != Thread.currentThread()) &#123;  </span><br><span class="line">            throw new CalledFromWrongThreadException(  </span><br><span class="line">                    &quot;Only the original thread that created a view hierarchy can touch its views.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    // 省略代码……………………  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ViewRootImpl</code> 对象是在 onResume 方法回调之后才创建，那么就说明了为什么在生命周期的 onCreate() 方法里，甚至是 onResume() 方法里都可以实现子线程更新 UI，因为此时还没有创建 ViewRootImpl 对象，并不会进行是否为主线程的判断, 也就是 ViewRootImpl 的 checkThread() 会检查，而 ViewRootImpl 是在 onResume() 方法里创建。onCreate() 里还没有创建 ViewRootImpl，所以不会抛出异常。</p><p>如果耗时的话，才会抛出异常，可以尝试让线程休眠 100ms or 1000ms。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment 生命周期浅析及常见问题整理</title>
      <link href="/4492.html"/>
      <url>/4492.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>平时项目中少不了 Fragment 的使用，也会遇到一些奇怪的问题，今天抽时间对 Fragment 的生命周期，奇葩问题进行一个稍微全面的总结 <a id="more"></a>。<a href="https://developer.android.com/guide/components/fragments?hl=zh-CN" target="_blank" rel="noopener"><strong>官方指南</strong></a></p></blockquote><h2 id="Fragment-各个生命周期作用和拓展"><a href="#Fragment-各个生命周期作用和拓展" class="headerlink" title="Fragment 各个生命周期作用和拓展"></a>Fragment 各个生命周期作用和拓展</h2><h3 id="Fragment-各个生命周期介绍"><a href="#Fragment-各个生命周期介绍" class="headerlink" title="Fragment 各个生命周期介绍"></a>Fragment 各个生命周期介绍</h3><p>先上两张官方图，左侧 Activity 和 Fragment 生命周期对比，右侧是 Fragment 生命周期。</p><div align="center">    <img alt="activity and fragment lifecycle" class="post-image-center" src="./img/blog/android/activity_fragment_lifecycle.png" height="auto" width="auto" ><img alt="fragment_lifecycle" class="post-image-center" src="./img/blog/android/fragment_lifecycle.png" height="auto" width="auto" ></div><h4 id="onAttach"><a href="#onAttach" class="headerlink" title="onAttach()"></a><strong>onAttach()</strong></h4><p>执行该方法时，Fragment 与 Activity 已经完成绑定，onAttach (Activity activity) 该方法有一个 Activity 类型的参数，代表绑定的 Activity，这时候你可以根据需要进行 mActivity = activity 赋值操作。</p><blockquote><p>拓展：Fragment 关联到 Activity 时的回调，此时 Activity 已经与 Fragment 关联，通过 Context 向下转型，就可以与 Activity 通信当然也可以使用 getActivity(),前提是这个 fragment 已经和宿主的 activity 关联，并且没有脱离。onAttach 只调用一次。</p></blockquote><h4 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a><strong>onCreate()</strong></h4><p>初始化Fragment。可通过参数 savedInstanceState 获取之前保存的值。</p><blockquote><p>拓展：系统创建 Fragment 的时候回调，介于 onAttach() 和 onCreateView() 之间，一般用于初始化一些数据，需要注意的是，此时 Activity 还在创建中，因此不能在执行一些跟 Activity UI 相关的操作，否则会出现一些难以预料的问题，如NullPointException 如果要对 Activity 上的 UI 进行操作，可在 onActivityCreated() 中操作。</p></blockquote><h4 id="onCreateView"><a href="#onCreateView" class="headerlink" title="onCreateView()"></a><strong>onCreateView()</strong></h4><p>初始化 Fragment 的布局。加载布局和 findViewById 的操作通常在此函数内完成，但是不建议执行耗时的操作，比如读取数据库数据列表。</p><blockquote><p>拓展：创建 Fragment 需要显示的 View，默认返回 null。当返回的 View 不为 null 时，View 被销毁时会调用onDestroyView()，此处应该只进行布局的初始化，而不应该执行耗时操作，如网络请求、数据库读取等。另外有时候 onCreateView 会被多次调用, 可以把初始化布局、view 的过程放在 onCreate 中，onCreateView 中直接 return View 对象即可。</p></blockquote><h4 id="onActivityCreated"><a href="#onActivityCreated" class="headerlink" title="onActivityCreated()"></a><strong>onActivityCreated()</strong></h4><p>执行该方法时，与 Fragment 绑定的 Activity 的 onCreate 方法已经执行完成并返回，在该方法内可以进行与 Activity 交互的 UI 操作，所以在该方法之前 Activity 的 onCreate 方法并未执行完成，如果提前进行交互操作，会引发空指针异常。</p><blockquote><p>拓展：当 Activity 执行完 onCreate() 方法后会被调用，此时可以执行与 Activity 相关的 UI 操作</p></blockquote><h4 id="onSaveInstanceState"><a href="#onSaveInstanceState" class="headerlink" title="onSaveInstanceState()"></a><strong>onSaveInstanceState()</strong></h4><p>保存当前Fragment的状态。该方法会自动保存Fragment的状态，比如EditText键入的文本，即使Fragment被回收又重新创建，一样能恢复EditText之前键入的文本。</p><br>###### ----------------------------- 以下几个跟 Activity 中对应方法类似 start ---------------------------- <h4 id="onStart"><a href="#onStart" class="headerlink" title="onStart()"></a><strong>onStart()</strong></h4><p>执行该方法时，Fragment 由不可见变为可见状态。</p><h4 id="onResume"><a href="#onResume" class="headerlink" title="onResume()"></a><strong>onResume()</strong></h4><p>执行该方法时，Fragment 处于活动状态，用户可与之交互。</p><h4 id="onPause"><a href="#onPause" class="headerlink" title="onPause()"></a><strong>onPause()</strong></h4><p>执行该方法时，Fragment 处于暂停状态，但依然可见，用户不能与之交互。</p><h4 id="onStop"><a href="#onStop" class="headerlink" title="onStop()"></a><strong>onStop()</strong></h4><p>执行该方法时，Fragment 完全不可见。</p><h6 id="—————————–-以上几个跟-Activity-中对应方法类似-end-—————————"><a href="#—————————–-以上几个跟-Activity-中对应方法类似-end-—————————" class="headerlink" title="—————————– 以上几个跟 Activity 中对应方法类似 end —————————-"></a>—————————– 以上几个跟 Activity 中对应方法类似 end —————————-</h6><br><h4 id="onDestroyView"><a href="#onDestroyView" class="headerlink" title="onDestroyView()"></a><strong>onDestroyView()</strong></h4><p>销毁与 Fragment 有关的视图，但未与 Activity 解除绑定，依然可以通过 onCreateView 方法重新创建视图。通常在ViewPager + Fragment 结合使用时会调用此方法。</p><blockquote><p>拓展：表示销毁 Fragment 相关联的 UI 布局，清除所有跟视图相关的资源。不一定在 Activity 的 onDestroy() 方法中调用。</p></blockquote><h4 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a><strong>onDestroy()</strong></h4><p>销毁 Fragment。通常按 Back 键退出或者 Fragment 被回收时调用此方法。</p><blockquote><p>拓展：销毁 Fragment 对象的时候调用，一般是调用 Activity 的 onDestroy() 的时候执行。</p></blockquote><h4 id="onDetach"><a href="#onDetach" class="headerlink" title="onDetach()"></a><strong>onDetach()</strong></h4><p>解除与 Activity 的绑定（解除 Fragment 与 Activity 的关联）。在 onDestroy 方法之后调用。</p><h4 id="setUserVisibleHint"><a href="#setUserVisibleHint" class="headerlink" title="setUserVisibleHint()"></a><strong>setUserVisibleHint()</strong></h4><p>设置Fragment可见或者不可见时会调用此方法。在该方法里面可以通过调用 getUserVisibleHint() 获得 Fragment 的状态是可见还是不可见的，如果可见则进行懒加载操作。</p><blockquote><p>拓展：当 Fragment 与 ViewPager 结合使用时，切换 Pager 时回调方法。</p></blockquote><br>### ViewPager 切换 Fragment 相关生命周期<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">// Fragment 初始化创建</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: setUserVisibleHint</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onAttach</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onCreate</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onCreateView</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onActivityCreated</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStart</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Fragment变为不可见状态</span><br><span class="line">// 屏幕锁屏、回到桌面、被Activity完全覆盖 经历一样的生命周期</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onPause</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onSaveInstanceState</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 屏幕解锁</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStart</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 切换到其他 Fragment</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onPause</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStop</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDestroyView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 切换回本身的 Fragment</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onCreateView</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onActivityCreated</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStart</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 回到应用</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStart</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Fragment 退出（注意退出不会调用onSaveInstanceState方法，因为是人为退出，没有必要再保存数据）</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onPause</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStop</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDestroyView</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDestroy</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDetach</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Fragment变为部分可见状态（打开Dialog样式的Activity）</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onPause</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onSaveInstanceState</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Fragment 由不可见变为活动状态</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStart</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Fragment由部分可见变为活动状态</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Fragment 被回收又重新创建</span><br><span class="line">// 被回收执行</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onPause</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onSaveInstanceState</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStop</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDestroyView</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDestroy</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onDetach</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 重新创建执行</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onAttach</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onCreate</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onCreateView</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onActivityCreated</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onStart</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: onResume</span><br><span class="line">04-02 21:24:48.240 2049-2448/? I/Fragment Lifecycle: setUserVisibleHint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 横竖屏切换：与Fragment被回收又重新创建一样。</span><br></pre></td></tr></table></figure><br>### **补充**<p>onAttach() 和 onCreate() 只在 Fragment 与 Activity 第一次关联时调用。</p><p>onDestroy() 和 onDetach() 只在 Fragment 的宿主 Activity 销毁时才会被调用。</p><p>根据前 2 点，将 Fragment 通过 addToBackStack() 只涉及 onCreateView() 和 onDestroyView() 这之间的生命周期。add() 和 replace() 不会对 Fragment 的生命周期产生影响，但 add() 方法会造成 Fragment 叠加显示。</p><p>Fragment 与 ViewPager 结合使用时的生命周期与第 3 点相似。</p><p>通过 hide() 、show() 来隐藏、显示Fragment，此时 Fragment 只改变了可见性，并不涉及生命周期的改变。</p><p>不要在 Fragment 的 onCreate() 方法中操作宿主 Activity 的 UI。因为无法保证此时宿主 Activity 的 UI 已经完全初始化，某些情况下也是可以确保宿主 Activity 已经初始化完成的。</p><h4 id="onViewCreated"><a href="#onViewCreated" class="headerlink" title="onViewCreated()"></a>onViewCreated()</h4><blockquote><p>该方法在 onCreateView() 之后会被立即执行，此时可以对 View 对象进行赋值，onCreateView 是创建的时候调用，onViewCreated 是在 onCreateView 后被触发的事件，前后关系。</p></blockquote><p>Fragment 中有几个比较相似的生命周期方法 onCreate、onCreatView、onViewCreated，需要仔细区分一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Called immediately after onCreateView(android.view.LayoutInflater, android.view.ViewGroup, </span><br><span class="line"> * android.os.Bundle) has returned, but before any saved state has been restored in to the view. </span><br><span class="line"> * This gives subclasses a chance to initialize themselves once they know their view hierarchy has</span><br><span class="line"> * been completely created. The fragment&apos;s view hierarchy is not however attached to its parent at </span><br><span class="line"> * this point.</span><br><span class="line"> */</span><br><span class="line">void onViewCreated(View view, Bundle savedInstanceState)</span><br></pre></td></tr></table></figure><p>官方的一段介绍， onCreateView 是创建的时候调用，onViewCreated 会在 onCreateView 被触发后调用，前后关系；也是 fragment 中的 onCreateView 和 onViewCreated 的区别和联系。另外 onStart 运行时间位于 onViewCreated 之后。</p><h2 id="Fragment-相关奇葩问题整理"><a href="#Fragment-相关奇葩问题整理" class="headerlink" title="Fragment 相关奇葩问题整理"></a>Fragment 相关奇葩问题整理</h2><h3 id="onCreateView（）调用多次？"><a href="#onCreateView（）调用多次？" class="headerlink" title="onCreateView（）调用多次？"></a>onCreateView（）调用多次？</h3><p>遇到在滑动 Fragment 的过程中不断重复调用 onCreateView 的问题，导致控件不断初始化，影响程序的整体逻辑。<br>可以尝试把初始化操作写在 OnCreate() 中，是为了控件只初始化一次。oncreateView 会被多次执行。</p><p>另一种方案：</p><pre><code>private View mView;@Overridepublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {    if (null != mView){        ViewGroup parent = (ViewGroup) mView.getParent();        if (null != parent) {            parent.removeView(mView);        }    }else {        mView = inflater.inflate(R.layout.main_layout, container, false);        // 初始化 View， findViewById();    }    return mView;}</code></pre><h3 id="setUserVisibleHint-不被调用？"><a href="#setUserVisibleHint-不被调用？" class="headerlink" title="setUserVisibleHint() 不被调用？"></a>setUserVisibleHint() 不被调用？</h3><p>通常情况下都是因为继承的是 PagerAdapter 而不是 FragmentPagerAdapter 造成的，FragmentPagerAdapter 内部实现了对setUserVisibleHint()方法的调用，所以需要懒加载的结构最好使用 FragmentPagerAdapter + Fragment 的结构，少用PagerAdapter。</p><h3 id="FragmentStatePagerAdapter-和-FragmentPagerAdapter-区别？"><a href="#FragmentStatePagerAdapter-和-FragmentPagerAdapter-区别？" class="headerlink" title="FragmentStatePagerAdapter 和 FragmentPagerAdapter 区别？"></a>FragmentStatePagerAdapter 和 FragmentPagerAdapter 区别？</h3><p>FragmentPagerAdapter 是另一种可用的 PagerAdapter，其用法和 FragmentStatePagerAdapter 基本一致，只是在卸载不需要的 fragment 时，各自采用的处理方法不同。</p><p>FragmentStatePagerAdapter 会销毁不需要的 fragment，而 FragmentPagerAdapter 是调用 detach(Fragment) 方法来处理它，只是销毁了 fragment 的视图，而 fragment 的实例由 FragmentManager 维护，因此，FragmentPagerAdapter 创建的 fragment 永远不会被销毁。</p><p>所以当数据量大时，可以选择 FragmentStatePagerAdapter，用户界面只有少量固定的 fragment 时，可以选择 FragmentPagerAdapter。</p><h3 id="FragmentPagerAdapter-ViewPager-的注意事项"><a href="#FragmentPagerAdapter-ViewPager-的注意事项" class="headerlink" title="FragmentPagerAdapter+ViewPager 的注意事项 ?"></a><a href="https://juejin.im/post/5a1c068b6fb9a045030fcf8c" target="_blank" rel="noopener"><strong>FragmentPagerAdapter+ViewPager 的注意事项 ?</strong></a></h3><p>使用 FragmentPagerAdapter + ViewPager 时，切换回上一个 Fragment 页面时（已经初始化完毕），不会回调任何生命周期方法以及onHiddenChanged()，只有 setUserVisibleHint(boolean isVisibleToUser)会被回调，所以如果你想进行一些懒加载，需要在这里处理。</p><p>在给ViewPager绑定FragmentPagerAdapter时，new FragmentPagerAdapter(fragmentManager)的FragmentManager，一定要保证正确，如果ViewPager是Activity内的控件，则传递getSupportFragmentManager()，如果是Fragment的控件中，则应该传递getChildFragmentManager()。只要记住ViewPager内的Fragments是当前组件的子Fragment这个原则即可。</p><p>你不需要考虑在“内存重启”的情况下，去恢复的Fragments的问题，因为FragmentPagerAdapter已经帮我们处理啦。</p><h3 id="未完待更新…"><a href="#未完待更新…" class="headerlink" title="未完待更新…"></a>未完待更新…</h3><p>未完待更新…</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns in Android</title>
      <link href="/ebf2.html"/>
      <url>/ebf2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对日常在 Android 中实用设计模式进行一下梳理和总结<a id="more"></a>，文中参考了一些网站和大佬的博客，如          <a href="http://blog.csdn.net/xiong_it" target="_blank" rel="noopener">MichaelX（xiong_it）</a> 、<a href="http://www.runoob.com" target="_blank" rel="noopener">菜鸟教程</a>、<a href="https://www.jianshu.com/p/8f32da74cd8b" target="_blank" rel="noopener">四月葡萄</a>、<a href="https://juejin.im/post/5a4e4725f265da3e2c37e36e" target="_blank" rel="noopener">IAM四十二</a>等，在这里注明下~另外强烈推荐<a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">图说设计模式</a>，看了一部分，有些介绍的还是很通俗易懂的。</p></blockquote><h2 id="设计模式（持续更新ing…）"><a href="#设计模式（持续更新ing…）" class="headerlink" title="设计模式（持续更新ing…）"></a>设计模式（持续更新ing…）</h2><h3 id="单例模式-Singleton-pattern"><a href="#单例模式-Singleton-pattern" class="headerlink" title="单例模式 (Singleton pattern)"></a>单例模式 (Singleton pattern)</h3><p>确保一个类只有一个实例，并且自行实例化并向整个系统提供这个实例(并提供对该实例的全局访问)</p><h4 id="饿汉式、懒汉式名词解释："><a href="#饿汉式、懒汉式名词解释：" class="headerlink" title="饿汉式、懒汉式名词解释："></a>饿汉式、懒汉式名词解释：</h4><p><strong>饿汉式：</strong>不管程序是否需要这个对象的实例，总是在类加载的时候就先创建好实例，理解起来就像不管一个人想不想吃东西都把吃的先买好，如同饿怕了一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 饿汉式</span><br><span class="line"> */</span><br><span class="line">public class Singleton &#123;</span><br><span class="line"></span><br><span class="line">    private static Singleton instance = new Singleton();</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：写法简单，线程安全。</li><li>缺点：没有懒加载的效果，如果没有使用过的话会造成内存浪费</li></ul><p><strong>懒汉式：</strong>如果一个对象使用频率不高，占用内存还特别大，明显就不合适用饿汉式了，这时就需要一种懒加载的思想，当程序需要这个实例的时候才去创建对象，就如同一个人懒的饿到不行了才去吃东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 懒汉式</span><br><span class="line"> */</span><br><span class="line">public class Singleton &#123;  </span><br><span class="line">    /**</span><br><span class="line">     * volatile 关键字修饰的变量，一次只能有一个线程操作该变量，保证线程安全</span><br><span class="line">     * volatile 能够防止代码的重排序，保证得到的对象是初始化过</span><br><span class="line">     */</span><br><span class="line">    private volatile static Singleton mSingleton;  </span><br><span class="line">    </span><br><span class="line">    private Singleton ()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 双重校验锁模式</span><br><span class="line">     */</span><br><span class="line">    public static Singleton getSingleton() &#123;  </span><br><span class="line">    if (mSingleton == null) &#123; // 第一次检查，避免不必要的同步 </span><br><span class="line">        synchronized (Singleton.class) &#123;  // 同步</span><br><span class="line">        if (mSingleton == null) &#123;  // 第二次检查，为null时才创建实例</span><br><span class="line">            mSingleton = new Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return mSingleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：懒加载，线程安全，效率较高</li><li>缺点：volatile 影响一点性能，高并发下有一定的缺陷，某些情况下 DCL 会失效，虽然概率较小</li></ul><p><strong>volatile</strong> 关键字修饰的变量，一次只能有一个线程操作该变量，保证线程安全。</p><h4 id="为什么要在变量-singleton-加上-volatile-关键字？"><a href="#为什么要在变量-singleton-加上-volatile-关键字？" class="headerlink" title="为什么要在变量 singleton 加上 volatile 关键字？"></a>为什么要在变量 singleton 加上 volatile 关键字？</h4><p>要理解这个问题，先要了解对象的构造过程，实例化一个对象其实可以分为三个步骤：</p><ul><li>分配内存空间</li><li>初始化对象</li><li>将内存空间的地址赋值给对应的引用</li></ul><p>但是由于操作系统可以对指令进行重排序，所以上面的过程也可能会变成如下过程：</p><ul><li>分配内存空间</li><li>将内存空间的地址赋值给对应的引用</li><li>初始化对象</li></ul><p>如果是这个流程，多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。</p><h4 id="双重校验锁中两个-if-判断的作用？"><a href="#双重校验锁中两个-if-判断的作用？" class="headerlink" title="双重校验锁中两个 if 判断的作用？"></a>双重校验锁中两个 if 判断的作用？</h4><p>第一：是为了提高程序的 效率，当 Singleton 对象被创建以后，再获取 Singleton 对象时就 不用去验证同步代码块的锁及后面的代码，直接返回Singleton 对象。<br>第二：是为了解决多线程下的安全性问题，也就是保证对象的唯一。<br>如果没有第二个 if 判断，A、B两个线程，A 先执行， 线程 B 再进入 synchronized (instance)块，不用去验证instance 是否为 null，就会直接创建一个 Singleton 新对象，这样整个程序运行下来就有可能创建多个实例。</p><blockquote><p>注意：<br>如果处于多线程环境，注意保持线程安全，不然就无法保证单例了；<br>单例模式的默认构造方法的修饰符需改为 private，只能类内部访问，确保外部不能直接 new 出该实例；<br>单例模式需要提供一个全局访问入口，这个入口通常以 getInstance() 的 public 静态方法形式呈现。</p></blockquote><br><h3 id="简单工厂模式-Simple-Factory-Pattern"><a href="#简单工厂模式-Simple-Factory-Pattern" class="headerlink" title="简单工厂模式 (Simple Factory Pattern )"></a>简单工厂模式 (Simple Factory Pattern )</h3><blockquote><p>更多详细介绍工程模式，可链接查看 <a href="https://www.jianshu.com/p/e594f140b937" target="_blank" rel="noopener">四月葡萄</a></p></blockquote><p>定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。</p><p>生成复杂对象时，确定只有一个工厂类，可以使用简单工厂模式。否则有多个工厂类的话，使用<a href="https://www.jianshu.com/p/e6c02a54f447" target="_blank" rel="noopener">工厂方法模式</a>。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>代码解耦，创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>违背开放封闭原则，若需添加新产品则必须修改工厂类逻辑，会造成工厂逻辑过于复杂。<br>简单工厂模式使用了静态工厂方法，因此静态方法不能被继承和重写。<br>工厂类包含了所有实例（产品）的创建逻辑，若工厂类出错，则会造成整个系统都会会受到影响。</p><h4 id="Android-开发中的工厂模式实践"><a href="#Android-开发中的工厂模式实践" class="headerlink" title="Android 开发中的工厂模式实践"></a>Android 开发中的工厂模式实践</h4><p>场景：项目中使用了 Universal Image Loader作为图片加载框架，过一段时间后，发现 UIL 已经不流行了，想用更加 fashion的 Glide 来代替 UIL，再或者有一天，Glide 不更新，也不 fashion 了… 难道又要换其他图片加载框架？难道又改吗？？？<br>这个时候，工厂方法可能可以帮上忙：使用工厂类隔离图片加载的具体实现，对外只暴露一个工厂方法用来外部生产想要的加载框架实例，就可避免上述提到的尴尬。</p><p>图片加载接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 图片加载接口</span><br><span class="line"> */</span><br><span class="line">public interface ImageLoaderInterf &#123;</span><br><span class="line">    interface CallBack &#123;</span><br><span class="line">        void onSuccess(Bitmap result);</span><br><span class="line">        void onFailure();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void load(Context context, String imgUrl, ImageView view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片加载工厂类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class ImgLoaderClientFactory &#123;</span><br><span class="line">    public static final GLIDE = 0;</span><br><span class="line">    public static final UIL = 1;</span><br><span class="line">    public static final PICASSO = 2;</span><br><span class="line"></span><br><span class="line">    public static ImageLoaderInterf getImageLoaderClient(int type) &#123;</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case GLIDE:</span><br><span class="line">                return GlideClient.getInstance();</span><br><span class="line"></span><br><span class="line">            case UIL:</span><br><span class="line">                return UilClient.getInstance();</span><br><span class="line"></span><br><span class="line">            default:</span><br><span class="line">                return PicassoClient.getInstance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UilClient：Universal Image Loader封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class UilClient implements ImageLoaderInterf &#123;</span><br><span class="line"></span><br><span class="line">    private static UilClient sInstance;</span><br><span class="line"></span><br><span class="line">    private UilClient() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static UilClient getInstance() &#123;</span><br><span class="line">        synchronized (UilClient.class) &#123;</span><br><span class="line">            if (sInstance == null) &#123;</span><br><span class="line">                sInstance = new UilClient();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void load(Context context, String imgUrl, ImageView view) &#123;</span><br><span class="line">        ImageLoader.getInstance().displayImage(imgUrl, view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GlideClient：Glide的二次封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class GlideClient implements ImageLoaderInterf &#123;</span><br><span class="line">    private static GlideClient sInstance;</span><br><span class="line"></span><br><span class="line">    private GlideClient() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static GlideClient getInstance() &#123;</span><br><span class="line">        synchronized (GlideClient.class) &#123;</span><br><span class="line">            if (sInstance == null) &#123;</span><br><span class="line">                sInstance = new GlideClient();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void load(Context context, String imgUrl, ImageView view) &#123;</span><br><span class="line">        Glide.with(context).load(imgUrl).into(view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PicassoClient：Picasso封装类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class PicassoClient implements ImageLoaderInterf &#123;</span><br><span class="line"></span><br><span class="line">    private static PicassoClient sInstance;</span><br><span class="line"></span><br><span class="line">    private PicassoClient() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static PicassoClient getInstance() &#123;</span><br><span class="line">        synchronized (PicassoClient.class) &#123;</span><br><span class="line">            if (sInstance == null) &#123;</span><br><span class="line">                sInstance = new PicassoClient();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void load(Context context, String imgUrl, ImageView view) &#123;</span><br><span class="line">        Picasso.with(context).load(imgUrl).into(view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么加载图片设置就变成了下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImgLoaderClientFactory.getImageLoaderClient(ImgLoaderClientFactory.UIL).load(mContext, imgUrl, imageView);</span><br></pre></td></tr></table></figure><p>要切换图片框架呢？怎么办？可以单独写一个变量通过赋值，全局使用，或者 全局搜索替换 ImgLoaderClientFactory.UIL 也行，比如想切到Glide，将用到 ImgLoaderClientFactory.UIL 地方改成 ImgLoaderClientFactory.GLIDE 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImgLoaderClientFactory.getImageLoaderClient(ImgLoaderClientFactory.GLIDE).load(mContext, imgUrl, imageView);</span><br></pre></td></tr></table></figure><br><h3 id="策略模式-Strategy-pattern"><a href="#策略模式-Strategy-pattern" class="headerlink" title="策略模式 (Strategy pattern)"></a>策略模式 (Strategy pattern)</h3><p>定义一组算法，将其各个封装，并且使他们有交换性</p><p>策略模式好处在于使得算法在用户使用的时候能独立的改变，单一的修改，并且有良好扩展性。</p><blockquote><p>算法：指的是各个策略的实现逻辑，而非算法领域的数据算法。</p></blockquote><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>策略类可以互相替换<br>由于策略类都实现同一个接口，因此他们能够互相替换。</li><li>耦合度低，方便扩展<br>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合开闭原则。</li><li>避免使用多重条件选择语句（if-else或者switch）。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>策略的增多会导致子类的也会变多</li><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </li><li>一个系统需要动态地在几种算法中选择一种。 </li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li></ul><h4 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h4><p><img src="/img/blog/design-pattern/Strategy.jpg" alt="Strategy UML"></p><!-- <div align="left"> <img alt="Strategy UML" class="post-image-center" src="/img/blog/design-pattern/Strategy.jpg" height="100%" width="100%" > </div> --><p><strong>策略模式各角色讲解：</strong><br><strong>Strategy：</strong>策略基类（接口或者抽象类再或者抽象策略类），定义子策略需要实现的方法，比如 algorithm()，该方法取决于客户端代码（高层代码）需要该策略实现什么功能，子类则实现该方法，封装自己的算法，供外部调用。<br><strong>Context：</strong>此 Context，非彼（Android中的）Context，它持有 Strategy 真实的实例对象，提供给客户端调用 Strategy 时的上下文调度者。<br><strong>ConcreteStrategyA：</strong>实现父类 Strategy 的方法，封装自身算法逻辑。<br><strong>ConcreteStrategyB：</strong>同上</p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>一个加减乘除的策略，定义一个 Strategy 接口，然后针对接口实现对应的加减乘除的实体策略类。</p><p>android 中的策略模式应用实践：<br>需求：接入微信支付，支付宝支付，银联支付等移动端通用支付方式。</p><p>以下是大致实现：</p><ul><li>PayActivity：客户端角色，支付方式选择界面</li><li>AbsPayStrategy：作为支付策略基类，定义了一个pay方法</li><li>PayContext：上下文角色，用来封装支付AbsPayStrategy对象</li><li>WeChatPayStrategy：封装了微信支付算法逻辑</li><li>ALiPayStrategy：封装了支付宝支付算法逻辑</li><li>BankCardPayStrategy：封装了银行卡支付算法逻辑</li></ul><p>支付功能的示意代码：AbsPayStrategy的实际实现应该为抽象类，它需要持有Activity对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface AbsPayStrategy &#123;</span><br><span class="line">    // private Activity mActivity;</span><br><span class="line">    // 本策略主要就是实现支付功能</span><br><span class="line">    void pay();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Context 上下文角色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class PayContext &#123;</span><br><span class="line">    private AbsPayStrategy mPayStrategy;</span><br><span class="line"></span><br><span class="line">    public PayContext(AbsPayStrategy payStrategy) &#123;</span><br><span class="line">        mPayStrategy = payStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void pay() &#123;</span><br><span class="line">        mPayStrategy.pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微信支付策略实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 微信支付策略</span><br><span class="line"> */</span><br><span class="line">public class WeChatPayStrategy implements AbsPayStrategy &#123;</span><br><span class="line"></span><br><span class="line">    public void pay() &#123;</span><br><span class="line">        // 此处封装微信支付逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付宝支付策略实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 支付宝支付策略</span><br><span class="line"> */</span><br><span class="line">public class ALiPayStrategy  implements AbsPayStrategy &#123;</span><br><span class="line"></span><br><span class="line">    public void pay() &#123;</span><br><span class="line">        // 此处封装支付宝支付逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的客户端代码，此处为PayActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class PayActivity extends Activity implements View.OnclickListener&#123;</span><br><span class="line"></span><br><span class="line">    private PayContext mPayContext;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        switch(v.getId()) &#123;// 客户端来决定使用哪种支付策略</span><br><span class="line">            case R.id.wechat_pay:</span><br><span class="line">                mPayContext = new PayContext(new WechatPayStrategy());</span><br><span class="line">                break;</span><br><span class="line">            case R.id.wechat_pay:</span><br><span class="line">                mPayContext = new PayContext(new ALiPayStrategy());</span><br><span class="line">                break;</span><br><span class="line">            case R.id.wechat_pay:</span><br><span class="line">                mPayContext = new PayContext(BankCardPayStrategy());</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                mPayContext = new PayContext(new WechatPayStrategy());</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        // 利用实际的支付策略对象进行支付</span><br><span class="line">        mPayContext.pay();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了一个 app 内的支付功能，如果微信支付出现问题了，改动微信支付策略代码，支付宝支付出现问题，改动想要实现即可，职责单一。<br>如果PM有一天说：我们需要接入更多支付，怎么办？ 简单啊，实现相应的支付策略即可，完美适应需求变更，实现功能扩展。</p><br><h3 id="观察者模式-Observer-pattern"><a href="#观察者模式-Observer-pattern" class="headerlink" title="观察者模式 (Observer pattern)"></a>观察者模式 (Observer pattern)</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。<br>观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>观察者模式属于（对象）行为型模式。<br>观察者模式又被称作发布/订阅模式。<br>观察者模式主要用来解耦，将被观察者和观察者解耦，让他们之间没有没有依赖或者依赖关系很小。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>解除观察者与主题之间的耦合。让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。<br>易于扩展，对同一主题新增观察者时无需修改原有代码。</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>依赖关系并未完全解除，抽象主题仍然依赖抽象观察者。<br>使用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在Java中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。<br>可能会引起多余的数据通知</p><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="/img/blog/design-pattern/Observer.jpg" alt="Observer UML"></p><p><strong>策略模式各角色说明：</strong><br><strong>Subject（抽象主题）：</strong>又叫抽象被观察者，把所有观察者对象的引用保存到一个集合里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。<br><strong>ConcreteSubject（具体主题）：</strong>又叫具体被观察者，将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。<br><strong>Observer (抽象观察者):</strong>为所有的具体观察者定义一个接口，在得到主题通知时更新自己。<br><strong>ConcrereObserver（具体观察者）：</strong>实现抽象观察者定义的更新接口，当得到主题更改通知时更新自身的状态。</p><h4 id="java-代码实现"><a href="#java-代码实现" class="headerlink" title="java 代码实现"></a>java 代码实现</h4><h5 id="创建抽象观察者"><a href="#创建抽象观察者" class="headerlink" title="创建抽象观察者"></a>创建抽象观察者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * TODO Observer (抽象观察者):为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</span><br><span class="line"> * 定义一个接到通知的更新方法，即收件人收到通知后的反应</span><br><span class="line"> *</span><br><span class="line"> * @author dev.liang &lt;a href=&quot;mailto:dev.liang@outlook.com&quot;&gt;Contact me.&lt;/a&gt;</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 2019/03/24 16:29</span><br><span class="line"> */</span><br><span class="line">public interface Observer &#123;</span><br><span class="line">    void update(String msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建具体观察者"><a href="#创建具体观察者" class="headerlink" title="创建具体观察者"></a>创建具体观察者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * TODO （具体观察者）：实现抽象观察者定义的更新接口，当得到主题更改通知时更新自身的状态。</span><br><span class="line"> *</span><br><span class="line"> * @author dev.liang &lt;a href=&quot;mailto:dev.liang@outlook.com&quot;&gt;Contact me.&lt;/a&gt;</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 2019/03/24 16:55</span><br><span class="line"> */</span><br><span class="line">public class ConcreteObserver implements Observer &#123;</span><br><span class="line"></span><br><span class="line">    String mObserverName;</span><br><span class="line"></span><br><span class="line">    public ConcreteObserver(String mObserverName) &#123;</span><br><span class="line">        this.mObserverName = mObserverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(String msg) &#123;</span><br><span class="line">        System.out.println(&quot;具体观察者&quot; + mObserverName + &quot;,收到了信息:&quot; + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建抽象主题"><a href="#创建抽象主题" class="headerlink" title="创建抽象主题"></a>创建抽象主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * TODO</span><br><span class="line"> * Subject（抽象主题）：</span><br><span class="line"> * 又叫抽象被观察者，把所有观察者对象的引用保存到一个集合里，</span><br><span class="line"> * 每个主题都可以有任何数量的观察者。</span><br><span class="line"> * 抽象主题提供一个接口，可以增加和删除观察者对象。</span><br><span class="line"> *</span><br><span class="line"> * @author dev.liang &lt;a href=&quot;mailto:dev.liang@outlook.com&quot;&gt;Contact me.&lt;/a&gt;</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 2019/03/24 16:11</span><br><span class="line"> */</span><br><span class="line">public interface Subject &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加观察者</span><br><span class="line">     *</span><br><span class="line">     * @param observer</span><br><span class="line">     */</span><br><span class="line">    void attach(Observer observer);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除观察者</span><br><span class="line">     *</span><br><span class="line">     * @param observer</span><br><span class="line">     */</span><br><span class="line">    void detach(Observer observer);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通知观察者</span><br><span class="line">     *</span><br><span class="line">     * @param msg</span><br><span class="line">     */</span><br><span class="line">    void notify(String msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建具体主题"><a href="#创建具体主题" class="headerlink" title="创建具体主题"></a>创建具体主题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * subscribe</span><br><span class="line"> * TODO ConcreteSubject（具体主题）：</span><br><span class="line"> *      又叫具体被观察者，将有关状态存入具体观察者对象；</span><br><span class="line"> *      在具体主题内部状态改变时，给所有登记过的观察者发出通知.</span><br><span class="line"> *</span><br><span class="line"> * @author dev.liang &lt;a href=&quot;mailto:dev.liang@outlook.com&quot;&gt;Contact me.&lt;/a&gt;</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @since 2019/03/24 16:34</span><br><span class="line"> */</span><br><span class="line">public class ConcreteSubject implements Subject&#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Observer&gt; observerList = new ArrayList();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attach(Observer observer) &#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void detach(Observer observer) &#123;</span><br><span class="line">        observerList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void notify(String msg) &#123;</span><br><span class="line">        /*循环通知收件人（观察者）*/</span><br><span class="line">        if(!CollectionUtils.isEmpty(observerList)) &#123;</span><br><span class="line">            for (Observer observer : observerList) &#123;</span><br><span class="line">                observer.update(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ObserverTest &#123;</span><br><span class="line">    public static void main(String[] str) &#123;</span><br><span class="line">        ConcreteSubject concreteSubject = new ConcreteSubject();</span><br><span class="line">        Observer observerLiang = new ConcreteObserver(&quot;老梁&quot;);</span><br><span class="line">        Observer observerWang = new ConcreteObserver(&quot;老王&quot;);</span><br><span class="line">        concreteSubject.attach(observerLiang);</span><br><span class="line">        concreteSubject.attach(observerWang);</span><br><span class="line">        concreteSubject.notify(&quot;今天发工资~&quot;);</span><br><span class="line">        /*老梁没发工资*/</span><br><span class="line">        concreteSubject.detach(observerLiang);</span><br><span class="line">        concreteSubject.notify(&quot;发了工资~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">具体观察者老梁,收到了信息:发工资啦~</span><br><span class="line">具体观察者老王,收到了信息:发工资啦~</span><br><span class="line">具体观察者老王,收到了信息:发了工资~</span><br></pre></td></tr></table></figure><h4 id="Android-中的观察者模式"><a href="#Android-中的观察者模式" class="headerlink" title="Android 中的观察者模式"></a>Android 中的观察者模式</h4><h5 id="控件中Listener监听方式"><a href="#控件中Listener监听方式" class="headerlink" title="控件中Listener监听方式"></a>控件中Listener监听方式</h5><h5 id="Adapter的notifyDataSetChanged-方法"><a href="#Adapter的notifyDataSetChanged-方法" class="headerlink" title="Adapter的notifyDataSetChanged()方法"></a>Adapter的notifyDataSetChanged()方法</h5><h5 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h5><p>BroadcastReceiver 作为 Android 的四大组件之一,实际上也是一个典型的观察者模式.通过 sendBroadcast 发送广播时,只有注册了相应的 IntentFilter 的 BroadcastReceiver 对象才会收到这个广播信息,其onReceive方法才会被调起。</p><br><h3 id="代理模式（Proxy-Pattern）"><a href="#代理模式（Proxy-Pattern）" class="headerlink" title="代理模式（Proxy Pattern）"></a><a href="https://juejin.im/post/5a4e4725f265da3e2c37e36e" target="_blank" rel="noopener"><strong>代理模式（Proxy Pattern）</strong></a></h3><p>为目标对象提供一种代理，客户端通过代理去访问目标对象。</p><h4 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h4><p>如果从写代码的角度出发，当我们遇到以下场景：</p><ul><li>无法直接访问某个对象</li><li>不想直接访问某个对象</li><li>访问某个对象存在困难</li></ul><p>的时候，我们就可以通过一个代理，通过它来间接访问真正的对象。</p><h4 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h4><p><img src="./img/blog/design-pattern/proxy.jpeg" alt="proxy"></p><p>从代理模式的 UML 类图中，我们可以得到如下结论：</p><ul><li>代理对象和委托对象需要实现相同的接口（抽象类）;</li><li>代理对象持有委托对象的引用;</li></ul><p>可以看到，代理模式非常简洁，总共就三个角色，包括抽象主题，委托者和代理者。用代码实现以下代理模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public interface Subject &#123;</span><br><span class="line">    void doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 委托类</span><br><span class="line"> */</span><br><span class="line">public class RealSubject implements Subject &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        System.out.println(&quot;This is real doSomeThing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 代理类</span><br><span class="line"> */</span><br><span class="line">public class ProxySubject implements Subject &#123;</span><br><span class="line"></span><br><span class="line">    private Subject mSubject;</span><br><span class="line">    // 代理类持有委托类的引用</span><br><span class="line">    public ProxySubject(Subject realSubject) &#123;</span><br><span class="line">        mSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doSomething() &#123;</span><br><span class="line">        mSubject.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建委托类</span><br><span class="line">        Subject mRealSubject=new RealSubject();</span><br><span class="line">        //创建代理类</span><br><span class="line">        ProxySubject mProxy = new ProxySubject(mRealSubject);</span><br><span class="line">        //由代理类去做具体的操作</span><br><span class="line">        mProxy.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 RealSubject 和 ProxySubject 都实现了接口 Subject。在客户端使用ProxySubject 的实例调用 doSomething() 方法，而不是使用 RealSubject 的实例来实现。</p><p>你可能会好奇，这么做的意义是什么呢？直接用 RealSubject 的实例来调用 doSomething 方法不也可以吗？何必多此一举。试想，如果现在有很多个委托类，他们各自的实现都不同，客户端只关心doSomething 的调用，而不关心具体的实现，这样代理类就可以在其内部屏蔽委托类之间的差异了，这也是客户端不想关注的事情。</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>以上的分析中，代理类是由我们直接创建好的；现实中可能还有这样一种场景，代理类并不是在程序编译的时候创建，而是在运行的过程中通过Java的反射机制动态的进行创建，这样的代理模式成为动态代理，对应的之前我们所说的就是静态代理了。</p><p>其实，动态代理的实现没有什么可说的，说白了都是模板代码，Java为开发者提供了InvocationHandler,实现该接口重写其invoke 方法即可。</p><p>代码示例可在 <a href="https://github.com/leaderliang/MyPracticeDemo/tree/master/JavaDesignModel/src/com/java/designmodel/proxy_dynamic" target="_blank" rel="noopener"><strong>Github</strong></a> 上查看。</p><p>在 Android 中，关于动态代理的使用，最经典的就是 Retrofit 了。这里可以简单看一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 声明自己的网络请求接口</span><br><span class="line"> */</span><br><span class="line">public interface GithubService &#123;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;/users/leaderliang/repos&quot;)</span><br><span class="line">    Call&lt;List&lt;Repo&gt;&gt; getUserRepos();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 Retrofit，发起网络请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">         .baseUrl(&quot;https://api.github.com&quot;)</span><br><span class="line">         .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">         .build();</span><br><span class="line">                </span><br><span class="line">GithubService mGithubService = retrofit.create(GithubService.class);</span><br><span class="line">Call&lt;List&lt;Repo&gt;&gt; repos = mGithubService.getUserRepos();</span><br><span class="line">repos.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) &#123;</span><br><span class="line">        System.out.println(response.code() + &quot; &quot; + new Gson().toJson(response.body()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.this, &quot;onFailure&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码使用过 Retrofit 的应该熟悉吧。当我们用 Retrofit 实例，调用其 create 方法时，发现就已经帮我们做好了 GithubService 的实现，发生了什么呢？下面是 creat 示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T create(final Class&lt;T&gt; service) &#123;</span><br><span class="line">    Utils.validateServiceInterface(service);</span><br><span class="line">    if (validateEagerly) &#123;</span><br><span class="line">      eagerlyValidateMethods(service);</span><br><span class="line">    &#125;</span><br><span class="line">    // new Class&lt;?&gt;[] &#123; service &#125; 声明了 service，但是我们需要知道这个过程是怎么去实现的。</span><br><span class="line">    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] &#123; service &#125;,</span><br><span class="line">        new InvocationHandler() &#123;</span><br><span class="line">          private final Platform platform = Platform.get();</span><br><span class="line">          private final Object[] emptyArgs = new Object[0];</span><br><span class="line"></span><br><span class="line">          @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)</span><br><span class="line">              throws Throwable &#123;</span><br><span class="line">            // If the method is a method from Object then defer to normal invocation.</span><br><span class="line">            if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">              return method.invoke(this, args);</span><br><span class="line">            &#125;</span><br><span class="line">            if (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">              return platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">            &#125;</span><br><span class="line">            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>create（） 方法里的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] &#123; service &#125;, new InvocationHandler() &#123;&#125;);</span><br></pre></td></tr></table></figure><p>实际体现的就是动态代理的整个过程，这个 return 就相当于动态创建了 ProxyService 这个代理类，写一段伪代码，应该可以帮助进一步理解了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyService implements GithubService &#123;</span><br><span class="line"></span><br><span class="line">    InvocationHandler invocationHandler = new InvocationHandler() &#123;</span><br><span class="line">        private final Platform platform = Platform.get();</span><br><span class="line">        private final Object[] emptyArgs = new Object[0];</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Object invoke(Object proxy, Method method, @Nullable Object[] args)</span><br><span class="line">                throws Throwable &#123;</span><br><span class="line">            // If the method is a method from Object then defer to normal invocation.</span><br><span class="line">            if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">                return method.invoke(this, args);</span><br><span class="line">            &#125;</span><br><span class="line">            if (platform.isDefaultMethod(method)) &#123;</span><br><span class="line">                return platform.invokeDefaultMethod(method, service, proxy, args);</span><br><span class="line">            &#125;</span><br><span class="line">            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Call&lt;List&lt;Repo&gt;&gt; getUserRepos() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Method method = GithubService.class.getMethod(&quot;getUserRepos&quot;);</span><br><span class="line">            return (Call&lt;List&lt;Repo&gt;&gt;) invocationHandler.invoke(this, method, null);</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 其他接口</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Call&lt;User&gt; getOtherMethod()&#123;</span><br><span class="line">            //...</span><br><span class="line">        return ...;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里就是一个典型的动态代理实现，通过serviceMethod.callAdapter.adapt返回了一个service对象的代理对象，在上面的例子里，就是返回了一个GitHubService的代理对象，这样我们就可以通过这样一个对象去调用GitHubService中定义好的各种网络请求，而不用在使用的时候再去决定是POST请求还是GET请求,参数是放在Body里还是params里，因为Retrofit 通过把反射注解和动态代理的巧妙结合，屏蔽了复杂的参数拼接操作，把所有我们需要对OKHttp的进行传递的参数，动态的帮我们传递了，一旦在接口中定义好了使用方式，就可以非常方便的获取到okhttp中最关键的Call了，有了Call我们就可以通过execute或者是enqueue发起网络请求了。</p><p>以上就是对代理模式的分析，总的来说代理模式的结构非常简单；包括抽象主题，委托类，代理类三个核心角色，从大的方向上可以分为静态代理和动态代理两大类；通过静态代理的方式，在开发迭代的过程中，为实现兼容性提供了一种非常友好的实现思路；在日常开发中，如果我们使用的对象之间有着强烈的耦合，可是思考一下是否可以通过代理模式解耦；同时，当我们需要扩展某个类的部分功能时，但又不想去破坏原有的功能或者是根本无法修改时，我们可以考虑代理模式，但也要明白，通过代理模式我们能做的也只能是功能扩展，想要更新委托类中已经实现的内容他是无能为力的。</p><p>动态代理，可以根据运行时的委托类动态的生成代理类，这样就减轻了代理类的负担，避免在编码阶段就具体的委托类再做各种判断了。</p><p>代理模式很简单，也很实用，但不要忘记代理类和委托类需要实现功能的接口或抽象类，不要忽略了这一点。</p><p>参考链接：<a href="https://juejin.im/post/5a4e4725f265da3e2c37e36e" target="_blank" rel="noopener">https://juejin.im/post/5a4e4725f265da3e2c37e36e</a> </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2P 投资交流之荷包金融</title>
      <link href="/128b.html"/>
      <url>/128b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>荷包金融投资的小伙伴可以看过来了，为了方便大家交流，在这里创建了 QQ 和微信群组，喷子、广告勿加….<a id="more"></a>我作为荷包的投资者，建群目的也是为了让大家更多的去了解荷包的相关资讯，目前平台在政府的帮助下，在逐步的开始兑付工作，请大家不信谣不传谣，积极面对！</p></blockquote><h2 id="荷包-QQ-交流群（-643645871-）"><a href="#荷包-QQ-交流群（-643645871-）" class="headerlink" title="荷包 QQ 交流群（ 643645871 ）"></a>荷包 QQ 交流群（ 643645871 ）</h2><div align="left">    <img alt="QQ 交流群" class="post-image-center" src="/img/blog/p2p/qq_hebao.png" ></div><h2 id="荷包微信交流群"><a href="#荷包微信交流群" class="headerlink" title="荷包微信交流群"></a>荷包微信交流群</h2><p>微信群可能会有有效期，当不能添加时，大家可以添加我的个人 微信或 QQ（565100605），备注荷包，拉你上车。。目前微信群人较多一些，建议加微信群。。</p><div align="left">    <img alt="微信交流群" class="post-image-center" src="/img/blog/p2p/wx_hebao.png" height="50%" width="50%" ></div><h2 id="个人微信"><a href="#个人微信" class="headerlink" title="个人微信"></a>个人微信</h2><p>添加微信请备注来源 <code>“荷包-个人博客”</code>, 添加微信后，请主动录制个人荷包实时 <code>资产</code>、<code>首页</code>等界面视频以作<code>查验</code>，主要是为了保证每个投资者的<code>真实性</code>。</p><div align="left">    <img alt="个人微信" class="post-image-center" src="/img/blog/p2p/wx.png" height="50%" width="50%" ></div>]]></content>
      
      
      <categories>
          
          <category> 理财 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 荷包 </tag>
            
            <tag> P2P </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用 adb 命令导出想要的手机安装包</title>
      <link href="/f7d8.html"/>
      <url>/f7d8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候会遇到想快速找到手机的安装包，或者手机里没有这个版本的安装包文件，怎么办呢…<a id="more"></a></p></blockquote><h3 id="adb-取出在手机中安装的apk"><a href="#adb-取出在手机中安装的apk" class="headerlink" title="adb 取出在手机中安装的apk"></a>adb 取出在手机中安装的apk</h3><h4 id="列出所有安装的apk"><a href="#列出所有安装的apk" class="headerlink" title="列出所有安装的apk"></a>列出所有安装的apk</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure><p><img src="/img/blog/adb/adbshellist.png" alt="image"></p><h5 id="找出自己想要取出-的-apk-包名（com-taobao-taobao）"><a href="#找出自己想要取出-的-apk-包名（com-taobao-taobao）" class="headerlink" title="找出自己想要取出 的 apk 包名（com.taobao.taobao）"></a>找出自己想要取出 的 apk 包名（com.taobao.taobao）</h5><h4 id="打印-apk-的路径（后面拼上包名）"><a href="#打印-apk-的路径（后面拼上包名）" class="headerlink" title="打印 apk 的路径（后面拼上包名）"></a>打印 apk 的路径（后面拼上包名）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm path com.taobao.taobao</span><br></pre></td></tr></table></figure><p><img src="/img/blog/adb/adbshellpath.png" alt="image"></p><p>package 后面即为路径</p><h4 id="导出-apk，pull-后的是要导出的-apk-路径，后面跟上你要导出的路径"><a href="#导出-apk，pull-后的是要导出的-apk-路径，后面跟上你要导出的路径" class="headerlink" title="导出 apk，pull 后的是要导出的 apk 路径，后面跟上你要导出的路径"></a>导出 apk，pull 后的是要导出的 apk 路径，后面跟上你要导出的路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /data/app/com.taobao.taobao-v9lhnghOe8tvxgfkp4AfDQ==/base.apk /Users/liangyanqiao/Downloads/adbpull/taobao.apk</span><br></pre></td></tr></table></figure><p>进度</p><p><img src="/img/blog/adb/adbpull.png" alt="image"></p><p>完成</p><p><img src="/img/blog/adb/adbpull_.png" alt="image"></p><p>文件夹没有创建，会提示异常，需要自己个创建</p><p><img src="/img/blog/adb/adbpullfail.png" alt="image"></p><p>导出 Finder</p><p><img src="/img/blog/adb/adbpullfinder.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View 的事件分发机制和触摸反馈机制原理解析</title>
      <link href="/f129.html"/>
      <url>/f129.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在学习和实践中对 View 事件分发的一些简单认识和总结，今天整理一下…<a id="more"></a><br>事件分发机制的过程就是一个 MotionEvent 产生以后，系统需要把这个事件传递给具体的view，这个过程就是事件分发过程。</p></blockquote><h2 id="View-的事件分发机制"><a href="#View-的事件分发机制" class="headerlink" title="View 的事件分发机制"></a>View 的事件分发机制</h2><h3 id="MotionEvent-事件类型"><a href="#MotionEvent-事件类型" class="headerlink" title="MotionEvent 事件类型 "></a><a href="https://www.jianshu.com/p/0c863bbde8eb" target="_blank" rel="noopener">MotionEvent 事件类型 </a></h3><p>事件类型 MotionEvent 的一个重要概念，就是指 MotionEvent 对象所代表的动作。比如说，当你的一个手指在屏幕上滑动一下时，系统会产生一系列的触摸事件对象,他们所代表的动作有所不同。有的事件代表你手指按下这个动作,有的事件代表你手指在屏幕上滑动,还有的事件代表你手指离开屏幕。这些事件的事件类型就分别为ACTION_DOWN,ACTION_MOVE,和ACTION_UP。上述这些动作所产生的一系列事件，被称为一个事件流，它包括一个ACTION_DOWN 事件，很多个 ACTION_MOVE 事件，和一个 ACTION_UP 事件。</p><p>除了前面说的三个事件类型外，还有很多不同的事件类型,比如 ACTION_CANCEL。它代表当前的手势被取消。要理解这个类型，就必须要了解ViewGroup分发事件的机制。一般来说，如果一个子视图接收了父视图分发给它的ACTION_DOWN事件，那么与ACTION_DOWN事件相关的事件流就都要分发给这个子视图，但是如果父视图希望拦截其中的一些事件，不再继续转发事件给这个子视图的话，那么就需要给子视图一个ACTION_CANCEL事件。</p><h3 id="常用的事件类型和含义"><a href="#常用的事件类型和含义" class="headerlink" title="常用的事件类型和含义"></a>常用的事件类型和含义</h3><p>MotionEvent 记录手指接触屏幕以后所产生一系列的事件，也就是事件分发的对象，事件的类型与含义如下：</p><table><thead><tr><th>事件类型</th><th>具体动作</th></tr></thead><tbody><tr><td>MotionEvent.ACTION_DOWN</td><td>按下 View （所有事件的开始）</td></tr><tr><td>MotionEvent.ACTION_MOVE</td><td>滑动 View</td></tr><tr><td>MotionEvent.ACTION_UP</td><td>抬起 View （与 DOWN 对应）</td></tr><tr><td>MotionEvent.ACTION_CANCEL</td><td>取消或结束事件</td></tr><tr><td>MotionEvent.ACTION_POINTER_DOWN</td><td>代表用户又使用一个手指触摸到屏幕上，也就是说，在已经有一个触摸点的情况下，又新出现了一个触摸点</td></tr><tr><td>MotionEvent.ACTION_POINTER_UP</td><td>代表用户的一个手指离开了触摸屏，但是还有其他手指还在触摸屏上。也就是说，在多个触摸点存在的情况下，其中一个触摸点消失了。它与ACTION_UP的区别就是，它是在多个触摸点中的一个触摸点消失时（此时，还有触摸点存在，也就是说用户还有手指触摸屏幕）产生，而ACTION_UP可以说是最后一个触摸点消失时产生.</td></tr></tbody></table><h3 id="事件分发的顺序-Activity-gt-Window-gt-View"><a href="#事件分发的顺序-Activity-gt-Window-gt-View" class="headerlink" title="事件分发的顺序 (Activity -&gt; Window -&gt; View)"></a>事件分发的顺序 (Activity -&gt; Window -&gt; View)</h3><p>事件总是先传递给 Activity，Activity 再传递给 Window，最后 Window 再传递给顶级 View ( DecorView 本质是 ViewGroup，DecorView一般就是当前界面的底层容器(即setContentView所设置的View的父容器)，顶级 View 接收到事件后，就会按照事件分发机制去分发事件。</p><p>如果一个View的 onTouchEvent 返回 false，那么它的父容器的 onTouchEvent 将会被调用，依次类推，如果所有的元素都不处理这个事件，那么这个事件最终将会传递给 Activity 处理。</p><h3 id="事件分发核心方法"><a href="#事件分发核心方法" class="headerlink" title="事件分发核心方法"></a>事件分发核心方法</h3><table><thead><tr><th>方法名</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>dispatchTouchEvent(MotionEvent event)</td><td>进行事件分发</td><td>是第一个被调用的方法，若事件能够传递给当前的 View/ViewGroup，那么这个方法就一定会被调用</td></tr><tr><td>onInterceptTouchEvent(MotionEvent event)</td><td>进行事件拦截操作（ViewGroup 有此方法，View 没有）</td><td>在 dispatchTouchEvent() 方法中调用，如果当前 view 拦截了某一个事件，那么同一个事件序列将不会再调用这个方法</td></tr><tr><td>onTouchEvent(MotionEvent event)</td><td>进行处理上面提到的事件流</td><td>onTouchEvent 是在 dispatchTouchEvent() 方法中被调用的，</td></tr></tbody></table><h3 id="事件分发图示（父-View-ViewGroup-到子-View-的事件分发过程）"><a href="#事件分发图示（父-View-ViewGroup-到子-View-的事件分发过程）" class="headerlink" title="事件分发图示（父 View/ ViewGroup 到子 View 的事件分发过程）"></a>事件分发图示（父 View/ ViewGroup 到子 View 的事件分发过程）</h3><p>如下图：<br><img src="/img/blog/hencoder/touch_event/touch_event.png" alt="image"></p><p>简单来说，view 的 dispatchTouchEvent 自身做的事情并不多，主要是 onTouchEvent()；总结一下就是 父 view 递归的调用 子 view 的 dispatchTouchEvent 的过程。</p><p>伪代码演示下他们的调用关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">View.dispatchTouchEvent();</span><br><span class="line"></span><br><span class="line">public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class="line">return onTouchEvent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ViewGroup.dispatchTouchEvent();</span><br><span class="line"></span><br><span class="line">public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class="line">boolean result;</span><br><span class="line">if (interceptTouchEvent())&#123;</span><br><span class="line">result = onTouchEvent();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">result = 调用子 view 的 .dispatchTouchEvent();</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把 result 结果记录，然后返回（下次在执行时候直接会根据上次记录的 result 进行操作,同一个事件序列将不会再调用）</p><p>通过上面的伪代码，可以大致了解点击事件的传递规则：<br>对于一个根 ViewGroup 来说，点击事件产生后，首先会传递给它，这是它的 dispatchTouchEvent 就会被调用，如果这个 ViewGroup 的 onInterceptTouchEvent 方法返回 true 就表示它要拦截当前事件，接着事件就会交给这个 ViewGroup 处理，这时如果它的 mOnTouchListener 被设置，则 onTouch 会被调用，否则 onTouchEvent 会被调用。<br>在 onTouchEvent 中，如果 设置了 mOnCLickListener，则 onClick 会被调用。<br>只要 View 的 CLICKABLE 和 LONG_CLICKABLE 有一个为 true，onTouchEvent() 就会返回 true 消耗这个事件。<br>如果这个 ViewGroup 的 onInterceptTouchEvent 方法返回 false 就表示它不拦截 当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的 dispatchTouchEvent 方法就会被调用，如此反复直到事件被最终处理完。</p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 自定义 View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux / Mac 工作常用命令行总结</title>
      <link href="/ffda.html"/>
      <url>/ffda.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>mac 常用命令行简单总结，提升开发效率<a id="more"></a></p></blockquote><h3 id="日常文件夹以及文件操作"><a href="#日常文件夹以及文件操作" class="headerlink" title="日常文件夹以及文件操作"></a>日常文件夹以及文件操作</h3><h4 id="cd-是英文-change-directory-的缩写，更改目录的意思-巧用-Tab-键会自动补齐"><a href="#cd-是英文-change-directory-的缩写，更改目录的意思-巧用-Tab-键会自动补齐" class="headerlink" title="cd 是英文 change directory 的缩写，更改目录的意思(巧用 Tab 键会自动补齐)"></a>cd 是英文 change directory 的缩写，更改目录的意思(巧用 Tab 键会自动补齐)</h4><p>要进入我们的家目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>我们要进入下载目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Downloads/</span><br></pre></td></tr></table></figure><p>需要返回上级目录（在 linux 系统中 . 代表当前目录，..代表上级目录。如果是上级的上级目录，就是 ../..）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure><h4 id="ls-查看目录下的文件"><a href="#ls-查看目录下的文件" class="headerlink" title="ls 查看目录下的文件"></a>ls 查看目录下的文件</h4><p>当我们进入到某个文件夹之后，我们不知道里面有什么文件，就可以使用这个命令（ls 是英文 list 的缩写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>如果我们想要查看更多的内容，就可以在 ls 后加上 -l 参数（执行完就可以看到一个以列表的形式把所有的内容全部输出）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>查看隐藏的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>ls -l 也可以和 ls -a 组合在一起使用，可以自己查看下效果哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la</span><br></pre></td></tr></table></figure><p>linux/mac 系统和 windows 系统有一个很大的区别，就是，隐藏文件。在 linux 里，只要一个文件或者文件夹的名字第一个字符是以 . 开头，就表示这是一个隐藏文件。<br>而 windows 系统是右键文件属性来设置的。所以，使用 linux 系统，你如果想要给某个文件夹或者文件隐藏，右击属性是没有这些操作的。只需重命名文件，加个 . 即可对文件设置隐藏。</p><p>ls 更多拓展可以查看 <a href="http://man.linuxde.net/ls" target="_blank" rel="noopener">Linux命令大全</a></p><h4 id="clear-清空屏幕的内容"><a href="#clear-清空屏幕的内容" class="headerlink" title="clear 清空屏幕的内容"></a>clear 清空屏幕的内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><h4 id="mv-移动"><a href="#mv-移动" class="headerlink" title="mv 移动"></a>mv 移动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv index/text.html  html/</span><br></pre></td></tr></table></figure><p>将 index 目录下的 text.html 文件转移到 html 下</p><h4 id="cp-复制文件和文件夹"><a href="#cp-复制文件和文件夹" class="headerlink" title="cp 复制文件和文件夹"></a>cp 复制文件和文件夹</h4><p>mv 命令一样，也是可以跨目录复制的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp index/text.html  html/</span><br></pre></td></tr></table></figure><p>如果你需要保留文件所有的权限属性之类的，可以加上参数 -a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a a b</span><br></pre></td></tr></table></figure><p>如果你复制的不是文件，而是文件夹，则要加上一个递归的参数 -r</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r a b</span><br></pre></td></tr></table></figure><p>复制文件夹，并且要保留所有的权限属性，可以加上参数 -ra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -ra a b</span><br></pre></td></tr></table></figure><p>如果你复制的文件夹里面有很多内容，你想看到实时进度的话，可以用 -v 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -v a b</span><br></pre></td></tr></table></figure><h4 id="rm-删除文件或文件夹"><a href="#rm-删除文件或文件夹" class="headerlink" title="rm 删除文件或文件夹"></a>rm 删除文件或文件夹</h4><blockquote><p>注意， rm 命令进行的删除操作，是不会放到系统的回收站里面去的。而是直接删除，如果你希望通过软件把文件找回来的话，也是很困难的。所以，在输入 rm 命令的时候一定谨慎些！</p></blockquote><p>删除某个具体的文件，而不是命令行里带路径的文件，或者文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file</span><br></pre></td></tr></table></figure><p>如果删除的是某个目录，或者带目录的文件，直接用上面的命令是不行的。删除目录必须进行递归操作，所以需要加上参数 -r 。</p><blockquote><p>直接rm就可以了，不过要加两个参数-rf 即：rm -rf 目录名字。若删除时出现 Permission denied 的提示，可以在命令前加sudo 即:sudo rm -rf 文件夹的名字，即可删除。<br>提醒：使用这个rm -rf的时候一定要格外小心，rm 命令执行后是不会到系统回收站的也无法恢复<br>解释：<br>-r 向下递归，不管有多少级目录，一并删除<br>-f 直接强行删除，不作任何提示的意思</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -r filePath</span><br><span class="line">rm -r filePath/file</span><br><span class="line">rm -rf /Users/liangyanqiao/MacDev/Hexo/themes/hexo-theme-skapp</span><br></pre></td></tr></table></figure><h4 id="touch-新建文件"><a href="#touch-新建文件" class="headerlink" title="touch 新建文件"></a>touch 新建文件</h4><p>创建一个或者多个文件(创建任意文件,只需要加上不同的后缀就可以啦)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch a.txt</span><br><span class="line">touch a.txt b.png c.doc</span><br></pre></td></tr></table></figure><h4 id="mkdir-新建文件夹"><a href="#mkdir-新建文件夹" class="headerlink" title="mkdir 新建文件夹"></a>mkdir 新建文件夹</h4><p>mkdir 从字面上可以看出是英文 make directory 的缩写</p><p>新建一个文件夹或者多个文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir a b c d</span><br></pre></td></tr></table></figure><p>新建多层级的目录，这就需要加上参数 -p，c 后加 / 也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p a/b/c</span><br><span class="line">mkdir -p a/b/c/</span><br></pre></td></tr></table></figure><h4 id="less-查看文本文件"><a href="#less-查看文本文件" class="headerlink" title="less 查看文本文件"></a>less 查看文本文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less a.txt</span><br></pre></td></tr></table></figure><h4 id="pwd-显示当前用户所在的完整路径"><a href="#pwd-显示当前用户所在的完整路径" class="headerlink" title="pwd 显示当前用户所在的完整路径"></a>pwd 显示当前用户所在的完整路径</h4><p>return working directory name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  Downloads pwd</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/liang/Downloads</span><br></pre></td></tr></table></figure><h4 id="man-查看某个命令的详情"><a href="#man-查看某个命令的详情" class="headerlink" title="man 查看某个命令的详情"></a>man 查看某个命令的详情</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man pwd</span><br></pre></td></tr></table></figure><h4 id="Mac终端-vi-vim-的简单使用"><a href="#Mac终端-vi-vim-的简单使用" class="headerlink" title="Mac终端 vi/vim 的简单使用"></a><a href="https://www.cnblogs.com/fanxiaocong/p/7070130.html" target="_blank" rel="noopener">Mac终端 vi/vim 的简单使用</a></h4><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），插入模式（Insert mode）和底线命令模式（Last line mode）</p><h5 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h5><pre><code>用户刚刚启动 vi/vim，便进入了命令模式。</code></pre><p>   i 　切换到插入模式，以输入字符。</p><pre><code>x   删除当前光标所在处的字符。:   切换到底线命令模式，以在最底一行输入命令。若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式</code></pre><h5 id="输入模式："><a href="#输入模式：" class="headerlink" title="输入模式："></a>输入模式：</h5><pre><code>在命令模式下按下 i 就进入了输入模式。在输入模式中，可以使用以下按键：    ENTER(回车键)      　　　　换行    BACK SPACE(退格键) 　　 删除光标前一个字符    方向键        　　　　　　　在文本中移动光标    HOME/END               　　移动光标到行首/行尾    Page Up/Page Down        上/下翻页    ESC                    　退出输入模式，切换到命令模式</code></pre><h5 id="底线命令模式："><a href="#底线命令模式：" class="headerlink" title="底线命令模式："></a>底线命令模式：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在命令模式下按下 :（英文冒号）就进入了底线命令模式。</span><br><span class="line"></span><br><span class="line">底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</span><br><span class="line"></span><br><span class="line">在底线命令模式中，基本的命令有（已经省略了冒号）：</span><br><span class="line"></span><br><span class="line">q 　　退出程序</span><br><span class="line"></span><br><span class="line">w 　　保存文件</span><br><span class="line"></span><br><span class="line">按 ESC 键可随时退出底线命令模式。</span><br></pre></td></tr></table></figure><h5 id="vi-vim-使用实例"><a href="#vi-vim-使用实例" class="headerlink" title="vi/vim 使用实例"></a>vi/vim 使用实例</h5><p>使用 vi 来建立名为 test.txt 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test.txt</span><br></pre></td></tr></table></figure><p>按下 ESC 按钮回到一般模式</p><p>在一般模式中按下 :wq 储存后离开 vi</p><h5 id="vi-vim-按键说明-一般模式下"><a href="#vi-vim-按键说明-一般模式下" class="headerlink" title="vi/vim 按键说明(一般模式下)"></a>vi/vim 按键说明(一般模式下)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">h 或 向左箭头键(←)      光标向左移动一个字符</span><br><span class="line"></span><br><span class="line">j 或 向下箭头键(↓)       光标向下移动一个字符</span><br><span class="line"></span><br><span class="line">k 或 向上箭头键(↑)      光标向上移动一个字符</span><br><span class="line"></span><br><span class="line">l 或 向右箭头键(→)       光标向右移动一个字符</span><br><span class="line"></span><br><span class="line">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 &quot;30j&quot; 或 &quot;30↓&quot; 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Ctrl + f 屏幕『向下』移动一页，相当于 [Page Down]按键</span><br><span class="line"></span><br><span class="line">Ctrl + b 屏幕『向上』移动一页，相当于 [Page Up] 按键</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处</span><br><span class="line"></span><br><span class="line">$ 或功能键[End] 移动到这一行的最后面字符处</span><br><span class="line"></span><br><span class="line">G 移动到这个档案的最后一行</span><br><span class="line"></span><br><span class="line">gg 移动到这个档案的第一行</span><br><span class="line"></span><br><span class="line">n&lt;Enter&gt; n 为数字。光标向下移动 n 行</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">/word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可</span><br><span class="line"></span><br><span class="line">n       重复前一个搜寻的动作</span><br><span class="line"></span><br><span class="line">N      『反向』进行前一个搜寻动作</span><br><span class="line"></span><br><span class="line">:n1,n2s/word1/word2/g       n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2</span><br><span class="line"></span><br><span class="line">:n1,$s/word1/word2/g        从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2</span><br><span class="line"></span><br><span class="line">:n1,$s/word1/word2/gc       从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">x   向后删除一个字符</span><br><span class="line"></span><br><span class="line">X   向前删除一个字符</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">dd      删除游标所在的那一整行</span><br><span class="line"></span><br><span class="line">ndd     n 为数字。删除光标所在的向下 n 行(包括游标所在的那一行)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">yy      复制游标所在的那一行</span><br><span class="line"></span><br><span class="line">nyy     n 为数字。复制光标所在的向下 n 行</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">p       为将已复制的数据在光标下一行贴上</span><br><span class="line"></span><br><span class="line">P       为将已复制的数据在光标上一行贴上</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">u             复原前一个动作(撤销)</span><br><span class="line"></span><br><span class="line">Ctrl + r    重做上一个动作</span><br><span class="line"></span><br><span class="line">.          　 重复前一个动作</span><br></pre></td></tr></table></figure><h5 id="一般模式切换到编辑模式"><a href="#一般模式切换到编辑模式" class="headerlink" title="一般模式切换到编辑模式"></a>一般模式切换到编辑模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">i   从目前光标所在处插入</span><br><span class="line"></span><br><span class="line">I   在目前所在行的第一个非空格符处开始插入</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">a   从目前光标所在的下一个字符处开始插入</span><br><span class="line"></span><br><span class="line">A   从光标所在行的最后一个字符处开始插入</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">o   在目前光标所在的下一行处插入新的一行</span><br><span class="line"></span><br><span class="line">O   在目前光标所在处的上一行插入新的一行</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">r   只会取代光标所在的那一个字符一次</span><br><span class="line"></span><br><span class="line">R   会一直取代光标所在的文字，直到按下 ESC 为止</span><br></pre></td></tr></table></figure><h5 id="一般模式切换到指令行模式"><a href="#一般模式切换到指令行模式" class="headerlink" title="一般模式切换到指令行模式"></a>一般模式切换到指令行模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:w      将编辑的数据写入硬盘档案中</span><br><span class="line"></span><br><span class="line">:w!     强制将编辑的数据写入硬盘档案中</span><br><span class="line"></span><br><span class="line">:q      离开</span><br><span class="line"></span><br><span class="line">:q!     为强制离开不储存档案</span><br><span class="line"></span><br><span class="line">:wq     储存后离开</span><br><span class="line"></span><br><span class="line">:wq!    强制储存后离开</span><br><span class="line"></span><br><span class="line">:set nu     　　显示行号，设定之后，会在每一行的前缀显示该行的行号</span><br><span class="line"></span><br><span class="line">:set nonu  　  取消行号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitmap 和 Drawable 相关整理</title>
      <link href="/d7ac.html"/>
      <url>/d7ac.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bitmap 和 Drawable 本质区别是什么，来一起简单了解下它的本质吧… <a id="more"></a></p></blockquote><h3 id="Bitmap-和-Drawable-本质区别"><a href="#Bitmap-和-Drawable-本质区别" class="headerlink" title="Bitmap 和 Drawable 本质区别"></a>Bitmap 和 Drawable 本质区别</h3><h4 id="Bitmap-是什么？"><a href="#Bitmap-是什么？" class="headerlink" title="Bitmap 是什么？"></a>Bitmap 是什么？</h4><p>字面理解是位图，位图就是一个图像的完整数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">image:width:640;height:640;0000ff0000ff0000ff0000ff</span><br><span class="line">0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff000</span><br><span class="line">0ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff</span><br><span class="line">0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff000</span><br><span class="line">0ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff</span><br><span class="line">0000ff0000ff0000ff</span><br></pre></td></tr></table></figure><p>在内存里以位图形式存储一个图片的所有像素信息，可以用上面的形式来表示。</p><h4 id="Drawable-是什么？"><a href="#Drawable-是什么？" class="headerlink" title="Drawable 是什么？"></a>Drawable 是什么？</h4><p>Drawable 更像是一个抽象版的自定义的 view，但 Drawable 只负责绘制，只是一个绘制工具。Drawable 不是一个被绘制的对象（path、circle、line 等等都是被 canvas 绘制的对象），更像是一个 view，它持有 canvas，只负责绘制，它想怎么绘制就按照自己规则去绘制。Drawable 内部存储的是一个绘制规则，这个规则可以是一个具体的一个具体的 bitmap、颜色、抽象的灵活的描述，Drawable 是不能含有具体的像素信息。</p><p>用代码简单举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class DrawableView extends View &#123;</span><br><span class="line">    Drawable drawable;</span><br><span class="line"></span><br><span class="line">    public DrawableView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        drawable = new ColorDrawable(Color.RED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        drawable.setBounds(100, 100, getWidth(), getHeight());</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义-Drawable"><a href="#自定义-Drawable" class="headerlink" title="自定义 Drawable"></a>自定义 Drawable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class DrawableView extends View &#123;</span><br><span class="line">    Drawable drawable;</span><br><span class="line"></span><br><span class="line">    public DrawableView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        drawable = new MeshDrawable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">//      drawable.setBounds(100, 100, getWidth(), getHeight());</span><br><span class="line">        drawable.setBounds(0, 0, getWidth(), getHeight());</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class MeshDrawable extends Drawable &#123;</span><br><span class="line">    private static final int INTERVAL = (int) Utils.dpToPixel(80);</span><br><span class="line"></span><br><span class="line">    Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line">        paint.setStrokeWidth(Utils.dpToPixel(2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void draw(@NonNull Canvas canvas) &#123;</span><br><span class="line">        for (int i = 0; i &lt; getBounds().right; i += INTERVAL) &#123;</span><br><span class="line">            System.out.println(&quot;外 i = &quot; + i );</span><br><span class="line">            for (int j = 0; j &lt; getBounds().bottom; j += INTERVAL) &#123;</span><br><span class="line">                System.out.println(&quot;内 i = &quot; + i + &quot;   j = &quot; + j);</span><br><span class="line">                // 画 横线</span><br><span class="line">                canvas.drawLine(getBounds().left, j, getBounds().right, j, paint);</span><br><span class="line">                // 画 竖线</span><br><span class="line">                canvas.drawLine(i, getBounds().top, i, getBounds().bottom, paint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setAlpha(int alpha) &#123;</span><br><span class="line">        paint.setAlpha(alpha);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getAlpha() &#123;</span><br><span class="line">        return paint.getAlpha();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setColorFilter(@Nullable ColorFilter colorFilter) &#123;</span><br><span class="line">        paint.setColorFilter(colorFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOpacity() &#123;</span><br><span class="line">        return paint.getAlpha() == 0 ? PixelFormat.TRANSPARENT :</span><br><span class="line">                paint.getAlpha() == 0xff ? PixelFormat.OPAQUE : PixelFormat.TRANSLUCENT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bitmap-和-Drawable-之间互相转换"><a href="#Bitmap-和-Drawable-之间互相转换" class="headerlink" title="Bitmap 和 Drawable 之间互相转换"></a>Bitmap 和 Drawable 之间互相转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// bitmap --&gt; Drawable</span><br><span class="line">Drawable drawble = new BitmapDrawable(getResources(),bitmap);</span><br></pre></td></tr></table></figure><p>这两个类本身就不是一个概念，就不存在相互转换的操作，如果真有这样的需求，也是可以实现效果。 如果非要 Drawable –&gt; bitmap 转换，就只能硬画了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// Drawable --&gt; bitmap</span><br><span class="line"></span><br><span class="line">/* 调用*/</span><br><span class="line">Bitmap icon = BitmapFactory.decodeResource(context.getResources(),</span><br><span class="line">R.drawable.icon_resource);</span><br><span class="line"></span><br><span class="line">public static Bitmap drawableToBitmap (Drawable drawable) &#123;</span><br><span class="line">    Bitmap bitmap = null;</span><br><span class="line"> </span><br><span class="line">    if (drawable instanceof BitmapDrawable) &#123;</span><br><span class="line">        BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;</span><br><span class="line">        if(bitmapDrawable.getBitmap() != null) &#123;</span><br><span class="line">            return bitmapDrawable.getBitmap();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if(drawable.getIntrinsicWidth() &lt;= 0 || drawable.getIntrinsicHeight() &lt;= 0) &#123;</span><br><span class="line">        bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888); // Single color bitmap will be created of 1x1 pixel</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Canvas canvas = new Canvas(bitmap);</span><br><span class="line">    drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());</span><br><span class="line">    drawable.draw(canvas);</span><br><span class="line">    return bitmap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密、编码、Hash、序列化和字符集</title>
      <link href="/d80f.html"/>
      <url>/d80f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在学习 HenCoder Plus 的二期课程，想巩固一下基础的同时，也在这里记录一下<a id="more"></a>，结合讲义做一下笔记。记录加密、编码、Hash、Base64、压缩与解压缩、序列化和字符集</p></blockquote><h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h3><h4 id="古典密码学"><a href="#古典密码学" class="headerlink" title="古典密码学"></a>古典密码学</h4><p>起源于古代战争：在战争中，为了防止书信被截获后重要信息泄漏，人们开始对书信进行加密。</p><h5 id="移位式加密"><a href="#移位式加密" class="headerlink" title="移位式加密"></a>移位式加密</h5><p>如密码棒，使用布条缠绕在木棒上的方式来对书信进行加密。</p><h5 id="替换式加密"><a href="#替换式加密" class="headerlink" title="替换式加密"></a>替换式加密</h5><p>按照一定规则使用不同的文字来替换掉原先的文字来进行加密。</p><h4 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h4><ul><li>可以加密任何二进制数据</li><li>非对称加密的出现使得密码学有了更广泛的用途：数字签名</li></ul><h5 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h5><p>原理：通信双方使用同一个密钥，使用加密算法配合上密钥来进行加密，解密时使用加密过程的完全逆过程配合密钥来进行解密。<br><strong>使用密钥和加密算法对数据进⾏转换，得到的无意义数据即为密文;使⽤密钥和解密算法对密文进行逆向转换，得到原数据</strong></p><p><img src="/img/blog/hencoder/duichenjiami.png" alt="image"></p><h6 id="对称加密的经典算法"><a href="#对称加密的经典算法" class="headerlink" title="对称加密的经典算法"></a>对称加密的经典算法</h6><p>DES（56位密钥，密钥太短而逐渐被弃用）、AES（128位、192位、256位密钥，现在最流行）</p><h6 id="对称加密作用"><a href="#对称加密作用" class="headerlink" title="对称加密作用"></a>对称加密作用</h6><p>加密通信，防止信息在不安全网络上被截获后，信息被人读取或篡改</p><h6 id="对称加密缺点"><a href="#对称加密缺点" class="headerlink" title="对称加密缺点"></a>对称加密缺点</h6><p>不能在不安全网络上传输密钥，一旦密钥泄露则加密通信失败。</p><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><p>原理：使用公钥对数据进行加密得到密文；使用私钥对数据进行解密得到原数据。</p><p>使⽤非对称加密通信，可以在不可信网络上将双方的公钥传给对⽅，然后在发消息前分别对消息使用<br>对方的公钥来加密和使⽤⾃己的私钥来签名，做到不可信网络上的可靠密钥传播及加密通信。</p><p><img src="/img/blog/hencoder/feiduichenjiajiemi.png" alt="image"></p><p>由于私钥和公钥相互可解，因此非对称加密还可以用于数字签名技术。</p><p><img src="/img/blog/hencoder/qianmingyuyanzheng.png" alt="image"></p><h5 id="经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）"><a href="#经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）" class="headerlink" title="经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）"></a>经典算法：RSA（可用于加密和签名）、DSA（仅用于签名，但速度更快）</h5><h5 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h5><ul><li>有点：可以在不安全网络上传输密钥</li><li>缺点：计算复杂，因此性能相比对称加密差很多</li></ul><h4 id="密钥和登录密码"><a href="#密钥和登录密码" class="headerlink" title="密钥和登录密码"></a>密钥和登录密码</h4><p>密钥 key</p><ul><li>场景：用于加密和解密</li><li>目的：办证数据被盗时不会被人读懂内容</li><li>焦点：数据</li></ul><p>登录密码 password</p><ul><li>场景：用户进入网站或游戏前的身份认证</li><li>目的：数据提供方或应用服务方对账户拥有者数据的保护，保证 only you 才提供权限</li><li>焦点：身份</li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4><p>概念：将二进制数据转换成由 64 个字符组成的字符串的编码算法</p><h5 id="二进制数据？"><a href="#二进制数据？" class="headerlink" title="二进制数据？"></a>二进制数据？</h5><ul><li>广义：所有计算机数据都是二进制数据</li><li>狭义：非文本数据 即 为二进制数据</li></ul><h5 id="Base64-索引表"><a href="#Base64-索引表" class="headerlink" title="Base64 索引表"></a>Base64 索引表</h5><p><img src="/img/blog/hencoder/base64suoyinbiao.png" alt="image"></p><h5 id="Base64-用途"><a href="#Base64-用途" class="headerlink" title="Base64 用途"></a>Base64 用途</h5><ul><li>将二进制数据扩充了储存和传输途径(例如可以把数据保存到文本⽂件、可以通过聊天对话框或短信形式发送二进制数据、可以在 URL 中加入简单的二进制数据)</li><li>普通的字符串在经过 Base64 编码后的结果会变得肉眼不可读，因此可以适⽤于一定条件下的防 偷窥(较少⽤)</li></ul><h5 id="Base64-缺点"><a href="#Base64-缺点" class="headerlink" title="Base64 缺点"></a>Base64 缺点</h5><p>因为自身的原理(6 位变 8 位)，因此每次 Base64 编码之后，数据都会增⼤约 1/3，所以会影响存储和传输性能。</p><h5 id="Base64-加密图片传输安全高效？"><a href="#Base64-加密图片传输安全高效？" class="headerlink" title="Base64 加密图片传输安全高效？"></a>Base64 加密图片传输安全高效？</h5><p>不安全不高效！首先，自身并不是加密，另外 Base64 会导致数据增大，降低网络性能，增大用户流量开销。Base64 对图片进行编码的用处在于，有时需要使用文本形式来传输图片。除此之外，没有必要使用它对图片进行额外处理。</p><h4 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h4><h5 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h5><ul><li>压缩：将数据使用更具有存储优势的编码算法进行编码。</li><li>解压缩：将压缩数据解码还原成原来的形式，以方便使用。</li></ul><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>减小数据占用的存储空间</p><h5 id="压缩是编码吗？"><a href="#压缩是编码吗？" class="headerlink" title="压缩是编码吗？"></a>压缩是编码吗？</h5><p>是编码，编码，是指把数据从一种形式转换为另外一种形式。压缩过程属于编码过程，解压缩过程属于解码过程。</p><h5 id="常见压缩算法"><a href="#常见压缩算法" class="headerlink" title="常见压缩算法"></a>常见压缩算法</h5><p>DEFLATE、JPEG、MP3</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>把数据对象（一般是内存中的，例如 JVM 中的对象）转换成字节序列的过程。对象在程序内存里的存放形式是散乱的（存放在不同的内存区域、并且由引用进行连接），通过序列化可以把内存中的对象转换成一个字节序列，从而使用 byte[] 等形式进行本地存储或网络传输，在需要的时候重新组装（反序列化）来使用。</p><h5 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h5><p>让内存中的对象可以被存储和传输</p><h5 id="序列化是编码吗？"><a href="#序列化是编码吗？" class="headerlink" title="序列化是编码吗？"></a>序列化是编码吗？</h5><p>不是</p><h5 id="序列化和编码的区别？"><a href="#序列化和编码的区别？" class="headerlink" title="序列化和编码的区别？"></a>序列化和编码的区别？</h5><p>编码是把数据由一种数据格式转换成另一种数据格式；而序列化是把数据由内存中的对象（而不是某种具体的格式）转换成字节序列。</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>把任意数据转换成指定大小范围（通常很小，例如 256 字节以内）的数据。</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>相当于从数据中提出摘要信息，因此最主要用途是数字指纹。</p><h5 id="实际用途："><a href="#实际用途：" class="headerlink" title="实际用途："></a>实际用途：</h5><p>唯一性验证。例如 java 中 hashCode（）方法。</p><h5 id="怎么重写-hashCode-方法？"><a href="#怎么重写-hashCode-方法？" class="headerlink" title="怎么重写 hashCode 方法？"></a>怎么重写 hashCode 方法？</h5><p>把 equals（） 方法中的每个用于判断相等的变量都放进 hashCode（） 中，一起生成一个尽量不会碰撞的整数即可。</p><h5 id="实际用途"><a href="#实际用途" class="headerlink" title="实际用途"></a>实际用途</h5><ul><li>数据完整性验证。从⽹络上下载⽂件后，通过⽐对文件的 Hash 值(例如 MD5、SHA1)，可以确认下载的⽂件是否有 损坏。如果下载的⽂件 Hash 值和⽂文件提供⽅给出的 Hash 值⼀致，则证明下载的⽂文件是完好⽆损 的。</li><li>隐私保护（不属于加密）。当重要数据必须暴露的时候，有事可以选择暴露它的 Hash 值(例如 MD5)，以保障原数据的安全。 例如网站登录时，可以只保存用户密码的 Hash 值，在每次登录验证时只需要将输⼊的密码的 Hash 值和数据库中保存的 Hash 值作⽐对就好，⽹站无需知道⽤户的密码。这样，当⽹站数据失窃时，用户不会因为⾃己的密码被盗导致其他⽹站的安全也受到威胁。</li><li>快速查找。 HashMap</li></ul><h5 id="hash-是编码吗？"><a href="#hash-是编码吗？" class="headerlink" title="hash 是编码吗？"></a>hash 是编码吗？</h5><p>不是。hash 是单向过程，是不可逆的，无法进行逆向恢复操作，因此 hash 不属于编码。</p><h5 id="hash-是加密吗？"><a href="#hash-是加密吗？" class="headerlink" title="hash 是加密吗？"></a>hash 是加密吗？</h5><p>不是。 hash 是单向过程，无法进行逆向恢复操作，因此 hash 不属于加密。（MD5 不是加密！）</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>一个由整数向现实世界中的文字符号的 map</p><h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5><ul><li>ASCII:128 个字符，1 字节 ISO-8859-1:对 ASCII 进⾏行行扩充，1 字节</li><li>Unicode:13 万个字符，多字节<blockquote><p>UTF-8:Unicode 的编码分⽀支<br>UTF-16 :Unicode 的编码分⽀支</p></blockquote></li><li>GBK / GB2312 / GB18030:中国⾃自研标准，多字节，字符集 + 编码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 的原理和工作机制学习笔记整理</title>
      <link href="/50ea.html"/>
      <url>/50ea.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在学习 HenCoder Plus 的二期课程，想巩固一下基础的同时，也在这里记录一下，结合讲义做一下笔记。</p></blockquote><h3 id="HTTP-的定义（Hypertext-Transfer-Protocol）"><a href="#HTTP-的定义（Hypertext-Transfer-Protocol）" class="headerlink" title="HTTP 的定义（Hypertext Transfer Protocol）"></a>HTTP 的定义（Hypertext Transfer Protocol）</h3><p>一种网络协议传输协议，位于 TCP/IP 协议族的最顶层–（应用层）；<br>超文本传输协议，和 HTML（Hypertext Markup Language） 超文本标记一起诞生，用于在网络上请求和传输 HTML 内容。<br>超⽂文本，即「扩展型⽂文本」，指的是 HTML 中可以有链向别的⽂文本的链接(hyperlink)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Page Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a Heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="HTTP-的工作方式"><a href="#HTTP-的工作方式" class="headerlink" title="HTTP 的工作方式"></a>HTTP 的工作方式</h3><h4 id="浏览器："><a href="#浏览器：" class="headerlink" title="浏览器："></a>浏览器：</h4><p>用户输入地址后回车或点击链接 -&gt; 浏览器拼装 HTTP 报⽂并发送请求给服务器 -&gt; 服务器处理理请求后 发送响应报文给浏览器 -&gt; 浏览器解析响应报⽂并使⽤渲染引擎显示到界⾯</p><h4 id="手机-App："><a href="#手机-App：" class="headerlink" title="手机 App："></a>手机 App：</h4><p> ⽤户点击或界⾯自动触发联网需求 -&gt; Android 代码调⽤拼装 HTTP 报⽂并发送请求到服务器器 -&gt; 服务器处理理请求后发送响应报文给手机 -&gt; Android 代码处理响应报文并作出相应处理理(如储存数据、加⼯数据、显示数据到界面)</p><h3 id="URL-和-HTTP-报文"><a href="#URL-和-HTTP-报文" class="headerlink" title="URL 和 HTTP 报文"></a>URL 和 HTTP 报文</h3><h4 id="URL-格式"><a href="#URL-格式" class="headerlink" title="URL 格式"></a>URL 格式</h4><p>三部分：协议类型、服务器地址（和端口号）、路径（path）<br>协议类型： //服务器地址[:端口号]路径        </p><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>请求行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET(method) + /users （path）+ HTTP/1.1 (HTTP version)</span><br></pre></td></tr></table></figure><p>Headers：       </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host：api.github.com    </span><br><span class="line">Content-Type: text/plain    </span><br><span class="line">Content-Length: 243</span><br></pre></td></tr></table></figure><p>Body:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">balabalabala....</span><br></pre></td></tr></table></figure><h4 id="响应报文结构"><a href="#响应报文结构" class="headerlink" title="响应报文结构"></a>响应报文结构</h4><p>状态行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1(HTTP version) + 200(state code) + OK (state msg)</span><br></pre></td></tr></table></figure><p>Headers：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">cache-control: public, max-age=60, s-maxage=60</span><br><span class="line">vary: Accept,Accept-Encoding</span><br><span class="line">etag: W/&quot;02eec5b334b0e4c05253d3f4138daa46&quot;</span><br><span class="line">content-encoding: gzip</span><br></pre></td></tr></table></figure><p>Body:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;login&quot;:&quot;mojombo&quot;,&quot;id&quot;:1,&quot;node_id&quot;:&quot;MDQ6VXNlcjE</span><br><span class="line">=&quot;,&quot;avatar_url&quot;:&quot;https://avatars0.githubuserconte</span><br><span class="line">nt.com/u/1?v=4&quot;,&quot;gravat......</span><br></pre></td></tr></table></figure><h3 id="Request-Method-请求方法"><a href="#Request-Method-请求方法" class="headerlink" title="Request Method 请求方法"></a>Request Method 请求方法</h3><h4 id="GET-特点"><a href="#GET-特点" class="headerlink" title="GET 特点"></a>GET 特点</h4><ul><li>用户获取资源</li><li>对服务器数据不进行修改</li><li>不发送 Body</li></ul><h4 id="POST-特点"><a href="#POST-特点" class="headerlink" title="POST 特点"></a>POST 特点</h4><ul><li>用于增加或修改资源</li><li>发送给服务器的内容写在 Body 里面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST  /users  HTTP/1.1</span><br><span class="line">Host: api.github.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 13</span><br><span class="line">name=rengwuxian&amp;gender=male</span><br></pre></td></tr></table></figure><h4 id="PUT-特点"><a href="#PUT-特点" class="headerlink" title="PUT 特点"></a>PUT 特点</h4><ul><li>用于修改资源</li><li>发送给服务器的内容写在 Body 里面</li></ul><h4 id="DELETE-特点"><a href="#DELETE-特点" class="headerlink" title="DELETE 特点"></a>DELETE 特点</h4><ul><li>用于删除资源</li><li>不发送 Body</li></ul><h4 id="HEAD-特点"><a href="#HEAD-特点" class="headerlink" title="HEAD 特点"></a>HEAD 特点</h4><ul><li>和 GET 使用方法完全相同</li><li>和 GET 唯一区别在于，返回的响应中没有 Body</li></ul><h3 id="State-Code-状态码"><a href="#State-Code-状态码" class="headerlink" title="State Code 状态码"></a>State Code 状态码</h3><p>三位数字，⽤于对响应结果做出类型化描述(如 获取成功、内容未找到）</p><ul><li>1xx:临时性消息。如:100 (继续发送)、101(正在切换协议)</li><li>2xx:成功。最典型的是 200(OK)、201(创建成功)</li><li>3xx:重定向。如 301(永久移动)、302(暂时移动)、304(内容未改变)</li><li>4xx:客户端错误。如 400(客户端请求错误)、401(认证失败)、403(被禁⽌止)、404(找 不不到内容)</li><li>5xx:服务器器错误。如 500(服务器器内部错误)。</li></ul><h4 id="Cache-和-Buffer-的区别"><a href="#Cache-和-Buffer-的区别" class="headerlink" title="Cache 和 Buffer 的区别"></a>Cache 和 Buffer 的区别</h4><p>Cache 是缓存，为了提升效率速度。<br>Buffer 是缓冲，上游多生产一些，给下游使用。</p>]]></content>
      
      
      <categories>
          
          <category> 理论基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊 Java 的面向对象以及接口和抽象类的区别?</title>
      <link href="/92d0.html"/>
      <url>/92d0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java 是非常典型的面向对象语言，掌握面向对象设计原则和技巧，是保证高质量代码的基础之一。面向对象提供的基本机制，对于提高开发、沟通等各方面效率也至关重要。<a id="more"></a><br>最近通过在极客时间里学习杨晓峰老师的课程，再回顾一下 java 方面的一些基础知识，在这里简单记录一下。</p></blockquote><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>谈到面向对象，我们一定要清楚面向对象的基本要素：封装、继承、多态。</p><h3 id="面向对象的基本要素"><a href="#面向对象的基本要素" class="headerlink" title="面向对象的基本要素"></a>面向对象的基本要素</h3><p><strong>封装</strong><br>目的是隐藏事务内部的实现细节，以便提高安全性和简化编程。封装提供了合理的边界，避免外部调用者接触到内部的细节。我们在日常开发中，因为无意间暴露了细节导致的难缠 bug 太多了，比如在多线程环境暴露内部状态，导致的并发修改问题。从另外一个角度看，封装这种隐藏，也提供了简化的界面，避免太多无意义的细节浪费调用者的精力。</p><p><strong>继承</strong><br>是代码复用的基础机制.但要注意，继承可以看作是非常紧耦合的一种关系，父类代码修改，子类行为也会变动。在实践中，过度滥用继承，可能会起到反效果。</p><p><strong>多态</strong><br>说到多态，可能立即会想到重写（override）和重载（overload）、向上转型。<br>重写是父子类中相同名字和参数的方法，不同的实现；<br>重载则是相同名字的方法，但是不同的参数，本质上这些方法签名是不一样的，为了更好说明，请参考下面的样例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int doSomething() &#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*输入参数不同，意味着方法签名不同，重载的体现*/ </span><br><span class="line">public int doSomething(List&lt;String&gt; strs) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*return 类型不一样，编译不能通过;方法名称和参数一致，但是返回值不同，这种情况在 Java 代码中不算有效的重载*/ </span><br><span class="line">public short doSomething(List&lt;String&gt; strs) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象设计原则（S-O-L-I-D）"><a href="#面向对象设计原则（S-O-L-I-D）" class="headerlink" title="面向对象设计原则（S.O.L.I.D）"></a>面向对象设计原则（S.O.L.I.D）</h3><p>英文简称 | 英文描述 | 中文名称<br>—|—<br>OCP      | Open Closed Principle    | 开放封闭原则<br>SRP     | Single Responsibility Principle    | 单一职责原则<br>LSP     |  Liskov Substitution Principle    | 里氏替换原则<br>ISP     |  Interface Segregation Principle    | 接口分离原则<br>DIP      | Dependency Inversion Principle    | 依赖倒置原则</p><p>下面通俗解释参考来源：CSDN <strong><a href="原文：https://blog.csdn.net/Xiong_IT/article/details/53467684">xiong_it</a></strong>，感谢~</p><h4 id="开关原则（开闭原则）（Open-Close-Open-for-extension-close-for-modification-Principle）"><a href="#开关原则（开闭原则）（Open-Close-Open-for-extension-close-for-modification-Principle）" class="headerlink" title="开关原则（开闭原则）（Open-Close, Open for extension, close for modification Principle）"></a><strong>开关原则（开闭原则）（Open-Close, Open for extension, close for modification Principle）</strong></h4><blockquote><p>开闭原则对扩展开放，对修改关闭，并不意味着不做任何修改，低层次模块的变化，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。在业务规则改变的情况下高层模块必须有部分改变以适应新业务，改变要尽量地少，防止变化风险的扩散。<br>—秦小波《设计模式之禅》</p></blockquote><p>设计要对扩展开放，对修改关闭。换句话说，程序设计应保证平滑的扩展性，尽量避免因为新增同类功能而修改已有实现，这样可以少产出些回归（regression）问题。</p><p>通俗解释：<br>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。<br>OCP 是 6 大原则的最高纲领，所以才如此抽象，晦涩难懂。<br>用面向对象的语言来讲，OCP（开闭原则） 是一个最抽象的接口，而其余的5大原则只是OCP的子类接口，他们一起定义了 OOP 世界的开发标准，常用的 23 种设计模式更是只能算作这 6 大原则的实现抽象类，咱们开发的代码实践才是真正的具体子类。</p><h4 id="单一职责原则（Single-Responsibility-Principle）"><a href="#单一职责原则（Single-Responsibility-Principle）" class="headerlink" title="单一职责原则（Single Responsibility Principle）"></a><strong>单一职责原则（Single Responsibility Principle）</strong></h4><p>类或者对象最好是只有单一职责，在程序设计中如果发现某个类承担着多种义务，可以考虑进行拆分。</p><p>通俗解释：<br>应该有且只有一个原因引起类的变更。（一个类，一个方法只应该做一件事情）</p><p>这种方式是如何体现扩展性的呢？<br>拿一个Android中最常见的ImageLoader的设计来举例子，ImageLoader主要需要实现2个功能，下载图片，缓存图片。<br>假如，我们把所有的功能全部放在一个ImageLoader类中，假设下载要改方式呢？缓存要改策略呢？你通通要改ImageLoader，你如何保证修改某个功能的过程中另一个功能依旧完好，没被污染？拆分职责，使用ImageCache接口及其子类实现进行缓存，和ImageLoader建立关联，职责单一了，你再在每个单一的职责类里面去修改相关代码，这样其他功能代码被污染的概率大大降低。<br>当然，这里只是随意举的例子，划分单一职责这个度很难把握，每个人都需要根据自身情况和项目情况来进行判断。</p><h4 id="里氏替换原则（Liskov-Substitution-Principle）"><a href="#里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏替换原则（Liskov Substitution Principle）"></a><strong>里氏替换原则（Liskov Substitution Principle）</strong></h4><p>这是面向对象的基本要素之一，进行继承关系抽象时，凡是可以用父类或者基类的地方，都可以用子类替换。</p><p>通俗解释：<br>只要父类能出现的地方子类就可以出现，而且替换为子类也不产生任何异常错误，反之则不然。这主要体现在，我们经常使用抽象类/基类做为方法参数，具体使用哪个子类作为参数传入进去，由调用者决定。</p><p>这条原则包含以下几个方面：</p><ul><li>子类必须完全实现父类的方法；</li><li>子类可以有自己的个性外观（属性）和行为（方法）；</li><li>覆盖或者实现父类方法时，参数可以被放大，即父类的某个方法参数为HashMap时，子类参数可以是HashMap，也可以是Map或者更大；</li><li>覆盖或者实现父类的方法时，返回结果可以被缩小，即父类的某个方法返回类型是Map，子类可以是Map，也可以是HashMap或者更小。</li></ul><h4 id="接口分离原则（Interface-Segregation-Principle）"><a href="#接口分离原则（Interface-Segregation-Principle）" class="headerlink" title="接口分离原则（Interface Segregation Principle）"></a><strong>接口分离原则（Interface Segregation Principle）</strong></h4><p>我们在进行类和接口设计时，如果在一个接口里定义了太多方法，其子类很可能面临两难，就是只有部分方法对它是有意义的，这就破坏了程序的内聚性。<br>对于这种情况，可以通过拆分成功能单一的多个接口，将行为进行解耦。在未来维护中，如果某个接口设计有变，不会对使用其他接口的子类构成影响。</p><p>通俗解释：<br>客户端不应该依赖它不需要的接口，类间的依赖应该建立在最小的接口上；<br>使用接口时应该建立单一接口，不要建立臃肿庞大的接口，尽量给调用者提供专门的接口，而非多功能接口。<br>这里我想举个 Android 中的事件处理 Listener 设计的例子，大家都知道，我们想给 button 添加点击或长按事件时，可以使用如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(clickListener); </span><br><span class="line">button.setOnLongClickListener(longClickListener);</span><br></pre></td></tr></table></figure><p>还有其他比如 OnTouchListener 等等等事件接口，它为什么不直接提供一个通用的接口 IListener 呢？然后回调所有的事件给调用者处理，而要提供这么多独立的接口，这就是遵循了 ISP 原则的结果，每个接口最小化了，Activity/button 作为调用者，我可以选择性的去处理我想处理的事件，不关心的事件 Listener 我就不去处理和依赖。</p><h4 id="依赖反转原则或依赖倒置原则（Dependency-Inversion-Principle）"><a href="#依赖反转原则或依赖倒置原则（Dependency-Inversion-Principle）" class="headerlink" title="依赖反转原则或依赖倒置原则（Dependency Inversion Principle）"></a><strong>依赖反转原则或依赖倒置原则（Dependency Inversion Principle）</strong></h4><p>实体应该依赖于抽象而不是实现。也就是说高层次模块，不应该依赖于低层次模块，而是应该基于抽象。实践这一原则是保证产品代码之间适当耦合度的法宝。</p><p>通俗解释：<br>抽象：Java中体现为基类，抽象类，接口，而不单指抽象类<br>细节：体现为子类，实现类</p><p>通俗点讲，该原则包含以下几点要素：</p><ul><li>模块间的依赖应该通过抽象发生，具体实现类之间不应该建立依赖关系</li><li>接口或者抽象类不依赖于实现类，否则就失去了抽象的意义</li><li>实现类依赖于接口或者抽象类</li></ul><p>总结起来，一句话：”面向接口编程“。</p><p>以上为最通用的部分，另外还有一个原则：</p><h4 id="迪米特法则（Demeter-Principle）：又称最少知识原则（Least-Knowledge-Principle，-LKP）"><a href="#迪米特法则（Demeter-Principle）：又称最少知识原则（Least-Knowledge-Principle，-LKP）" class="headerlink" title="迪米特法则（Demeter Principle）：又称最少知识原则（Least Knowledge Principle， LKP）"></a><strong>迪米特法则（Demeter Principle）：又称最少知识原则（Least Knowledge Principle， LKP）</strong></h4><p>一个对象应该对其他对象有最少的了解。<br>通俗点讲：一个类应该对自己需要耦合或者调用的类知道越少越好，被耦合或者调用的类内部和我没有关系，我不需要的东西你就别 public 了。<br>迪米特法则包含以下几点要素：<br>只和朋友类交流：只耦合该耦合的类<br>朋友间也是有距离的：减少不该public的方法，向外提供一个简洁的访问<br>自家的方法就自己创建：只要该方法不会增加内部的负担，也不会增加类间耦合<br><br></p><h3 id="OOP-原则在面试题目中的分析"><a href="#OOP-原则在面试题目中的分析" class="headerlink" title="OOP 原则在面试题目中的分析"></a>OOP 原则在面试题目中的分析</h3><blockquote><p>OOP 的全称是 Object Oriented Programming，即面向对象编程,它的设计原则对于指导开发有实际意义。<br>S.O.L.I.D 是面向对象设计(OOD)和面向对象编程(OOP)中的几个重要编码原则(Programming Priciple)的首字母缩写。</p></blockquote><p>借用极客时间里的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class VIPCenter &#123;</span><br><span class="line">  void serviceVIP(T extend User user) &#123;</span><br><span class="line">     if (user instanceof SlumDogVIP) &#123;</span><br><span class="line">        // 穷 X VIP，活动抢的那种</span><br><span class="line">        // do somthing</span><br><span class="line">      &#125; else if(user instanceof RealVIP) &#123;</span><br><span class="line">        // do somthing</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这段代码的一个问题是，业务逻辑集中在一起，当出现新的用户类型时，比如，大数据发现了我们是肥羊，需要去收获一下， 这就需要直接去修改服务方法代码实现，这可能会意外影响不相关的某个用户类型逻辑。</p><p>利用开关原则，尝试改造为下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class VIPCenter &#123;</span><br><span class="line">   private Map&lt;User.TYPE, ServiceProvider&gt; mProviders;</span><br><span class="line">   void serviceVIP(T extend User user） &#123;</span><br><span class="line">      mProviders.get(user.getType()).service(user);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> interface ServiceProvider&#123;</span><br><span class="line">   void service(T extend User user) ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> class SlumDogVIPServiceProvider implements ServiceProvider&#123;</span><br><span class="line">   void service(T extend User user)&#123;</span><br><span class="line">     // do somthing</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> class RealVIPServiceProvider implements ServiceProvider&#123;</span><br><span class="line">   void service(T extend User user) &#123;</span><br><span class="line">     // do something</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面的示例，将不同对象分类的服务方法进行抽象，把业务逻辑的紧耦合关系拆开，实现代码的隔离保证了方便的扩展。<br><br></p><h2 id="如何回答接口和抽象类两者的区别？"><a href="#如何回答接口和抽象类两者的区别？" class="headerlink" title="如何回答接口和抽象类两者的区别？"></a>如何回答接口和抽象类两者的区别？</h2><p>接口和抽象类是 Java 面向对象设计的两个基础机制。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口，不能实例化；<br>Java 类实现 interface 使用 implements 关键词;<br>接口是对<strong>行为</strong>的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的;<br>不能包含任何非常量成员，任何 field 都是隐含着 public static final 的意义；<br>同时，没有非静态方法实现，也就是说要么是抽象方法，要么是静态方法。<br>Java 标准类库中，定义了非常多的接口，比如 java.util.List，可以查看 list 的源码来了解。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类是不能实例化的类，用 abstract 关键字修饰 class，其目的主要是<strong>代码重用</strong>。<br>除了不能实例化，形式上和一般的 Java 类并没有太大区别，可以有一个或者多个抽象方法，也可以没有抽象方法。<br>抽象类大多用于抽取相关 Java 类的<strong>共用方法实现或者是共同成员变量</strong>，然后通过<strong>继承</strong>的方式达到代码复用的目的。<br>Java 标准库中，比如 collection 框架，很多通用部分就被抽取成为抽象类，例如 java.util.AbstractList。<br>继承 abstract class 则是使用 extends 关键词，我们可以参考 Java 标准库中的 ArrayList。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; </span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础面试问题整理</title>
      <link href="/d44b.html"/>
      <url>/d44b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对 java 的重要的一些基础知识点进行一个简单的总结，方便对碎片知识进行回顾。<a id="more"></a><br>持续更新…</p></blockquote><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><h3 id="怎么安全停止一个线程任务？原理是什么？"><a href="#怎么安全停止一个线程任务？原理是什么？" class="headerlink" title="怎么安全停止一个线程任务？原理是什么？"></a>怎么安全停止一个线程任务？原理是什么？</h3><p>thread.stop（）；<br>不可用，危险 替换为<br>thread.interrupt（）；<br>interrupt  是一种温和的打断 的线程终结。</p><p>Thread.interrupted();<br>会检查自己当前的线程，正在运行的线程的运行状态，并且重置线程的状态。true 变为 false，false 的话，就不处理。<br>isInterrupted();  只是检查自己，自己的状态。<br>安卓自己有个 sleep 的方法   SystemClock.sleep(2000);  不用处理异常。</p><h2 id="Java-基础面试问题整理"><a href="#Java-基础面试问题整理" class="headerlink" title="Java 基础面试问题整理"></a>Java 基础面试问题整理</h2><h3 id="GC-回收，原理？"><a href="#GC-回收，原理？" class="headerlink" title="GC 回收，原理？"></a>GC 回收，原理？</h3><p>xxx</p><h3 id="String-相关问题整理"><a href="#String-相关问题整理" class="headerlink" title="String 相关问题整理"></a>String 相关问题整理</h3><h4 id="如何比较两个字符串？使用“-”还是equals-方法？"><a href="#如何比较两个字符串？使用“-”还是equals-方法？" class="headerlink" title="如何比较两个字符串？使用“==”还是equals()方法？"></a>如何比较两个字符串？使用“==”还是equals()方法？</h4><p>“==” 测试的是两个对象的引用是否相同；<br><br>equals()比较的是两个字符串的值是否相等。<br><br>除非你想检查的是两个字符串是否是同一个对象，否则你应该使用equals()来比较字符串。<br></p><h4 id="equals-和-区别？"><a href="#equals-和-区别？" class="headerlink" title=".equals() 和 == 区别？"></a><a href="https://www.jianshu.com/p/08445889bbb1" target="_blank" rel="noopener"><strong>.equals() 和 == 区别？</strong></a></h4><ul><li>首先的区别是，equals() 是方法，而 == 是操作符；</li><li>对于基本类型的变量来说（如 short、 int、 long、 float、 double），只能使用 == ，因为这些基本类型的变量没有 equals 方法。对于基本类型变量的比较，使用 == 比较， 一般比较的是它们的值。</li><li>对于引用类型的变量来说（例如 String 类）才有 equals 方法，因为 String 继承了 Object 类， equals 是 Object 类的通用方法。对于该类型对象的比较，默认情况下，也就是没有复写 Object 类的 equals 方法，使用 == 和 equals 比较是一样效果的，都是比较的是它们在内存中的存放地址。</li><li>对于 equals 方法被重写的情况, 以 String 类为例, String 类复写了 equals 方法，当使用 == 比较内存的存放地址不相等时，接下来会比较字符串的内容是否 相等，所以 String 类中的 equals 方法会比较两者的字符串内容是否一样。内容的比较。</li></ul><h4 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h4><p>String字符串常量，用于存放字符的数组被声明为final，因此只能赋值一次，不可再更改。<br><br>频繁使用 String 来操作字符串实际上是在不断地创建新的对象，这样会对系统的性能产生影响，适用于操作少量数据。<br><br>StringBuffer 字符串变量，适合于多线程操作下操作大量数据，线程安全的可变字符序列<br><br>StringBuilder 字符串变量，适合于单线程下操作大量数据，线程不安全的可变字符序列<br><br>String 对象的字符串拼接在编译时会转化成 StringBuilder 的 append 操作<br><br>运行速率   String &lt; StringBuffer &lt; StringBuilder<br></p><p>String s = new String(“111”) 创造了几个对象？<br></p><p>会创造两个对象。Java为了避免产生大量的String对象，设计了一个字符串常量池。JDK6之前版本，常量池的内存在永久代进行分配，JDK7之后常量池的内存在Java堆中进行分配。创建一个字符串时，JVM首先检查字符串常量池中是否有相等的字符串，如果有则不再创建并返回该字符串的引用地址；如果没有则在字符串常量中创建字符串并返回该字符串的引用地址。<br><br>new 一个 String 对象时还会在堆内存中创建一个新的对象。<br></p><p>String为啥设计成不可变的？<br></p><p>用于存放字符的数组被声明为final，因此只能赋值一次，不可再更改，而且String 也没有对外暴露修改数组的方法。<br>修改String时，不会在原有的内存地址修改，而是重新指向一个新对象。<br>不可变性可以保证线程安全以及字符串串常量池的实现。</p><p>可以重新赋值么？<br><br>可以通过反射的Field方法获取到当前对象的成员变量并重新赋值；<br></p><h4 id="String-相关待整理…"><a href="#String-相关待整理…" class="headerlink" title="String 相关待整理…"></a>String 相关待整理…</h4><br><br><h3 id="Java的强、软、弱、虚四种引用的区别"><a href="#Java的强、软、弱、虚四种引用的区别" class="headerlink" title="Java的强、软、弱、虚四种引用的区别?"></a>Java的强、软、弱、虚四种引用的区别?</h3><p>强引用：代码中普遍存在的，只要强引用还存在，垃圾收集器就不会回收掉被引用的对象。<br><br>软引用：SoftReference，用来描述还有用但是非必须的对象，当内存不足的时候回收这类对象。<br><br>弱引用：WeakReference，用来描述非必须对象，弱引用的对象只能生存到下一次 GC 发生时，当 GC 发生时，无论内存是否足够，都会回收该对象。<br><br>虚引用：PhantomReference，一个对象是否有虚引用的存在，完全不会对其生存时间产生影响，可通过判断引用队列是否加入虚引用来回收对象。<br></p><h3 id="final-和-finally-和-finalize-的区别？"><a href="#final-和-finally-和-finalize-的区别？" class="headerlink" title="final 和 finally 和 finalize 的区别？"></a>final 和 finally 和 finalize 的区别？</h3><p>final修饰符(关键字)<br><br>类被声明为final，它不能派生出新的子类，不能作为父类被继承；<br><br>方法被声明为final，只能使用，不能重写；<br><br>变量声明为final，在使用过程中不会改变，只能读取不可修改。<br></p><p>finally(用于异常处理)<br><br>一般用于异常处理中，finally是对异常处理的补充，finally结构使代码总会执行，不管有无异常发生。使用finally可以维护对象的内部状态，并可以清理资源<br></p><p>finalize(用于垃圾回收)<br><br>Object中定义的方法，使用finalize()方法在垃圾收集器将对象从内存中回收之前做必要的清理工作</p><h3 id="Java-静态代理和动态代理"><a href="#Java-静态代理和动态代理" class="headerlink" title="Java 静态代理和动态代理"></a>Java 静态代理和动态代理</h3><p>为某个对象提供一个代理，以控制对这个对象的访问<br><br>静态代理：程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就已经确定<br><br>动态代理：程序运行期时由 JVM 动态的生成，代理类和委托类的关系是在运行时确定。<br><br>使用场景：如果需要对多个类进行代理，并且代理的功能都是一样的，用静态代理重复编写代理类就非常的麻烦，可以用动态代理动态的生成代理类。RxJava 里就有使用动态代理。<br></p><h3 id="Java-内存中堆和栈的区别"><a href="#Java-内存中堆和栈的区别" class="headerlink" title="Java 内存中堆和栈的区别"></a>Java 内存中堆和栈的区别</h3><blockquote><p>参考：<a href="https://www.jianshu.com/p/947a76e2ddbc" target="_blank" rel="noopener">https://www.jianshu.com/p/947a76e2ddbc</a></p></blockquote><p><strong>堆内存</strong> </p><p>是用于存储 Java 中的对象和数组，当我们 new 一个对象或者创建一个数组的时候，就会在堆内存中开辟一段空间给他，用于存放。<br><br>堆内存的特点是先进先出，后进后出，堆是在运行时动态的分配内存大小，缺点是存取速度较慢。</p><p>堆内存用于存放由new创建的对象和数组。<br><br>在堆内存中分配的内存空间，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，变量的值就等于数组或对象在堆内存中的首地址，而这个栈中的特殊变量，也就成为数组或对象的引用变量。以后可以在程序中使用栈内存中的引用变量访问堆内存中的数组或对象了。引用变量相当于是为数组或对象起的一个别名，或者是代号。<br><br><strong>数组和对象在没有引用变量指向它的时候，才变成垃圾，不能被继续使用，但是仍然会占用堆内存空间，而后在一个不确定的时间内，由java虚拟机自动垃圾回收器回收，这也是java程序为什么会占用很大内存的原因。</strong><br></p><p><strong>栈内存</strong> </p><p>是用来执行程序用的，存放基本类型的变量和对象的引用变量.<br><br>栈内存的特点是先进后出，后进先出，栈内存存取速度比堆要快，栈数据可以共享，缺点是存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。<br></p><p>在函数中定义的基本类型的变量和对象的引用变量都是在函数的栈内存中分配<br>。<br>当在一段代码块中声明了一个变量时，java就会在栈内存中为这个变量分配内存空间，当超过变量的作用域之后，java也会自动释放为该变量分配的空间，而这个回收的空间可以即刻用作他用。<br></p><h3 id="遍历-Map-对象的四种方式？"><a href="#遍历-Map-对象的四种方式？" class="headerlink" title="遍历 Map 对象的四种方式？"></a><a href="https://blog.csdn.net/tjcyjd/article/details/11111401" target="_blank" rel="noopener"><strong>遍历 Map 对象的四种方式？</strong></a></h3><p>既然java中的所有map都实现了Map接口，以下方法适用于任何map实现（HashMap, TreeMap, LinkedHashMap, Hashtable, 等等）</p><p><strong>在for-each循环中使用entries来遍历</strong><br><br>这是最常见的并且在大多数情况下也是最可取的遍历方式。在键值都需要时使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();</span><br><span class="line"></span><br><span class="line">for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：for-each循环在java 5中被引入所以该方法只能应用于java 5或更高的版本中。如果你遍历的是一个空的map对象，for-each循环将抛出NullPointerException，因此在遍历前你总是应该检查空引用。</p><p><strong>在for-each循环中遍历keys或values</strong><br>如果只需要 map 中的键或者值，你可以通过 keySet 或 values 来实现遍历，而不是用 entrySet。</p><p>该方法比entrySet遍历在性能上稍好（快了10%），而且代码更加干净</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();</span><br><span class="line"> </span><br><span class="line">//遍历map中的键</span><br><span class="line">for (Integer key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(&quot;Key = &quot; + key); </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//遍历map中的值</span><br><span class="line">for (Integer value : map.values()) &#123;</span><br><span class="line">    System.out.println(&quot;Value = &quot; + value); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Iterator遍历"><a href="#使用Iterator遍历" class="headerlink" title="使用Iterator遍历"></a>使用Iterator遍历</h4><p>使用泛型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); </span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet().iterator(); </span><br><span class="line">while (entries.hasNext()) &#123; </span><br><span class="line">    Map.Entry&lt;Integer, Integer&gt; entry = entries.next(); </span><br><span class="line">    System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用泛型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map map = new HashMap();</span><br><span class="line">Iterator entries = map.entrySet().iterator(); </span><br><span class="line">while (entries.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry) entries.next(); </span><br><span class="line">    Integer key = (Integer)entry.getKey(); </span><br><span class="line">    Integer value = (Integer)entry.getValue(); </span><br><span class="line">    System.out.println(&quot;Key = &quot; + key + &quot;, Value = &quot; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以在keySet和values上应用同样的方法。</p><p>该种方式看起来冗余却有其优点所在。首先，在老版本java中这是惟一遍历map的方式。另一个好处是，你可以在遍历时调用iterator.remove()来删除entries，另两个方法则不能。根据javadoc的说明，如果在for-each遍历中尝试使用此方法，结果是不可预测的。</p><p>从性能方面看，该方法类同于 for-each 遍历（即方法二）的性能。</p><h4 id="通过键找值遍历（效率低）"><a href="#通过键找值遍历（效率低）" class="headerlink" title="通过键找值遍历（效率低）"></a>通过键找值遍历（效率低）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">for (Integer key : map.keySet()) &#123;</span><br><span class="line">    Integer value = map.get(key);</span><br><span class="line">    System.out.println(&quot;Key = &quot; + key + &quot;, Value = &quot; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为方法一的替代，这个代码看上去更加干净；但实际上它相当慢且无效率。因为从键取值是耗时的操作（与方法一相比，在不同的Map实现中该方法慢了20%~200%）。如果你安装了FindBugs，它会做出检查并警告你关于哪些是低效率的遍历。所以尽量避免使用。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果仅需要键(keys)或值(values)使用方法二。如果你使用的语言版本低于java 5，或是打算在遍历时删除entries，必须使用方法三。否则使用方法一(键值都要)。</p><br><h3 id="list-与-Set、Map区别及适用场景"><a href="#list-与-Set、Map区别及适用场景" class="headerlink" title="list 与 Set、Map区别及适用场景"></a>list 与 Set、Map区别及适用场景</h3><p>List,Set都是继承自 Collection 接口，Map则不是</p><p>List特点：元素有放入顺序，元素可重复；list支持for循环，也就是通过下标来遍历，也可以用迭代器；<br><br>Set特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的 Object必须定义equals()方法 ，set 只能用迭代，因为他无序，无法用下标来取得想要的值。） </p><p>Set 和 List 对比： <br><br>Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。 <br><br>List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。 </p><p>Map 适合储存键值对的数据</p><p>线程安全集合类与非线程安全集合类<br>LinkedList、ArrayList、HashSet 是非线程安全的，Vector 是线程安全的;<br><br>HashMap 是非线程安全的，HashTable 是线程安全的;<br><br>StringBuilder 是非线程安全的，StringBuffer 是线程安全的。<br></p><h4 id="HashSet-和-HashMap-怎么判断集合元素重复？"><a href="#HashSet-和-HashMap-怎么判断集合元素重复？" class="headerlink" title="HashSet 和 HashMap 怎么判断集合元素重复？"></a>HashSet 和 HashMap 怎么判断集合元素重复？<br></h4><p>需要重写 hashcode 方法与 equals 方法，先判断 hashcode 是否相等，再判断是否 equals。<br></p><h3 id="ArrayList-与-LinkedList-的区别和适用场景"><a href="#ArrayList-与-LinkedList-的区别和适用场景" class="headerlink" title="ArrayList 与 LinkedList 的区别和适用场景"></a>ArrayList 与 LinkedList 的区别和适用场景</h3><h4 id="Arraylist："><a href="#Arraylist：" class="headerlink" title="Arraylist："></a>Arraylist：</h4><p>优点：ArrayList 是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。<br><br>缺点：因为地址连续， ArrayList 要移动数据,所以插入和删除操作效率比较低。</p><h4 id="LinkedList："><a href="#LinkedList：" class="headerlink" title="LinkedList："></a>LinkedList：</h4><p>优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作 add、remove，LinedList比较占优势。LinkedList 适用于 头尾操作 或 插入指定位置 的场景。<br><br>缺点：因为LinkedList要移动指针,所以查询操作性能比较低。</p><p>适用场景分析：<br><br>当需要对数据进行对此访问的情况下选用ArrayList；<br>当需要对数据进行多次增加删除修改时采用LinkedList。</p><h3 id="HashMap-和-Hashtable-的区别？"><a href="#HashMap-和-Hashtable-的区别？" class="headerlink" title="HashMap 和 Hashtable 的区别？"></a>HashMap 和 Hashtable 的区别？</h3><blockquote><p>原文链接： Javarevisited 翻译： <a href="http://www.importnew.com/author/tangxiaojuan" target="_blank" rel="noopener">ImportNew.com - 唐小娟</a><br>译文链接： <a href="http://www.importnew.com/7010.html" target="_blank" rel="noopener">http://www.importnew.com/7010.html</a></p></blockquote><p>这篇文章中，我们不仅将会看到HashMap和Hashtable的区别，还将看到它们之间的相似之处。</p><p>HashMap和Hashtable的区别</p><p>HashMap 和 Hashtable 都实现了 Map 接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。</p><p>HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable既不支持 Null key 也不支持 Null value)。</p><p>HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而如果没有正确的同步的话，多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。</p><p>另一个区别是HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。</p><p>由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。</p><p>HashMap不能保证随着时间的推移Map中的元素次序是不变的。</p><p><strong>要注意的一些重要术语：</strong></p><ul><li>sychronized意味着在一次仅有一个线程能够更改Hashtable。就是说任何线程要更新Hashtable时要首先获得同步锁，其它线程要等到同步锁被释放之后才能再次获得同步锁更新Hashtable。</li><li>Fail-safe和iterator迭代器相关。如果某个集合对象创建了Iterator或者ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。</li><li>结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</li></ul><p>我们能否让HashMap同步？</p><p>HashMap可以通过下面的语句进行同步：<br>Map m = Collections.synchronizeMap(hashMap);</p><p>结论:<br><br>Hashtable 和 HashMap 有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用Java 5或以上的话，请使用 ConcurrentHashMap 吧。</p><h3 id="二叉树的深度优先遍历和广度优先遍历的具体实现-？"><a href="#二叉树的深度优先遍历和广度优先遍历的具体实现-？" class="headerlink" title="二叉树的深度优先遍历和广度优先遍历的具体实现 ？"></a>二叉树的深度优先遍历和广度优先遍历的具体实现 ？</h3><p>二叉树的深度优先遍历的通用做法是采用栈，用的是栈的先进后出的特性；<br><br>广度优先遍历的通用做法是采用队列，每当遍历当前节点的时候，把该节点从队列中拿出来，并且把它的子节点全部加到队列中。<br><br>深度优先遍历：对每一个可能的分支路径深入到不能在深入为止，而且每个节点只能访问一次。<br><br>有三种情况：<br><br>先序遍历：对任一字树，先访问根，然后遍历其左子树，最后遍历其右子树<br><br>中序遍历：对任一子树，先遍历其左子树，然后访问根，最后遍历其右子树<br><br>后序遍历：对任一子树，先遍历其左子树，然后遍历其右子树，最后访问根<br><br>广度优先遍历：又叫层次遍历，从上到下对每一层依次访问，在每一层中，从左到右(也可以从右往左)访问节点，访问完一层就进入下一层，直到没有节点可以访问为止<br><br>参考资料：<br><a href="https://blog.csdn.net/dyy_gusi/article/details/46414677" target="_blank" rel="noopener">https://blog.csdn.net/dyy_gusi/article/details/46414677</a><br></p><h3 id="volatile-、Sychronized-关键字"><a href="#volatile-、Sychronized-关键字" class="headerlink" title="volatile 、Sychronized 关键字"></a>volatile 、Sychronized 关键字</h3><p>volatile 关键字为变量的访问提供了一种免锁机制，确保了在多线程环境下共享变量的内存可见性，意思就是线程A修改了volatile修饰的变量，线程B能够感知修改。<br><br>声明变量加入volatile关键字后，每次修改该变量，JVM就会通知处理器将工作内存的值强制更新到主内存中，获取该变量时，会从主内存中获取再加载到工作内存中。<br></p><h4 id="volatile与Sychronized区别："><a href="#volatile与Sychronized区别：" class="headerlink" title="volatile与Sychronized区别："></a>volatile与Sychronized区别：<br></h4><p>Volatile 本质是在告诉 jvm 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；<br><br>synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。<br><br>Volatile 仅能使用在变量级别；synchronized 则可以使用在变量、方法、和类级别的<br><br>Volatile 仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性<br><br>volatile 不会造成线程的阻塞；synchronized可能会造成线程的阻塞。<br><br>Volatile 标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化<br></p><blockquote><p>名词解释：<br><br>原子性：一个操作要么全部执行并且执行过程不会被打断，要么就不执行。Java内存模型只保证了基本读取和赋值是原子性操作<br><br>可见性：多个线程访问同一个变量时，一个线程修改了这个变量的值，另外一个变量能够立即看到修改的值<br><br>有序性：程序执行的顺序按照代码的先后顺序执行，指令重排序不会影响单个线程的执行，但是会影响线程并发执行的正确性<br></p></blockquote><h3 id="死锁？"><a href="#死锁？" class="headerlink" title="死锁？"></a>死锁？</h3><p>是指多个线程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。<br></p><p>死锁产生的原因：<br>系统资源的竞争，进程推进顺序非法。</p><p>死锁产生的必要条件：<br>互斥条件：一个资源每次只能被一个线程使用。<br>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。<br>不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺。<br>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</p><p>避免死锁：<br>加锁顺序（线程按照一定的顺序加锁）<br>加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）<br>死锁检测  针对那些不可能实现按序加锁并且锁超时也不可行的场景</p><h3 id="Java常见的编码方式"><a href="#Java常见的编码方式" class="headerlink" title="Java常见的编码方式"></a>Java常见的编码方式</h3><p>ASCII码，GBK，UTF-8，UTF-16<br>UTF-8 中文占 3 个字节，英文占 1 个字节<br>UTF-16 中文占 4 个字节，英文占 4 个字节 </p><h3 id="基本数据类型的大小，以及封装类"><a href="#基本数据类型的大小，以及封装类" class="headerlink" title="基本数据类型的大小，以及封装类"></a>基本数据类型的大小，以及封装类</h3><p><img src="./img/blog/java/data.png" alt="image"><br><br> </p><h3 id="Java-网络协议"><a href="#Java-网络协议" class="headerlink" title="Java 网络协议"></a>Java 网络协议</h3><h4 id="http-与-https-的区别"><a href="#http-与-https-的区别" class="headerlink" title="http 与 https 的区别"></a>http 与 https 的区别</h4><table><thead><tr><th>类型</th><th>原理</th><th>功能 （数据加密）</th><th>性能（安全性）</th><th>标准端口</th><th>CA证书</th><th>URL 开头</th></tr></thead><tbody><tr><td>HTTP</td><td>应用层</td><td>不加密（明文传输）</td><td>不安全</td><td>80</td><td>不需</td><td>http://</td></tr><tr><td>HTTPS</td><td>传输层</td><td>加密（SSL加密，身份认证）</td><td>安全</td><td>443</td><td>需要</td><td>https://</td></tr></tbody></table><p>http 是超文本传输协议，信息是明文传递；<br><br>https 是具有安全性的ssl加密传输协议，保证交换数据的隐私与完整性。<br></p><h4 id="http-和-https-网络分层与对比"><a href="#http-和-https-网络分层与对比" class="headerlink" title="http 和 https 网络分层与对比"></a>http 和 https 网络分层与对比</h4><table><thead><tr><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>HTTP - 应用层</td><td>HTTP - 应用层</td></tr><tr><td></td><td>TSL/SSL - 安全层</td></tr><tr><td>TCP - 传输层</td><td>TCP - 传输层</td></tr><tr><td>IP - 网络层</td><td>IP - 网络层</td></tr><tr><td>网络接口 - 数据链路层</td><td>网络接口 - 数据链路层</td></tr></tbody></table><br><table><thead><tr><th>HTTPS</th><th>备注</th></tr></thead><tbody><tr><td>HTTP - 应用层</td><td></td></tr><tr><td>TSL/SSL - 安全层</td><td></td></tr><tr><td>TCP - 传输层</td><td></td></tr><tr><td>IP - 网络层</td><td></td></tr><tr><td>网络接口 - 数据链路层</td><td></td></tr></tbody></table><br><!-- ![image](./img/material_edittext.gif) --><h4 id="TCP-IP-协议族-四层模型"><a href="#TCP-IP-协议族-四层模型" class="headerlink" title="TCP/IP 协议族 四层模型"></a>TCP/IP 协议族 四层模型</h4><p>为什么要分层？<br>因为网络不稳定，或者数据比较大（）对数据切块，所以需要分层。<br><br></p><table><thead><tr><th>HTTP</th><th>备注</th></tr></thead><tbody><tr><td>HTTP - 应用层</td><td>上层发数据</td></tr><tr><td>TCP - 传输层</td><td>传东西，保证网络的稳定传输，专门只做包的分发（TCP 、UDP 都有网络的需求，所以需要再分一层），或者也可以说 拆包</td></tr><tr><td>IP - 网络层</td><td>用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。解析地址寻址、路由、找路由器等</td></tr><tr><td>网络接口 - 数据链路层</td><td>往目标地址传输数据，就是我们实际的网络（以太网、wifi）；链路层也可分为数据链路层、物理链路层（网线、交换机）。</td></tr><tr><td><br></td><td></td></tr></tbody></table><p><a href="https://blog.csdn.net/weixin_41907291/article/details/83821222" target="_blank" rel="noopener">举一个例子:</a></p><blockquote><p>我们用 HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个Web 页面的HTTP 请求。接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。在网络层（IP 协议），增加作为通信目的地的 MAC 地址(media access control address 媒体通过控制地址,也称局域网地址,MAC地址用于在网络中唯一标示一个网卡，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。)后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的HTTP请求。</p></blockquote><br><h4 id="TCP-与-UDP-的区别？"><a href="#TCP-与-UDP-的区别？" class="headerlink" title="TCP 与 UDP 的区别？"></a>TCP 与 UDP 的区别？</h4><p>Tcp 面向连接，提供可靠的传输； UDP面向无连接，提供不可靠传输<br><br>Tcp 提供流量控制 ； UDP不提供流量控制<br><br>Tcp 保证传输数据顺序 ； UDP不保证传输顺序，也就是可能是乱序收包<br><br>TCP 面向字节流 ； UDP 面向数据包<br><br>补充：<br><br>TCP传输控制协议，一种传输层的通信协议<br><br>UDP用户数据报协议，一种传输层通信协议<br><br>TCP面向连接，UDP是无连接的<br><br>TCP提供可靠的服务，通过TCP传输的数据无差错，不丢失，不重复且按序到达；UDP不保证可靠交付<br><br>TCP面向字节流；UDP面向报文<br><br>TCP连接只能点对点；UDP支持一对一，一对多，多对一和多对多的通信<br><br>TCP首部开销20字节；UDP首部开销8字节<br><br>TCP的逻辑通道是全双工的可靠信道；UDP是不可靠信道<br></p><h4 id="http1-0，http1-1和http2-0的区别？"><a href="#http1-0，http1-1和http2-0的区别？" class="headerlink" title="http1.0，http1.1和http2.0的区别？"></a>http1.0，http1.1和http2.0的区别？</h4><blockquote><p>原文链接:<a href="http://blog.51cto.com/12118369/1962662" target="_blank" rel="noopener">http://blog.51cto.com/12118369/1962662</a></p></blockquote><h5 id="HTTP1-0-HTTP-1-1-主要区别"><a href="#HTTP1-0-HTTP-1-1-主要区别" class="headerlink" title="HTTP1.0 HTTP 1.1 主要区别"></a>HTTP1.0 HTTP 1.1 主要区别</h5><p>长连接<br><br>HTTP 1.0 需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接。<br><br>HTTP是基于TCP/IP协议的，创建一个TCP连接是需要经过三次握手的,有一定的开销，如果每次通讯都要重新建立连接的话，对性能有影响。因此最好能维持一个长连接，可以用个长连接来发多个请求。<br></p><p>节约带宽<br><br>HTTP 1.1 支持只发送header信息(不带任何body信息)，如果服务器认为客户端有权限请求服务器，则返回100，否则返回401。客户端如果接受到100，才开始把请求body发送到服务器。<br></p><p>这样当服务器返回401的时候，客户端就可以不用发送请求body了，节约了带宽。<br><br>另外HTTP还支持传送内容的一部分。这样当客户端已经有一部分的资源后，只需要跟服务器请求另外的部分资源即可。这是支持文件断点续传的基础。<br></p><p>HOST域<br><br>现在可以web server例如tomat，设置虚拟站点是非常常见的，也即是说，web server上的多个虚拟站点可以共享同一个ip和端口。<br></p><p>HTTP1.0是没有host域的，HTTP1.1才支持这个参数。<br></p><h5 id="HTTP1-1-HTTP-2-0主要区别"><a href="#HTTP1-1-HTTP-2-0主要区别" class="headerlink" title="HTTP1.1 HTTP 2.0主要区别"></a>HTTP1.1 HTTP 2.0主要区别</h5><p>多路复用<br><br>HTTP2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。<br><br>当然HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，但是创建TCP连接本身也是有开销的。<br><br>TCP连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。<br><br>关于多路复用，可以参看学习NIO 。<br></p><p>数据压缩<br><br>HTTP1.1 不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快。<br></p><p>服务器推送<br><br>意思是说，当我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。<br><br>服务器端推送的这些资源其实存在客户端的某处地方，客户端直接从本地加载这些资源就可以了，不用走网络，速度自然是快很多的。<br></p><p>总结：</p><ul><li>HTTP1.0 需要使用keep-alive参数来告知服务器端要建立一个长连接，而HTTP1.1默认支持长连接；</li><li>http1.1 支持只发送header，服务器返回100再发送请求 body，节省宽带流量；</li><li>http1.1 断点续传；</li><li>HTTP1.0 是没有host域的，HTTP1.1 才支持这个参数；（host 字段指定对应的虚拟站点）</li><li>HTTP2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级；</li><li>HTTP1.1 不支持header数据的压缩，HTTP2.0 使用HPACK算法对header的数据进行压缩，这样数据体积小了，在网络上传输就会更快；</li><li>HTTP2.0 支持服务端推送</li></ul><h3 id="浏览器输入地址到返回结果发生了什么？"><a href="#浏览器输入地址到返回结果发生了什么？" class="headerlink" title="浏览器输入地址到返回结果发生了什么？"></a>浏览器输入地址到返回结果发生了什么？</h3><p>DNS域名解析<br><br>建立TCP连接<br><br>发送HTTP请求<br><br>服务器处理 HTTP 请求并返回响应报文<br><br>关闭TCP连接<br><br>浏览器解析HTML<br><br>浏览器渲染布局界面<br></p><h3 id="Get-和-Post-区别？"><a href="#Get-和-Post-区别？" class="headerlink" title="Get 和 Post 区别？"></a>Get 和 Post 区别？</h3><p>Get 与 post 都是HTTP协议中两种发送请求的方法<br><br>Get 参数通过URL传递，post放在 Request body 中<br><br>Get 参数直接暴露在URL中，不能传递敏感信息，不安全<br><br>Get 对参数类型，长度，编码都有限制，post 没有<br><br>Get 产生一个TCP数据包，post产生两个TCP数据包<br></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父母是我们和死神之间的一堵墙</title>
      <link href="/2ef5.html"/>
      <url>/2ef5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>父母是我们和死神之间的一堵墙<a id="more"></a>，感觉视频说的挺现实的…</p></blockquote><br><!-- <img src="/img/git.png" width = "900" height = "600" alt="git" align=center /> --><video src='/video/life.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video>]]></content>
      
      
      <categories>
          
          <category> 视频推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频推荐 </tag>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员必备翻墙技能之 Shadowsocks 的使用</title>
      <link href="/1829.html"/>
      <url>/1829.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为一名合格的程序员，能够在日常开发过程中在使用搜索引擎时提高搜索效率，大家都会选择使用 Google<a id="more"></a>，但是因为诸多原因被限制，今天就给大家推荐一个性价比极高的翻墙工具，当然如果个人有时间和能力的话，可以自己搭建一个…</p></blockquote><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><h4 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h4><p>一流的安全性和加密，并且覆盖所有操作系统（Windows、Mac OS X、 Linux、Android、ios、OpenWRT），<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">下载地址</a></p><p>Mac 的界面大致如下图，其他操作系统的可以在 <a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">Github</a> 上自行研究。</p><p><img src="/img/blog/tools/shadowsocks.jpg" alt="image"></p><h4 id="Shadowsocks-官方服务购买"><a href="#Shadowsocks-官方服务购买" class="headerlink" title="Shadowsocks 官方服务购买"></a>Shadowsocks 官方服务购买</h4><p>客户端下载完后，需要购买他们的服务，他们的产品连接 <a href="https://order.shadowsocks.nl/aff.php?aff=22722" target="_blank" rel="noopener"><strong>Shadowsocks</strong></a>，打开后应该可以看到他们的服务购买入口</p><p><img src="/img/blog/tools/buy.jpg" alt="image"></p><p>根据自己的需求选择适合自己的种类就行购买，个人推荐使用性价比最高的是云加速服务里的入门版本，主要是价格便宜啊，19.95 AUD/年，约合 94.3914 元人民币，比我之前用的便宜多了。另外每个月 50G 流量，次月清零，重新计算，其实使劲儿用一半都用不上。而且在 YouTube 上看视频也不卡呦，另外告诉大家一个小秘密，入门版上写着仅支持 1 台设备同时连接，实际上你可以巧妙的绕开呦，在这里就不多说了。</p><p><img src="/img/blog/tools/type.png" alt="image"></p><h4 id="Shadowsocks-参数配置"><a href="#Shadowsocks-参数配置" class="headerlink" title="Shadowsocks 参数配置"></a>Shadowsocks 参数配置</h4><p>因为各个平台包括版本不同，配置方式可能也会多少有些差异，有不明白的可以在上面提到的 Github 上找一下，或者看下社区论坛，总会找到解决办法的，在这里就简单说下 Mac 上的配置。</p><p>购买后的页面长这样</p><p><img src="/img/blog/tools/deploy_home.png" alt="image"></p><p>点击列表里的 云加速服务 - 入门版，进入管理入门版界面，会看到自己的注册日期、续约价格、账单周期等信息，在这里主要说下快速配置。</p><p><img src="/img/blog/tools/deploy_detail.png" alt="image"></p><p>界面往下滑可以看到类似上图的信息，点击右侧的二维码图片会显示一个二维码，别急关闭，此时点击电脑上安装的 Shadowsocks，右键或者怎么打开操作菜单，Mac 的长这样</p><p><img src="/img/blog/tools/scan.png" alt="image"></p><p>点击扫描屏幕上的二维码，稍等一两秒，Shadowsocks 就已经自动帮你配置好了，可以点开 Shadowsocks 菜单里的 服务器配置 进行查看刚才的配置信息，当然你也可以自己手动配置，在这里就不介绍了，自行研究。</p><p>一切就绪后，就可以愉快的玩耍啦~</p><p><a href="https://www.google.com.hk" target="_blank" rel="noopener"><img src="/img/blog/tools/google.png" alt="image"></a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> Google </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava2.0 学习笔记 - 同步和异步的理解和认识</title>
      <link href="/43e5.html"/>
      <url>/43e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="RxJava2-0-同步、异步"><a href="#RxJava2-0-同步、异步" class="headerlink" title="RxJava2.0 同步、异步"></a>RxJava2.0 同步、异步</h1><p>本文并非原创，通过各位博主博客学习后总结而得，以方便自己学习，在此感谢各位前辈，并在下面注明出处。</p><h2 id="RxJava-同步"><a href="#RxJava-同步" class="headerlink" title="RxJava 同步"></a>RxJava 同步</h2><p>当上下游工作在同一个线程中时, 这时候是一个同步的订阅关系, 也就是说上游每发送一个事件必须等到下游接收处理完了以后才能接着发送下一个事件。</p><p><img src="./img/blog/rxjava/synchronize.png" alt="map"></p><h2 id="RxJava-异步"><a href="#RxJava-异步" class="headerlink" title="RxJava 异步"></a>RxJava 异步</h2><p>当上下游工作在不同的线程中时, 这时候是一个异步的订阅关系, 这个时候上游发送数据不需要等待下游接收, 为什么呢, 因为两个线程并不能直接进行通信, 因此上游发送的事件并不能直接到下游里去, 这个时候就需要一个田螺姑娘来帮助它们俩, 这个田螺姑娘就是水缸 ! 上游把事件发送到水缸里去, 下游从水缸里取出事件来处理,  因此, 当上游发事件的速度太快, 下游取事件的速度太慢, 水缸就会迅速装满, 然后溢出来, 最后就 OOM 了。</p><p><img src="./img/blog/rxjava/asynchronous.png" alt="map"></p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;                            </span><br><span class="line">    @Override                                                                       </span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;    </span><br><span class="line">        for (int i = 0; ; i++) &#123;    //无限循环发事件                                                     </span><br><span class="line">            emitter.onNext(i);                                                      </span><br><span class="line">        &#125;                                                                           </span><br><span class="line">    &#125;                                                                               </span><br><span class="line">&#125;).subscribeOn(Schedulers.io())                                                    </span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())                                  </span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;                                        </span><br><span class="line">            @Override                                                               </span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;                  </span><br><span class="line">                Thread.sleep(2000);                                                 </span><br><span class="line">                Log.d(TAG, &quot;&quot; + integer);                                           </span><br><span class="line">            &#125;                                                                       </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这个就是上面解释的，上游发送的所有事件都放到水缸里了, 所以瞬间水缸就满了，就直接 Throwing OutOfMemoryError 掉了。</p><h2 id="同步、异步区别"><a href="#同步、异步区别" class="headerlink" title="同步、异步区别"></a>同步、异步区别</h2><p>从上面两图中我们可以看出, 同步和异步的区别仅仅在于是否有 <code>水缸</code>。源头找到了, 只要有 <code>水缸</code>, 就会出现上下游发送事件速度不平衡的情况, 因此当我们以后遇到这种情况时, 仔细思考一下水缸在哪里, 找到水缸, 你就找到了解决问题的办法。</p><h2 id="避免-OOM-的几种有效果方案"><a href="#避免-OOM-的几种有效果方案" class="headerlink" title="避免 OOM 的几种有效果方案"></a>避免 OOM 的几种有效果方案</h2><p>查看效率可以在 studio 中执行代码，然后打开 Android Monitor 或 Profiler，查看内存曲线，查看差异</p><h3 id="上游不限制，下游控制延迟"><a href="#上游不限制，下游控制延迟" class="headerlink" title="上游不限制，下游控制延迟"></a>上游不限制，下游控制延迟</h3><p>这段代码很简单, 上游同样无限循环的发送事件, 在下游每次接收事件前延时2秒. 上下游工作在同一个线程里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;                         </span><br><span class="line">    @Override                                                                    </span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123; </span><br><span class="line">        for (int i = 0; ; i++) &#123;   //无限循环发事件                                              </span><br><span class="line">            emitter.onNext(i);                                                   </span><br><span class="line">        &#125;                                                                        </span><br><span class="line">    &#125;                                                                            </span><br><span class="line">&#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;                                           </span><br><span class="line">    @Override                                                                    </span><br><span class="line">    public void accept(Integer integer) throws Exception &#123;                       </span><br><span class="line">        Thread.sleep(2000);                                                      </span><br><span class="line">        Log.d(TAG, &quot;&quot; + integer);                                                </span><br><span class="line">    &#125;                                                                            </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="上游控制数据量"><a href="#上游控制数据量" class="headerlink" title="上游控制数据量"></a>上游控制数据量</h3><p>那我们可以只放我们需要的事件到水缸里呀, 只放一部分数据到水缸里, 这样不就不会溢出来了么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">                for (int i = 0; ; i++) &#123;</span><br><span class="line">                    emitter.onNext(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribeOn(Schedulers.io())</span><br><span class="line">                .filter(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                        return integer % 10 == 0;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        Log.d(TAG, &quot;&quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>在这段代码中我们增加了一个filter, 只允许能被10整除的事件通过。<br>可以看到, 通过减少进入水缸的事件数量的确可以<code>有效缓解</code>上下游流速不均衡的问题, 但是力度还不是特别够。</p><h3 id="通过-sample-操作符"><a href="#通过-sample-操作符" class="headerlink" title="通过 sample 操作符"></a>通过 sample 操作符</h3><p>sample 操作符, 这个操作符每隔指定的时间就从上游中取出一个事件发送给下游。<br>下面修改代码每隔 2 秒取一个事件给下游：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">        for (int i = 0; ; i++) &#123;</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.io())</span><br><span class="line">        /*sample取样*/</span><br><span class="line">        .sample(2, TimeUnit.SECONDS)  </span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                Log.d(TAG, &quot;&quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>通过查看曲线变化可以看到, 虽然上游仍然一直在不停的发事件, 但是我们只是每隔一定时间取一个放进水缸里, 并没有全部放进水缸里, 因此这种操作内存占有率也是很低的。<br>第二、三这两种方法归根到底其实就是减少放进水缸的事件的数量, 是以数量取胜的。但是这个方法有个缺点, 就是丢失了大部分的事件。</p><h3 id="减慢上游发送事件的速度"><a href="#减慢上游发送事件的速度" class="headerlink" title="减慢上游发送事件的速度"></a>减慢上游发送事件的速度</h3><p>既然上游发送事件的速度太快, 那我们就适当减慢发送事件的速度, 从速度上取胜。<br>举栗：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">                for (int i = 0; ; i++) &#123;</span><br><span class="line">                    emitter.onNext(i);</span><br><span class="line">                    Thread.sleep(2000);  //每次发送完事件延时2秒</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        Log.d(TAG, &quot;&quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>上游每次发送完事件后都延时了 2 秒。查看 Profiler 内存曲线是平滑的，而且事件也没有丢失，上游通过适当的延时，不但减缓了事件进入水缸的速度，也可以让下游有充足的时间从水缸里取出事件来处理，这样一来, 就不至于导致大量的事件涌进水缸，也就不会OOM啦。</p><p>到目前为止, 我们没有依靠任何其他的工具, 就轻易解决了上下游流速不均衡的问题。</p><p>总结一下, 上面提到的治理办法就两种:</p><ul><li>从数量上进行治理, 减少发送进水缸里的事件。</li><li>从速度上进行治理, 减缓事件发送进水缸的速度。</li></ul><p>以上的学习，让我对如何处理上下游流速不均衡已经有了基本的认识了。<br>Flowable 虽然也可以实现，但是这里并没有使用 Flowable, 所以很多时候仔细去分析问题, 找到问题的原因, 从源头去解决才是最根本的办法。<br>Flowable，其实没什么神秘的, 它用到的办法和上面所讲的基本上是一样的, 只是它稍微做了点封装。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava2.0 学习笔记 - 常见操作符的使用</title>
      <link href="/32d4.html"/>
      <url>/32d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="RxJava2-0-操作符"><a href="#RxJava2-0-操作符" class="headerlink" title="RxJava2.0 操作符"></a>RxJava2.0 操作符</h1><p>本文并非原创，通过各位博主博客学习后总结而得，以方便自己学习，在此感谢各位前辈，并在下面注明出处。</p><h2 id="操作符目录"><a href="#操作符目录" class="headerlink" title="操作符目录"></a>操作符目录</h2><ul><li><a href="#map"><code>map</code></a></li><li><a href="#flatMap"><code>flatMap</code></a></li><li><a href="#concatMap"><code>concatMap</code></a></li><li><a href="#zip"><code>zip</code></a></li><li><a href="#说明"><code>说明</code></a></li></ul><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 是 RxJava 中最简单的一个变换操作符, 它的作用就是对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化。用下面图表示：</p><p><img src="./img/blog/rxjava/map.png" alt="map"></p><p>图中 map 中的函数作用是将圆形事件转换为矩形事件, 从而导致下游接收到的事件就变为了矩形。用代码来表示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception &#123;</span><br><span class="line">        emitter.onNext(&quot;234&quot;);</span><br><span class="line">        emitter.onNext(&quot;678&quot;);</span><br><span class="line">        emitter.onNext(&quot;456&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).map(new Function&lt;String, Float&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Float apply(String string) throws Exception &#123;</span><br><span class="line">        return Float.valueOf(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(new Consumer&lt;Float&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Float aFloat) throws Exception &#123;</span><br><span class="line">        mRxOperatorsText.append(&quot;accept : &quot; + aFloat + &quot;\n&quot;);</span><br><span class="line">        Log.e(TAG, &quot;accept : &quot; + aFloat + &quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上游我们发送的是 String 类型, 而在下游我们接收的是 Float 类型, 中间起转换作用的就是 map 操作符, 运行结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: accept : 234.0</span><br><span class="line">E/RxUsage: accept : 678.0</span><br><span class="line">E/RxUsage: accept : 456.0</span><br></pre></td></tr></table></figure><p>通过 map, 可以将上游发来的事件转换为任意的类型, 可以是一个Object, 也可以是一个集合。</p><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p><code>flatMap</code> 将一个发送事件的上游 Observable 变换为多个发送事件的 Observables，然后将它们发射的事件合并后放进一个单独的 Observable 里。</p><blockquote><p>但有个需要注意的是，flatMap 并不能保证事件的顺序，如果需要保证顺序，需要用到下面提到的 ConcatMap。</p></blockquote><p><img src="./img/blog/rxjava/flatMap.png" alt="flatMap.png"></p><p>中间flatMap的作用是将圆形的事件转换为一个发送矩形事件和三角形事件的新的上游Observable.</p><p>看看分解动作：</p><p><img src="./img/blog/rxjava/flatMap_.png" alt="flatMap.png"></p><p>上游每发送一个事件，flatMap 都将创建一个新的水管, 然后发送转换之后的新的事件，下游接收到的就是这些新的水管发送的数据。这里需要注意的是，flatMap 并不保证事件的顺序，也就是图中所看到的，并不是事件 1 就固定在事件 2 的前面。如果需要保证顺序则需要使用 concatMap。</p><p>代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">        emitter.onNext(1);</span><br><span class="line">        emitter.onNext(2);</span><br><span class="line">        emitter.onNext(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).flatMap(new Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ObservableSource&lt;String&gt; apply(Integer integer) throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            list.add(&quot;I am value &quot; + integer);</span><br><span class="line">        &#125;</span><br><span class="line">        int delayTime = (int) (1 + Math.random() * 10);</span><br><span class="line">        return Observable.fromIterable(list).delay(delayTime, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s) throws Exception &#123;</span><br><span class="line">                // 这个打印出来是不完整的，偶尔会丢失数据！！！</span><br><span class="line">                // 有人说 Android8.0和Android9.0 兼容性有问题了，使用 flatmap，下游无法接收到全部的消息</span><br><span class="line">                // 还未验证 ！！！</span><br><span class="line">                Log.e(TAG, &quot;flatMap : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">                //这个打印出来是完整的，下游不会丢失数据</span><br><span class="line">                mRxOperatorsText.append(&quot;stringBuffer flatMap : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">                Log.e(TAG, mRxOperatorsText.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>多次打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: flatMap : accept : I am value 1</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 1</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 3</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 3</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 2</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 3</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 2</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: flatMap : accept : I am value 1</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 1</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 2</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 2</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 3</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 3</span><br><span class="line">E/RxUsage: flatMap : accept : I am value 3</span><br></pre></td></tr></table></figure><p>看了很多博客，显示的结果 1-3 都是完整循环多次后打印出来的，如这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D/TAG: I am value 1</span><br><span class="line">D/TAG: I am value 1</span><br><span class="line">D/TAG: I am value 1</span><br><span class="line">D/TAG: I am value 3</span><br><span class="line">D/TAG: I am value 3</span><br><span class="line">D/TAG: I am value 3</span><br><span class="line">D/TAG: I am value 2</span><br><span class="line">D/TAG: I am value 2</span><br><span class="line">D/TAG: I am value 2</span><br></pre></td></tr></table></figure><p>不过当使用 StringBuffer append 后结果是正常的，详细可查看代码 <a href="https://github.com/leaderliang/RxJavaProject/blob/150273c7a6697bd8c08be8bacb24027397bd9336/app/src/main/java/com/android/rxjavaproject/RxUsage.java" target="_blank" rel="noopener">RxUsage/testFlatMap</a> 有网友评论说是和手机版本有关系，还待验证…，回头验证一下！！！？？？ </p><h3 id="flatMap-在项目中的实践"><a href="#flatMap-在项目中的实践" class="headerlink" title="flatMap 在项目中的实践"></a>flatMap 在项目中的实践</h3><p>主要用于解决 <code>嵌套请求</code> 问题。</p><p>举一个是实际的例子，如果是一个新用户, 必须先注册, 等注册成功之后再去自动登录；这是一个嵌套的网络请求, 首先需要去请求注册, 待注册成功回调了再去请求登录的接口。</p><p>接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface Api &#123;</span><br><span class="line">    @GET</span><br><span class="line">    Observable&lt;LoginResponse&gt; login(@Body LoginRequest request);</span><br><span class="line"></span><br><span class="line">    @GET</span><br><span class="line">    Observable&lt;RegisterResponse&gt; register(@Body RegisterRequest request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到登录和注册返回的都是一个上游 Observable, 而 flatMap 操作符的作用就是把一个 Observable 转换为另一个 Observable。</p><p>链式代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">api.register(new RegisterRequest())            //发起注册请求</span><br><span class="line">        .subscribeOn(Schedulers.io())               //在IO线程进行网络请求</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())  //回到主线程去处理请求注册结果</span><br><span class="line">        .doOnNext(new Consumer&lt;RegisterResponse&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(RegisterResponse registerResponse) throws Exception &#123;</span><br><span class="line">                /*先根据注册的响应结果去做一些操作*/</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(Schedulers.io())                 //回到IO线程去发起登录请求</span><br><span class="line">        .flatMap(new Function&lt;RegisterResponse, ObservableSource&lt;LoginResponse&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource&lt;LoginResponse&gt; apply(RegisterResponse registerResponse) throws Exception &#123;</span><br><span class="line">                return api.login(new LoginRequest());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())  //回到主线程去处理请求登录的结果</span><br><span class="line">        .subscribe(new Consumer&lt;LoginResponse&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(LoginResponse loginResponse) throws Exception &#123;</span><br><span class="line">                Toast.makeText(MainActivity.this, &quot;登录成功&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line">                Toast.makeText(MainActivity.this, &quot;登录失败&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>再次补充：</p><blockquote><p><code>subscribeOn()</code> 指定的是上游发送事件的线程;<br><code>observeOn()</code> 指定的是下游接收事件的线程;<br>多次指定 <code>上游</code> 的线程只有第一次指定的有效, 也就是说多次调用 subscribeOn() 只有<code>第一次的有效</code>, 其余的会被忽略；<br>多次指定 <code>下游</code> 的线程是可以的, 也就是说每调用一次 observeOn() , <code>下游的线程就会切换一次</code>。</p></blockquote><h2 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap"></a>concatMap</h2><p>它和 flatMap 的作用几乎一模一样, 只是它的结果是严格按照上游发送的顺序来发送的, 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).concatMap(new Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ObservableSource&lt;String&gt; apply(@NonNull Integer integer) throws Exception &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            list.add(&quot;I am value &quot; + integer);</span><br><span class="line">        &#125;</span><br><span class="line">        int delayTime = (int) (1 + Math.random() * 10);</span><br><span class="line">        return Observable.fromIterable(list).delay(delayTime, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.newThread())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(@NonNull String s) throws Exception &#123;</span><br><span class="line">                Log.e(TAG, &quot;concatMap : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;concatMap : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: concatMap : accept : I am value 1</span><br><span class="line">E/RxUsage: concatMap : accept : I am value 1</span><br><span class="line">E/RxUsage: concatMap : accept : I am value 2</span><br><span class="line">E/RxUsage: concatMap : accept : I am value 2</span><br><span class="line">E/RxUsage: concatMap : accept : I am value 3</span><br><span class="line">E/RxUsage: concatMap : accept : I am value 3</span><br></pre></td></tr></table></figure><p>结果是有序的，但是没有打印循环三次的结果？？？需要再查一下原因，更新到博客里。</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip 通过一个函数将多个 Observable 发送的事件结合到一起，然后发送这些组合到一起的事件。<br>它按照严格的顺序应用这个函数。<br>它只发射与发射数据项最少的那个 Observable 一样多的数据。</p><p><img src="./img/blog/rxjava/zip.png" alt="map"></p><p>从这个图中可以看见, 这次上游和以往不同的是, 有两根水管啦。<br>其中一根水管负责发送圆形事件, 另外一根水管负责发送三角形事件, 通过 zip 操作符, 使得圆形事件和三角形事件合并为了一个矩形事件。</p><p>分解动作：</p><p><img src="./img/blog/rxjava/zip_.png" alt="map"></p><p>分解动作解析：<br>组合的过程是分别从 两根水管里各取出一个事件 来进行组合, 并且一个事件只能被使用一次, 组合的顺序是严格按照事件发送的顺利 来进行的, 也就是说不会出现圆形 1 事件和三角形 B 事件进行合并, 也不可能出现圆形 2 和三角形 A 进行合并的情况。</p><p>最终下游收到的事件数量<code>是和上游中发送事件最少的那一根水管的事件数量</code>相同。这个也很好理解, 因为是从每一根水管里<code>取一个事件来进行合并</code>, 最少的那个肯定就<code>最先取完</code>, 这个时候其他的水管尽管还有事件 , 但是已经没有足够的事件来组合了, 因此下游就不会收到剩余的事件了。</p><p>代码演示下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * zip 组合事件的过程就是分别从发射器 A 和发射器 B 各取出一个事件来组合，并且一个事件只能被使用一次，</span><br><span class="line">    * 组合的顺序是严格按照事件发送的顺序来进行的，所以上面截图中，可以看到，1 永远是和 A 结合的，2 永远是和 B 结合的。</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 最终接收器收到的事件数量是和发送器发送事件最少的那个发送器的发送事件数目相同, getStringObservable()发送器发的事件数目最少.</span><br><span class="line">    */</span><br><span class="line">public static void testZip() &#123;</span><br><span class="line">    Observable.zip(getIntegerObservable(), getStringObservable(), new BiFunction&lt;Integer, String, String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String apply(@NonNull Integer integer, @NonNull String s) throws Exception &#123;</span><br><span class="line">            Log.e(TAG, &quot;s + integer : &quot; + s + integer + &quot;\n&quot;);</span><br><span class="line">            return s + integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(@NonNull String s) throws Exception &#123;</span><br><span class="line">            mRxOperatorsText.append(&quot;zip : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">            Log.e(TAG, &quot;zip : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Observable&lt;String&gt; getStringObservable() &#123;</span><br><span class="line">    return Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(@NonNull ObservableEmitter&lt;String&gt; e) throws Exception &#123;</span><br><span class="line">            if (!e.isDisposed()) &#123;</span><br><span class="line">                e.onNext(&quot;A&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;String emit : A \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getStringObservable --&gt; String emit : A \n&quot;);</span><br><span class="line">                e.onNext(&quot;B&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;String emit : B \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getStringObservable --&gt; String emit : B \n&quot;);</span><br><span class="line">                e.onNext(&quot;C&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;String emit : C \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getStringObservable --&gt; String emit : C \n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Observable&lt;Integer&gt; getIntegerObservable() &#123;</span><br><span class="line">    return Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">            if (!e.isDisposed()) &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 1 \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 1 \n&quot;);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 2 \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 2 \n&quot;);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 3 \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 3 \n&quot;);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 4 \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 4 \n&quot;);</span><br><span class="line">                e.onNext(5);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 5 \n&quot;);</span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 5 \n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果，log 日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: getIntegerObservable --&gt; Integer emit : 1 </span><br><span class="line">E/RxUsage: getIntegerObservable --&gt; Integer emit : 2 </span><br><span class="line">E/RxUsage: getIntegerObservable --&gt; Integer emit : 3 </span><br><span class="line">E/RxUsage: getIntegerObservable --&gt; Integer emit : 4 </span><br><span class="line">E/RxUsage: getIntegerObservable --&gt; Integer emit : 5 </span><br><span class="line">E/RxUsage: s + integer : A1</span><br><span class="line">E/RxUsage: zip : accept : A1</span><br><span class="line">E/RxUsage: getStringObservable --&gt; String emit : A </span><br><span class="line">E/RxUsage: s + integer : B2</span><br><span class="line">E/RxUsage: zip : accept : B2</span><br><span class="line">E/RxUsage: getStringObservable --&gt; String emit : B </span><br><span class="line">E/RxUsage: s + integer : C3</span><br><span class="line">E/RxUsage: zip : accept : C3</span><br><span class="line">E/RxUsage: getStringObservable --&gt; String emit : C</span><br></pre></td></tr></table></figure><p>一开始看到这个日志，我自己也有很多疑问，比如为什么感觉是水管一（getIntegerObservable） 发送完了之后, 水管二（getStringObservable）才开始发送呢？？</p><p>因为我们两根水管都是运行在同一个线程里, 同一个线程里执行代码肯定有先后顺序的。因此我们来稍微改一下, 不让他们在同一个线程，为了效果更明显，需要添加延迟 <code>Thread.sleep(1000);</code> , 试试效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">public static void testZip() &#123;</span><br><span class="line">    Observable.zip(getIntegerObservable(), getStringObservable(), new BiFunction&lt;Integer, String, String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String apply(@NonNull Integer integer, @NonNull String s) throws Exception &#123;</span><br><span class="line">            Log.e(TAG, &quot;s + integer : &quot; + s + integer + &quot;\n&quot;);</span><br><span class="line">            return s + integer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(@NonNull String s) throws Exception &#123;</span><br><span class="line">            mRxOperatorsText.append(&quot;zip : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">            Log.e(TAG, &quot;zip : accept : &quot; + s + &quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">private static Observable&lt;String&gt; getStringObservable() &#123;</span><br><span class="line">    return Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(@NonNull ObservableEmitter&lt;String&gt; e) throws Exception &#123;</span><br><span class="line">            if (!e.isDisposed()) &#123;</span><br><span class="line">                Log.e(TAG, &quot;getStringObservable --&gt; String emit : A \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;String emit : A \n&quot;);</span><br><span class="line">                e.onNext(&quot;A&quot;);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getStringObservable --&gt; String emit : B \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;String emit : B \n&quot;);</span><br><span class="line">                e.onNext(&quot;B&quot;);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getStringObservable --&gt; String emit : C \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;String emit : C \n&quot;);</span><br><span class="line">                e.onNext(&quot;C&quot;);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;e getStringObservable onComplete&quot;);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribeOn(Schedulers.io());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static Observable&lt;Integer&gt; getIntegerObservable() &#123;</span><br><span class="line">    return Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(@NonNull ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">            if (!e.isDisposed()) &#123;</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 1 \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 1 \n&quot;);</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 2 \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 2 \n&quot;);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 3 \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 3 \n&quot;);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 4 \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 4 \n&quot;);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;getIntegerObservable --&gt; Integer emit : 5 \n&quot;);</span><br><span class="line">                mRxOperatorsText.append(&quot;Integer emit : 5 \n&quot;);</span><br><span class="line">                e.onNext(5);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, &quot;e getIntegerObservable onComplete&quot;);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribeOn(Schedulers.io());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在展示打印结果之前，上面的操作会报下面这个异常。</p><p>异常打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">W/System.err: io.reactivex.exceptions.UndeliverableException: The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with. Further reading: https://github.com/ReactiveX/RxJava/wiki/What&apos;s-different-in-2.0#error-handling | java.lang.InterruptedException</span><br><span class="line">W/System.err:     at io.reactivex.plugins.RxJavaPlugins.onError(RxJavaPlugins.java:367)</span><br><span class="line">W/System.err:     at io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onError(ObservableCreate.java:73)</span><br><span class="line">W/System.err:     at io.reactivex.internal.operators.observable.ObservableCreate.subscribeActual(ObservableCreate.java:43)</span><br><span class="line">W/System.err:     at io.reactivex.Observable.subscribe(Observable.java:12267)</span><br><span class="line">W/System.err:     at io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeTask.run(ObservableSubscribeOn.java:96)</span><br><span class="line">W/System.err:     at io.reactivex.Scheduler$DisposeTask.run(Scheduler.java:578)</span><br><span class="line">W/System.err:     at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66)</span><br><span class="line">W/System.err:     at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)</span><br><span class="line">W/System.err:     at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">W/System.err:     at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:301)</span><br><span class="line">W/System.err:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)</span><br><span class="line">W/System.err:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)</span><br><span class="line">W/System.err:     at java.lang.Thread.run(Thread.java:764)</span><br><span class="line">W/System.err: Caused by: java.lang.InterruptedException</span><br><span class="line">W/System.err:     at java.lang.Thread.sleep(Native Method)</span><br><span class="line">W/System.err:     at java.lang.Thread.sleep(Thread.java:373)</span><br><span class="line">W/System.err:     at java.lang.Thread.sleep(Thread.java:314)</span><br><span class="line">W/System.err:     at com.android.rxjavaproject.RxUsage$28.subscribe(RxUsage.java:458)</span><br><span class="line">W/System.err:     at io.reactivex.internal.operators.observable.ObservableCreate.subscribeActual(ObservableCreate.java:40)</span><br><span class="line">W/System.err: ... 10 more</span><br></pre></td></tr></table></figure><p>解决方法是把 <code>Thread.sleep()</code> 替换为 <code>SystemClock.sleep()</code>，下面展示打印结果。</p><p>修改后的 gif 打印：(gif 更新与 2019 年…)</p><p><img src="./img/blog/rxjava/zip_sleep.gif" alt="zip"></p><p>使用 Thread.sleep() 时候，可能细心点的朋友又看出端倪了, getIntegerObservable 这个水管明明发送了五条个数据 + 一个 Complete, 之前不加 Thread.sleep() 明明还有的, 为啥到这里没了呢?</p><p>这是因为 zip 发送的事件数量跟上游中发送事件最少的那一根水管的事件数量是有关的, 在这个例子里我们getStringObservable 这根水管只发送了三个事件然后就发送了Complete, 这个时候尽管另外一根水管还有事件4、5 onComplete 没有发送, 但是它们发不发送还有什么意义呢?下游的打印输出里也不会输出的！</p><p>另外使用 SystemClock.sleep() 的时候，getIntegerObservable 水管中的事件 4、5 和 onComplete 也都打印了，但是下游的 accept 中是不会接受的。</p><p>详细 demo 代码 <a href="https://github.com/leaderliang/RxJavaProject/blob/150273c7a6697bd8c08be8bacb24027397bd9336/app/src/main/java/com/android/rxjavaproject/RxUsage.java" target="_blank" rel="noopener"><code>RxUsage -&gt; testZip()</code></a></p><h3 id="zip-在项目实践"><a href="#zip-在项目实践" class="headerlink" title="zip 在项目实践"></a>zip 在项目实践</h3><p>场景：<br>比如一个界面需要展示用户的一些信息, 而这些信息分别要从两个服务器接口中获取, 而只有当两个都获取到了之后才能进行展示, 这个时候就可以用Zip了。</p><p>首先分别定义这两个请求接口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface Api &#123;</span><br><span class="line">    @GET</span><br><span class="line">    Observable&lt;UserBaseInfoResponse&gt; getUserBaseInfo(@Body UserBaseInfoRequest request);</span><br><span class="line"></span><br><span class="line">    @GET</span><br><span class="line">    Observable&lt;UserExtraInfoResponse&gt; getUserExtraInfo(@Body UserExtraInfoRequest request);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着用Zip来打包请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;UserBaseInfoResponse&gt; observable1 = api.getUserBaseInfo(new UserBaseInfoRequest())</span><br><span class="line">        .subscribeOn(Schedulers.io());</span><br><span class="line"></span><br><span class="line">Observable&lt;UserExtraInfoResponse&gt; observable2 = api.getUserExtraInfo(new UserExtraInfoRequest())</span><br><span class="line">        .subscribeOn(Schedulers.io());</span><br><span class="line"></span><br><span class="line">Observable.zip(observable1, observable2, new BiFunction&lt;UserBaseInfoResponse, UserExtraInfoResponse, UserInfo&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public UserInfo apply(UserBaseInfoResponse baseInfo,</span><br><span class="line">                            UserExtraInfoResponse extraInfo) throws Exception &#123;</span><br><span class="line">        return new UserInfo(baseInfo, extraInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(new Consumer&lt;UserInfo&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(UserInfo userInfo) throws Exception &#123;</span><br><span class="line">                //do something;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>在这段代码中增加了一个filter,过滤一些条件，只允许被过滤后的事件通过<br>举栗：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">        for (int i = 0; ; i++) &#123;</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.io())</span><br><span class="line">        .filter(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                return integer % 10 == 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                Log.d(TAG, &quot;&quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>在这段代码中我们增加了一个 filter, 只允许能被 10 整除的事件通过。</p><h2 id="sample-操作符"><a href="#sample-操作符" class="headerlink" title="sample 操作符"></a>sample 操作符</h2><p>sample 操作符, 这个操作符每隔指定的时间就从上游中取出一个事件发送给下游。<br>下面代码每隔 2 秒取一个事件给下游：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">        for (int i = 0; ; i++) &#123;</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribeOn(Schedulers.io())</span><br><span class="line">        /*sample取样*/</span><br><span class="line">        .sample(2, TimeUnit.SECONDS)  </span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                Log.d(TAG, &quot;&quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文并非原创，通过各位博主博客学习后总结而得，以方便自己学习，在此感谢各位前辈，并在下面注明出处。</p><ul><li><a href="https://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="noopener">https://www.jianshu.com/u/c50b715ccaeb</a></li><li><a href="https://www.jianshu.com/p/a93c79e9f689" target="_blank" rel="noopener">https://www.jianshu.com/p/a93c79e9f689</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava2.0 学习笔记 - 常用关键字解释、线程调度的使用</title>
      <link href="/10cc.html"/>
      <url>/10cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="RxJava2-0"><a href="#RxJava2-0" class="headerlink" title="RxJava2.0"></a>RxJava2.0</h1><p>本文并非原创，通过各位博主博客学习后总结而得，以方便自己学习，在此感谢各位前辈，并在下面注明出处。</p><h2 id="ObservableEmitter、Disposable、subscribe-解释"><a href="#ObservableEmitter、Disposable、subscribe-解释" class="headerlink" title="ObservableEmitter、Disposable、subscribe() 解释"></a>ObservableEmitter、Disposable、subscribe() 解释</h2><h3 id="ObservableEmitter"><a href="#ObservableEmitter" class="headerlink" title="ObservableEmitter"></a>ObservableEmitter</h3><p>Emitter 是发射器的意思，那就很好猜了，这个就是用来发出事件的，它可以发出三种类型的事件，通过调用 emitter 的 onNext(T value)、onComplete() 和 onError(Throwable error) 就可以分别发出 next 事件、complete 事件和 error 事件。</p><p>注意，并不意味着可以随意发射乱七八糟的事件，需要满足一定的规则：</p><ul><li>上游可以发送无限个 onNext, 下游也可以接收无限个 onNext.</li><li>当上游发送了一个 onComplete 后, 上游 onComplete 之后的事件将会继续发送, 而下游收到 onComplete 事件之后将不再继续接收事件.</li><li>当上游发送了一个 onError 后,  上游 onError 之后的事件将继续发送, 而下游收到 onError 事件之后将不再继续接收事件.</li><li>上游可以不发送 onComplete 或 onError.</li><li>最为关键的是 onComplete 和 onError 必须唯一并且互斥, 即不能发多个 onComplete, 也不能发多个 onError,  也不能先发一个 onComplete, 然后再发一个 onError, 反之亦然</li></ul><blockquote><p>注: 关于 onComplete 和 onError 唯一并且互斥这一点, 是需要自行在代码中进行控制, 如果你的代码逻辑中违背了这个规则, <strong>并不一定会导致程序崩溃.</strong> 比如发送多个onComplete是可以正常运行的, 依然是收到第一个 onComplete 就不再接收了, 但若是发送多个 onError, 则收到第二个 onError 事件会导致程序会崩溃， <a href="https://github.com/leaderliang/RxJavaProject/blob/master/app/src/main/java/com/android/rxjavaproject/RxUsage.java" target="_blank" rel="noopener">代码仓库里</a> 里都有写出。</p></blockquote><h3 id="Disposable"><a href="#Disposable" class="headerlink" title="Disposable"></a>Disposable</h3><p>单词的字面意思是一次性用品,用完即可丢弃的.  那么在RxJava中怎么去理解它呢, 对应于上面的水管的例子, 我们可以把它理解成两根管道之间的一个机关, 当调用它的 dispose() 方法时, 它就会将两根管道切断, 从而导致下游收不到事件.</p><blockquote><p>注意: 调用 dispose() 并不会导致上游不再继续发送事件, 上游会继续发送剩余的事件.</p></blockquote><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe()"></a>subscribe()</h3><p>subscribe 有好几个重载方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final Disposable subscribe() &#123;&#125;</span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) &#123;&#125;</span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) &#123;&#125; </span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) &#123;&#125;</span><br><span class="line">public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) &#123;&#125;</span><br><span class="line">public final void subscribe(Observer&lt;? super T&gt; observer) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>最后一个带有 Observer 参数的在 RxUsage 中的 commonUsageForChain（）已使用过；</li><li>不带任何参数的 subscribe() 表示下游不关心任何事件,你上游尽管发你的数据去吧, 下游可不关心你发什么；</li><li>带有一个 Consumer 参数的方法表示下游只关心 onNext 事件, 其他的事件我假装没看见, 因此我们如果只需要 onNext 事件可以这么写；</li><li>其他几个方法同理, 这里就不解释啦，下面示例已列出。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">                Log.d(TAG, &quot;emitter 1&quot;);</span><br><span class="line">                emitter.onNext(1);</span><br><span class="line">                Log.d(TAG, &quot;emitter 2&quot;);</span><br><span class="line">                emitter.onNext(2);</span><br><span class="line">                Log.d(TAG, &quot;emitter 3&quot;);</span><br><span class="line">                emitter.onNext(3);</span><br><span class="line">                Log.d(TAG, &quot;emitter complete&quot;);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">                Log.d(TAG, &quot;emitter 4&quot;);</span><br><span class="line">                emitter.onNext(4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                Log.d(TAG, &quot;onNext: &quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line">                        </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;...);</span><br></pre></td></tr></table></figure><h2 id="RxJava-强大的线程控制之线程调度"><a href="#RxJava-强大的线程控制之线程调度" class="headerlink" title="RxJava 强大的线程控制之线程调度"></a>RxJava 强大的线程控制之线程调度</h2><h3 id="上下游默认是在同一个线程工作"><a href="#上下游默认是在同一个线程工作" class="headerlink" title="上下游默认是在同一个线程工作"></a>上下游默认是在同一个线程工作</h3><p>在主线程中分别创建上游和下游, 然后将他们连接在一起, 同时分别打印出它们所在的线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observable thread is : &quot; + Thread.currentThread().getName());</span><br><span class="line">            Log.d(TAG, &quot;emit 1&quot;);</span><br><span class="line">            emitter.onNext(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;Integer&gt; consumer = new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observer thread is :&quot; + Thread.currentThread().getName());</span><br><span class="line">            Log.d(TAG, &quot;onNext: &quot; + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    observable.subscribe(consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: TAG: Observable thread is : main</span><br><span class="line">E/RxUsage: TAG: emit 1                     </span><br><span class="line">E/RxUsage: TAG: Observer thread is :main   </span><br><span class="line">E/RxUsage: TAG: onNext: 1</span><br></pre></td></tr></table></figure><h3 id="在子线程中做耗时的操作-然后回到主线程中来操作-UI"><a href="#在子线程中做耗时的操作-然后回到主线程中来操作-UI" class="headerlink" title="在子线程中做耗时的操作, 然后回到主线程中来操作 UI"></a>在子线程中做耗时的操作, 然后回到主线程中来操作 UI</h3><p><img src="./img/blog/rxjava/1555487716792.jpg" alt="thread"></p><p>黄色水管表示子线程, 深蓝色水管表示主线程;<br>我们需要先改变上游发送事件的线程, 让它在子线程中发送事件, 然后再改变下游的线程, 让它去主线程接收事件. 通过 RxJava 内置的线程调度器可以轻松做到这一点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void testPrintThreadName()&#123;</span><br><span class="line">    Observable&lt;Integer&gt; observable = Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observable thread is : &quot; + Thread.currentThread().getName());</span><br><span class="line">            Log.d(TAG, &quot;emit 1&quot;);</span><br><span class="line">            emitter.onNext(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Consumer&lt;Integer&gt; consumer = new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">            Log.d(TAG, &quot;Observer thread is :&quot; + Thread.currentThread().getName());</span><br><span class="line">            Log.d(TAG, &quot;onNext: &quot; + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    observable.subscribeOn(Schedulers.newThread())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: Observable thread is : RxNewThreadScheduler-1</span><br><span class="line">E/RxUsage: emit 1</span><br><span class="line">E/RxUsage: Observer thread is :main</span><br><span class="line">E/RxUsage: onNext: 1</span><br></pre></td></tr></table></figure><p>从打印结果可以看出, 上游发送事件的线程的确改变了, 是在一个叫  RxNewThreadScheduler-1 的线程中发送的事件, 而下游仍然在主线程中接收事件,这就完美实现了在 Android 中在子线程中做完耗时操作，然后在主线程更新 UI 的操作。</p><p>切换线程主要通过以下两行操作来实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.subscribeOn(Schedulers.newThread())                                              </span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br></pre></td></tr></table></figure><p><code>subscribeOn()</code> 指定的是上游发送事件的线程；<code>observeOn()</code> 指定的是下游接收事件的线程；</p><p>补充：</p><blockquote><p>多次指定 <code>上游</code> 的线程只有第一次指定的有效, 也就是说多次调用 subscribeOn() 只有<code>第一次的有效</code>, 其余的会被忽略；<br>多次指定 <code>下游</code> 的线程是可以的, 也就是说每调用一次 observeOn() , <code>下游的线程就会切换一次</code>。</p></blockquote><p>为上面补充举个例子，方法见 <a href="https://github.com/leaderliang/RxJavaProject/blob/150273c7a6697bd8c08be8bacb24027397bd9336/app/src/main/java/com/android/rxjavaproject/RxUsage.java" target="_blank" rel="noopener">RxUsage.java - testPrintThreadNameMoreChange（）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribeOn(Schedulers.newThread())     </span><br><span class="line">         .subscribeOn(Schedulers.io())              </span><br><span class="line">         .observeOn(AndroidSchedulers.mainThread()) </span><br><span class="line">         .observeOn(Schedulers.io())                </span><br><span class="line">         .subscribe(consumer);</span><br></pre></td></tr></table></figure><p>上下游分别指定了两次发送事件的线程，上游分别是newThread和IO线程, 下游分别是main和IO线程。结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: Observable thread is : RxNewThreadScheduler-1</span><br><span class="line">E/RxUsage: emit 1</span><br><span class="line">E/RxUsage: Observer thread is :RxCachedThreadScheduler-2</span><br><span class="line">E/RxUsage: onNext: 1</span><br></pre></td></tr></table></figure><p>可以看到, 上游虽然指定了两次线程, 但只有第一次指定的有效, 依然是在 RxNewThreadScheduler 线程中, 而下游则在 RxCachedThreadScheduler 中, 这个 CacheThread 就是IO线程池中的一个。</p><p>可以通过 doOnNext（）清晰的看到下游的线程切换过程, 打印 log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribeOn(Schedulers.newThread())</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .doOnNext(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                Log.e(TAG, &quot;After observeOn(mainThread), current thread is: &quot; + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .observeOn(Schedulers.io())</span><br><span class="line">        .doOnNext(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                Log.e(TAG, &quot;After observeOn(io), current thread is: &quot; + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(consumer);</span><br></pre></td></tr></table></figure><p>上下游线程切换之后, 把当前的线程打印出来, 运行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E/RxUsage: Observable thread is : RxNewThreadScheduler-1</span><br><span class="line">E/RxUsage: emit 1</span><br><span class="line">E/RxUsage: After subscribeOn(newThread), current thread is: RxNewThreadScheduler-1</span><br><span class="line">E/RxUsage: After subscribeOn(io), current thread is: RxNewThreadScheduler-1</span><br><span class="line">E/RxUsage: After observeOn(mainThread), current thread is: main</span><br><span class="line">E/RxUsage: After observeOn(io), current thread is: RxCachedThreadScheduler-2</span><br><span class="line">E/RxUsage: Observer thread is :RxCachedThreadScheduler-2</span><br><span class="line">E/RxUsage: onNext: 1</span><br></pre></td></tr></table></figure><p>可以看到, 每调用一次 <code>subscribeOn</code> 和 <code>observeOn()</code> 线程都会切换一次, 项目中如果有有类似的需求时, 可灵活处理。</p><p>在 RxJava 中, 内置的线程：</p><ul><li>Schedulers.io() 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作</li><li>Schedulers.computation() 代表CPU计算密集型的操作, 例如需要大量计算的操作</li><li>Schedulers.newThread() 代表一个常规的新线程</li><li>AndroidSchedulers.mainThread()  代表Android的主线程</li></ul><p>在 RxJava 内部使用的是线程池来维护这些线程, 效率相对比较高.</p><h3 id="RxJava-在-Android-中的实践"><a href="#RxJava-在-Android-中的实践" class="headerlink" title="RxJava 在 Android 中的实践"></a>RxJava 在 Android 中的实践</h3><p>对于 Android 开发来说, 经常会将一些耗时的操作放在后台, 比如网络请求或者读写文件,操作数据库等等,等到操作完成之后回到主线程去更新 UI 这样的场景经常用到。</p><p>要使用 Retrofit,先添加 Gradle 配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*RxJava*/</span><br><span class="line">implementation &apos;io.reactivex.rxjava2:rxjava:2.2.8&apos;</span><br><span class="line">implementation &apos;io.reactivex.rxjava2:rxandroid:2.1.1&apos;</span><br><span class="line">/*retrofit*/</span><br><span class="line">implementation &apos;com.squareup.retrofit2:retrofit:2.5.0&apos;</span><br><span class="line">/*Gson converter*/</span><br><span class="line">implementation &apos;com.squareup.retrofit2:converter-gson:2.5.0&apos;</span><br><span class="line">/*RxJava2 Adapter*/</span><br><span class="line">implementation &apos;com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0&apos;</span><br><span class="line">/*okHttp*/</span><br><span class="line">implementation &apos;com.squareup.okhttp3:okhttp:3.12.0&apos;</span><br><span class="line">implementation &apos;com.squareup.okhttp3:logging-interceptor:3.9.0&apos;</span><br><span class="line">/*fastJson*/</span><br><span class="line">implementation &apos;com.alibaba:fastjson:1.2.56&apos;</span><br></pre></td></tr></table></figure><p>具体操作可点击查看代码,主要有这几个类，另外使用了 <a href="https://api.github.com/" target="_blank" rel="noopener">api.github</a> 接口：</p><p><a href="https://github.com/leaderliang/RxJavaProject/blob/150273c7a6697bd8c08be8bacb24027397bd9336/app/src/main/java/com/android/rxjavaproject/retrofit/GithubService.java" target="_blank" rel="noopener">GithubService.java </a></p><p><a href="https://github.com/leaderliang/RxJavaProject/blob/150273c7a6697bd8c08be8bacb24027397bd9336/app/src/main/java/com/android/rxjavaproject/retrofit/Repo.java" target="_blank" rel="noopener">Repo.java</a></p><p><a href="https://github.com/leaderliang/RxJavaProject/blob/150273c7a6697bd8c08be8bacb24027397bd9336/app/src/main/java/com/android/rxjavaproject/RetrofitClient.java" target="_blank" rel="noopener">RetrofitClient</a></p><p>都统一在 MainActivity 中进行调用。</p><p>看似很完美, 但我们忽略了一点, 如果在请求的过程中 Activity 已经退出了, 这个时候如果回到主线程去更新 UI, 那么APP肯定就崩溃了, 可以往上翻 <a href="#Disposable">Disposable</a> , 说它是个开关, 调用它的dispose()方法时就会切断水管, 使得下游收不到事件, 既然收不到事件, 那么也就不会再去更新UI了. 因此我们可以在 Activity 中将这个 Disposable 保存起来, 当 Activity退出时, 切断它即可。</p><p>那如果有多个 Disposable 该怎么办呢, RxJava 中已经内置了一个容器 <code>CompositeDisposable</code>, 每当我们得到一个 <code>Disposable</code> 时就调用 <code>CompositeDisposable.add()</code> 将它添加到容器中, 在退出的时候, 调用 <code>CompositeDisposable.clear()</code> 即可切断所有的水管。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本文并非原创，通过各位博主博客学习后总结而得，以方便自己学习，在此感谢各位前辈，并在下面注明出处。</p><ul><li><a href="https://www.jianshu.com/u/c50b715ccaeb" target="_blank" rel="noopener">https://www.jianshu.com/u/c50b715ccaeb</a></li><li><a href="https://www.jianshu.com/p/a93c79e9f689" target="_blank" rel="noopener">https://www.jianshu.com/p/a93c79e9f689</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器上的 Git - 生成 SSH 公钥以及多个用户使用同一台电脑生成多个 SSH 密钥</title>
      <link href="/ca0a.html"/>
      <url>/ca0a.html</url>
      
        <content type="html"><![CDATA[<p>SSH Key 是一种方法来确定受信任的计算机，从而实现免密码登录<a id="more"></a>。Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。</p><h3 id="生成-SSH-公钥"><a href="#生成-SSH-公钥" class="headerlink" title="生成 SSH 公钥"></a>生成 SSH 公钥</h3><p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。 首先先确认一下是否已经有一个公钥了。SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cd .ssh</span><br><span class="line">➜  .ssh ls</span><br><span class="line">id_rsa      id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure><p>关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  .ssh ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/liangyanqiao/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /Users/liangyanqiao/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /Users/liangyanqiao/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Zx+P**************************************mKyhnXOieS4 liangyanqiao@liangyanqiaodeMacBook-Pro.local</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|        .        |</span><br><span class="line">|       o         |</span><br><span class="line">|    . . .        |</span><br><span class="line">|   . o . .       |</span><br><span class="line">|   ..o= S = .    |</span><br><span class="line">|  . +o+.=.= o +   |</span><br><span class="line">| o +. =+.ooo.+..  |</span><br><span class="line">|E.B .o.o+oo*oo.   |</span><br><span class="line">|o=.+  ooo oo*=    |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>首先确保在终端里面已经进入 .ssh 目录下，然后执行命令 ssh-keygen，它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空，回车进行下一步，知道最后生成 RSA。</p><p>现在，所有做过这一步的用户都得把它们的公钥给你或者 Git 服务器的管理员（假设 SSH 服务被设定为使用公钥机制）。他们只需要复制 .pub 文件的内容然后发邮件给管理员。<br>公钥的样子大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  .ssh cat id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3Nz**************************************zbzFr leaderliang@MacBook-Pro.local</span><br></pre></td></tr></table></figure><p>关于在多个操作系统上设立相同 SSH 公钥的教程，大家可以查阅 GitHub 上有关 SSH 公钥的向导：<a href="http://github.com/guides/providing-your-ssh-key" target="_blank" rel="noopener">http://github.com/guides/providing-your-ssh-key</a></p><h2 id="2019-3-6-更新"><a href="#2019-3-6-更新" class="headerlink" title="2019.3.6 更新"></a>2019.3.6 更新</h2><p>遇到一个问题想在自己另一台电脑上用另一个 git 账号 使用代码仓库对代码进行管理，发现 ssh 权限存在一些问题，然后就各种尝试，查看官方文档尝试配置，但是还是有些问题。最后看了 <a href="http://www.cnblogs.com/ayseeing/p/4445194.html" target="_blank" rel="noopener">这位老哥</a> 的配置，才弄明白，在此记录一下。</p><p>如果你已经有了一套名为 id_rsa 的公秘钥，将要生成另外一个公钥，比如 aysee ，你也可以使用任何你喜欢的名字。<br>大致步骤如下：</p><h4 id="生成一个新的自定义名称的公钥："><a href="#生成一个新的自定义名称的公钥：" class="headerlink" title="生成一个新的自定义名称的公钥："></a>生成一个新的自定义名称的公钥：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;YOUR_EMAIL@YOUREMAIL.COM&quot; -f ~/.ssh/aysee</span><br><span class="line">ssh-keygen -t rsa -C &quot;YOUR_EMAIL@YOUREMAIL.COM&quot; -f ~/.ssh/aysee</span><br></pre></td></tr></table></figure><p>执行命令后，生成命名的公钥和生成默认公钥的步骤一样。</p><p>执行完成后，会在 ~/.ssh/目录下生成一个 aysee 和 aysee.pub 文件。</p><h4 id="在-SSH-用户配置文件-ssh-config-中指定对应服务所使用的公秘钥名称，如果没有-config-文件的话就新建一个，并输入以下内容："><a href="#在-SSH-用户配置文件-ssh-config-中指定对应服务所使用的公秘钥名称，如果没有-config-文件的话就新建一个，并输入以下内容：" class="headerlink" title="在 SSH 用户配置文件 ~/.ssh/config 中指定对应服务所使用的公秘钥名称，如果没有 config 文件的话就新建一个，并输入以下内容："></a>在 SSH 用户配置文件 ~/.ssh/config 中指定对应服务所使用的公秘钥名称，如果没有 config 文件的话就新建一个，并输入以下内容：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host github.com www.github.com</span><br><span class="line">  IdentityFile ~/.ssh/aysee</span><br></pre></td></tr></table></figure><h4 id="添加-aysee-pub-到你的-git-github-服务器网站上"><a href="#添加-aysee-pub-到你的-git-github-服务器网站上" class="headerlink" title="添加 aysee.pub 到你的 git/github 服务器网站上"></a>添加 aysee.pub 到你的 git/github 服务器网站上</h4><h4 id="测试配置文件是否正常工作"><a href="#测试配置文件是否正常工作" class="headerlink" title="测试配置文件是否正常工作"></a>测试配置文件是否正常工作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitcafe.com</span><br></pre></td></tr></table></figure><p>如果，正常的话，会出现如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi USERNAME! You&apos;ve successfully authenticated, but github does not provide shell access.</span><br></pre></td></tr></table></figure><p>如果出现如下提示，则说明有权限问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permission denied (publickey)</span><br></pre></td></tr></table></figure><p>如果有权限问题的情况下，你对项目执行push操作的时候，会得到如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key for IP address &apos;192.30.252.129&apos; to the list of known hosts.</span><br><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><h3 id="多用户时出现权限问题的原因："><a href="#多用户时出现权限问题的原因：" class="headerlink" title="多用户时出现权限问题的原因："></a>多用户时出现权限问题的原因：</h3><p>github使用SSH与客户端连接。如果是单用户（first），生成密钥对后，将公钥保存至 GitHub ，每次连接时SSH客户端发送本地私钥（默认~/.ssh/id_rsa）到服务端验证。单用户情况下，连接的服务器上保存的公钥和发送的私钥自然是配对的。但是如果是 多用户 （first，second），我们在连接到second的帐号时，second保存的是自己的公钥，但是SSH客户端依然发送默认私钥，即first的私钥，那么这个验证自然无法通过。</p><h4 id="解决ssh权限问题（）"><a href="#解决ssh权限问题（）" class="headerlink" title="解决ssh权限问题（）:"></a>解决ssh权限问题（）:</h4><p>通常一台电脑生成一个ssh不会有这个问题，当一台电脑生成多个ssh的时候，就可能遇到这个问题，解决步骤如下：</p><p>查看系统ssh-key代理,执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br></pre></td></tr></table></figure><p>以上命令如果输出  The agent has no identities. 则表示没有代理。如果系统有代理，可以执行下面的命令清除代理:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br></pre></td></tr></table></figure><p>然后依次将不同的ssh添加代理，执行命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br><span class="line">$ ssh-add ~/.ssh/aysee</span><br></pre></td></tr></table></figure><p>你会分别得到如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2048 8e:71:ad:88:78:80:b2:d9:e1:2d:1d:e4:be:6b:db:8e /Users/aysee/.ssh/id_rsa (RSA)</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2048 8e:71:ad:88:78:80:b2:d9:e1:2d:1d:e4:be:6b:db:8e /Users/aysee/.ssh/id_rsa (RSA)</span><br><span class="line">2048 a7:f4:0d:f1:b1:76:0b:bf:ed:9f:53:8c:3f:4c:f4:d6 /Users/aysee/.ssh/aysee (RSA)</span><br></pre></td></tr></table></figure><p>如果使用 ssh-add ~/.ssh/id_rsa的时候报如下错误，则需要先运行一下 ssh-agent bash 命令后再执行 ssh-add …等命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure><p>配置 <del>/.ssh/config 文件<br>如果没有就在</del>/.ssh目录创建config文件，该文件用于配置私钥对应的服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Default github user(first@mail.com)</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/username/.ssh/id_rsa</span><br><span class="line"> </span><br><span class="line">#aysee (company_email@mail.com)</span><br><span class="line">Host github-aysee</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/username/.ssh/aysee</span><br></pre></td></tr></table></figure><p>Host随意即可，方便自己记忆，后续在添加remote是还需要用到。 配置完成后，在连接非默认帐号的github仓库时，远程库的地址要对应地做一些修改，比如现在添加second帐号下的一个仓库test，则需要这样添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add test git@github-aysee:ay-seeing/test.git</span><br><span class="line">#并非原来的git@github.com:ay-seeing/test.git</span><br></pre></td></tr></table></figure><p>ay-seeing 是github的用户名</p><p>测试 ssh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>你会得到如下提示，表示这个ssh公钥已经获得了权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi USERNAME! You&apos;ve successfully authenticated, but github does not provide shell access.</span><br></pre></td></tr></table></figure><p>上一张我操作的图</p><p><img src="/img/blog/git/ssh.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记</title>
      <link href="/2da4.html"/>
      <url>/2da4.html</url>
      
        <content type="html"><![CDATA[<p>自从2017年1月9日，张小龙在 2017 微信公开课 Pro 上发布的小程序正式上线以来<a id="more"></a>，小程序一直都是一个很火的话题，谁都不敢肯定的说小程序可以成为一种趋势，影响原生 APP 的市场，但小程序确实有很多自身独有的特点和优势。</p><p>最近因公司的一个小程序开发比赛，燃气了我学习小程序得热情，网上的资料也不多，学习的话也只能查阅官方提供的文档，所以想在这里记录下自己学习过程中的重点和一些开发技巧，笔记写的比较零碎，因之前没有好好学习过 JS，所以以下笔记有些理解是按照移动开发思想来写的，后期有时间会好好整理下，笔记会随着学习持续更新的，相关代码可以在我的 <a href="https://github.com/leaderliang/WeChatProjects" target="_blank" rel="noopener">GitHub</a> 上查看。</p><h3 id="小程序的一些特点"><a href="#小程序的一些特点" class="headerlink" title="小程序的一些特点"></a>小程序的一些特点</h3><blockquote><p>小程序目前处于公测状态，个人开发者想获取到微信开发者账号，目前还是比较困难。</p></blockquote><blockquote><p>小程序适合做简单的、用完即走的应用。</p></blockquote><blockquote><p>小程序适合低频的应用。</p></blockquote><blockquote><p>小程序适合性能要求不高的应用。</p></blockquote><blockquote><p>小程序不支持加载 WebView。</p></blockquote><h3 id="没有小程序账号的一些限制"><a href="#没有小程序账号的一些限制" class="headerlink" title="没有小程序账号的一些限制"></a>没有小程序账号的一些限制</h3><blockquote><p>不能上传和发布</p></blockquote><blockquote><p>不能真机运行，只可以在 PC的模拟器中运行</p></blockquote><blockquote><p>录音、网络状态、罗盘、拨打电话等功能 无法使用</p></blockquote><blockquote><p>获取用户信息的流程是模拟的而不是真实的</p></blockquote><p>目前小程序的这些限制，但是不影响我们学习小程序开发。</p><h3 id="学习细节记录，关于调试"><a href="#学习细节记录，关于调试" class="headerlink" title="学习细节记录，关于调试"></a>学习细节记录，关于调试</h3><p>扫一扫后，点击小程序本地项目</p><p>调试界面会有以 .js 和 .js[sm] 后缀结尾的文件，调试的话 要在 带有 .js[sm] 后缀的文件中打断点。</p><h3 id="编写第一个小程序"><a href="#编写第一个小程序" class="headerlink" title="编写第一个小程序"></a>编写第一个小程序</h3><blockquote><p>.js javascript 文件</p></blockquote><blockquote><p>.json 是系统或者页面的配置文件，配置文件中不能添加注释，否则编译时候报错。</p></blockquote><blockquote><p>.wxml 是编写小程序的骨架文件，可以理解为 HTML 文件</p></blockquote><blockquote><p>.wxss 样式文件</p></blockquote><p>在工程下，以 app 开头的文件属于全局配置或者样式文件。&lt;view&gt; 和 &lt;div&gt; 标签 的作用相当；只有写在 text 标签里包括的文字，才可以在手机里实现长按选中复制操作</p><p>分辨率：物理分辨率，逻辑分辨率。</p><h3 id="page-标签"><a href="#page-标签" class="headerlink" title="page 标签"></a>page 标签</h3><p>可在 page 里面设置背景色，以及在状态栏里通过 windows 标签设置小程序的状态栏、导航条、标题、窗口背景色。<br>page 标签，在样式表里书写时候不能写成 .page。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: #b3d4db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于小程序设计效果图："><a href="#关于小程序设计效果图：" class="headerlink" title="关于小程序设计效果图："></a>关于小程序设计效果图：</h3><p>以 iphone6 的 750 个像素的宽度做效果图，假如 一个图片的像素是 200 个像素，则在小程序里 直接就写 200rpx，他们的转换关系是 1 ：1 的。</p><p>在开发过程中，水平布局的样式推荐使用 rpx 为单位，横向如果元素单一视情况也可使用 px为单位，纵向布局的间距推荐 px。</p><h2 id="小程序实战"><a href="#小程序实战" class="headerlink" title="小程序实战"></a>小程序实战</h2><h3 id="Swiper-组件使用"><a href="#Swiper-组件使用" class="headerlink" title="Swiper 组件使用"></a>Swiper 组件使用</h3><p>基础属性大家可以在官方文档中查找并使用，<br>swiper 里有个特别的属性需要提一下 vertical=”true” 纵向滚动，使图片可以纵向滚动。</p><h3 id="js-文件结构，和-page-页面的声明周期"><a href="#js-文件结构，和-page-页面的声明周期" class="headerlink" title="js 文件结构，和 page 页面的声明周期"></a>js 文件结构，和 page 页面的声明周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 设置数据绑定，定义数据变量</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面加载</span><br><span class="line">   */</span><br><span class="line">  onLoad: function (options) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面初次渲染完成</span><br><span class="line">   */</span><br><span class="line">  onReady: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面显示</span><br><span class="line">   */</span><br><span class="line">  onShow: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面隐藏</span><br><span class="line">   */</span><br><span class="line">  onHide: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生命周期函数--监听页面卸载</span><br><span class="line">   */</span><br><span class="line">  onUnload: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="line">   */</span><br><span class="line">  onPullDownRefresh: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 页面上拉触底事件的处理函数</span><br><span class="line">   */</span><br><span class="line">  onReachBottom: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 用户点击右上角分享</span><br><span class="line">   */</span><br><span class="line">  onShareAppMessage: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="弹性模型"><a href="#弹性模型" class="headerlink" title="弹性模型"></a>弹性模型</h3><pre><code>/**需要先声明是弹性模型*/display: flex;/**设置弹性模型的方向*/flex-direction:column;</code></pre><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>如果绑定的数据是在标签的属性上，需要添加添加双引号 “&#123;&#123; &#125;&#125;”<br>如果绑定的数据是在标签的属性上，需要添加添加双引号 “&#123;&#123; &#125;&#125;”</p><p>如果绑定的数据在标签之间，则不需要添加 “”, eg:&lt;text&gt;&#123;&#123; &#125;&#125;&lt;/text&gt;</p><h3 id="数据绑定扩展"><a href="#数据绑定扩展" class="headerlink" title="数据绑定扩展"></a>数据绑定扩展</h3><p>所有属性值是 boolean 的时候，如果有需要设置为 false 的时候，都需要写成 false 才可生效。因为如果写成 false ，小程序会默认为是有值的，从而编译为 true。</p><p>两个花括号结合起来的数据绑定也是可以生效的<br>&lt;text&gt;&#123;&#123;data1&#125;&#125;&#123;&#123;data2&#125;&#125;&lt;/text&gt;</p><p>用 wx:if=”&#123;&#123;&#125;&#125;” 来控制 image 的显示和隐藏<br>&lt;image&gt; wx:if=”&#123;&#123;img_visible&#125;&#125;”&gt;&lt;/image&gt;</p><h3 id="列表渲染-wx-for-for循环"><a href="#列表渲染-wx-for-for循环" class="headerlink" title="列表渲染 wx-for(for循环)"></a>列表渲染 wx-for(for循环)</h3><p>for 循环的布局样式都需要写在 &lt;block/&gt; 中，大家可以把<br>&lt;block/&gt; 标签理解为一个大括号 {}。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">    item 可以理解为条目数据的对象</span><br><span class="line">    index 可以理解为 索引</span><br><span class="line">    且 item 和 index 两个值都是 &lt;block/&gt; 标签中引用时候的默认值，可直接打 . 来调用 </span><br><span class="line">    wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot; 这两个标签都可以不用再 &lt;block/&gt;标签中声明，直接使用 item index 打 . 调用即可。</span><br><span class="line"> --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;block wx:for=&quot;&#123;&#123;数据源或者放置数据源的 key&#125;&#125;&quot; </span><br><span class="line">       wx:for-item=&quot;item&quot; </span><br><span class="line">       wx:for-index=&quot;index&quot;&gt;</span><br><span class="line">&lt;image src=&quot;&#123;&#123;item.leaderliang.png&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;text&gt;&#123;&#123;item.title&#125;&#125;&#123;&#123;index&#125;&#125;&lt;/text&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure><p>在使用 wx:for 的时候，会报一个警告；类似于这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./pages/post/post.wxml</span><br><span class="line">Now you can provide attr &quot;wx:key&quot; for a &quot;wx:for&quot; to improve performance.</span><br><span class="line">   |   &lt;/swiper&gt;</span><br><span class="line">   | </span><br><span class="line">&gt;  |   &lt;block wx:for=&quot;&#123;&#123;posts_key&#125;&#125;&quot; wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot;&gt;</span><br><span class="line">   |    ^</span><br><span class="line">   |   &lt;view catchtap=&quot;onPostItemTap&quot;&gt;</span><br><span class="line">   |       &lt;!-- is = 的是模板的名字--&gt;</span><br><span class="line">   |   &lt;template is=&quot;postItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure><p>官方给的解释是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">这个不是bug，是一个关于性能优化方面的提示</span><br><span class="line"></span><br><span class="line">具体参见 wx:key</span><br><span class="line">如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 &lt;input/&gt;中的输入内容，&lt;switch/&gt; 的选中状态），需要使用 wx:key 来指定列表中项目的唯一的标识符。</span><br><span class="line"></span><br><span class="line">wx:key 的值以两种形式提供</span><br><span class="line"></span><br><span class="line">字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</span><br><span class="line">保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：</span><br><span class="line">当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</span><br><span class="line"></span><br><span class="line">如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。</span><br></pre></td></tr></table></figure><p>个人尝试了下 设置 wx:key=””，暂且可以消除警告，不知道后期会不会有其他问题，随后会再研究一下。</p><h3 id="小程序的事件机制"><a href="#小程序的事件机制" class="headerlink" title="小程序的事件机制"></a>小程序的事件机制</h3><p>bindtap=”方法名”<br>view 的事件监听，但是会有冒泡的情况发生</p><p>catchtap=”方法名”<br>可以阻止冒泡的执行 </p><h3 id="template-的使用"><a href="#template-的使用" class="headerlink" title="template 的使用"></a>template 的使用</h3><p>目前 template 只支持 复用标签和样式，还不支持 js</p><p>在创建 template 后， .wxml 中会把公共的 view 布局放置进去，数据绑定的参数 item.title/date/avatar 等等属性  可以直接把 item 去掉，但是需要配合在相应 依赖的 .wxml 中把之前 设置的数据绑定处 data 的值前加 “…”,三个点，加了三个点之后，相当于把这个对象平铺了。如 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:for=&quot;&#123;&#123;posts_key&#125;&#125;&quot; wx:for-item=&quot;item&quot; wx:for-index=&quot;index&quot;&gt;</span><br><span class="line">&lt;!-- is = 的是模板的名字--&gt;</span><br><span class="line">  &lt;template is=&quot;postItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot; /&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure><p>另外在使用 template 模板的时候，需要注意，当模板里面有用到图片的地方，路径切忌不能是相对路径，要写为绝对路径，因为毕竟是模板文件，会有很多界面使用到，层级什么的会有不一样，为了避免后期不必要的 bug，建议统一使用绝对路径！</p><h3 id="组件自定义属性-及-获取属性"><a href="#组件自定义属性-及-获取属性" class="headerlink" title="组件自定义属性 及 获取属性"></a>组件自定义属性 及 获取属性</h3><p>在一个 view 标签里添加 catchtap 点击事件后，可以在 view 标签里添加自定义数据，通过事件传递数据。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view catchtap=&quot;onPostItemTap&quot; data-postItemId=&quot;&#123;&#123;item.postId&#125;&#125;&quot;&gt;</span><br><span class="line">  ......</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>在 js 文件中接收 data 数据，示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onPostItemTap: function(event)&#123;</span><br><span class="line">  var postId = event.currentTarget.dataset.postitemid;</span><br><span class="line">  var postId = event.currentTarget.dataset.dataId;</span><br><span class="line">  console.log(&quot;postId=&quot; + postId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>event.currentTarget.dataset.dataId;</p><p>event 框架提供的事件对象</p><p>currentTarget 当前点击的组件，对应的就是上面的 view </p><blockquote><p>currentTarget 和 target 区别<br>target 指的是当前点击的组件<br>currentTarget 指的是事件最终捕获的组件</p></blockquote><p>dataset 所有自定义数据的集合，可以在这个集合下面寻找我们定义的数据</p><p>currentTarget、dataset 都是 Object 的。</p><p>另外在 view 标签里面定义的 data-postItemId 数据，在 onPostItemTap 事件中接收的时候 postItemId 中的连接符 和 大写的字母 都会被去掉和转换成小写，所以接收的时候，需要多注意一下。</p><h3 id="bug-专栏"><a href="#bug-专栏" class="headerlink" title="bug 专栏"></a>bug 专栏</h3><p>另外在这里记录一下在编写小程序时候报的一些 bug：</p><p>在创建新的界面时候我们或许会把 .js、.json、.wxml、.wxss 这四个文件都给创建，但是在页面跳转的过程中，假如新创建的界面里面只有一个文本，或者没有样式和配置的时候，就会报下面这些错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">navigateTo:fail url &quot;pages/post/post-detail/post-detail&quot; is not in app.json</span><br><span class="line">遇到类似于这样的就你的 系统配置文件 app.json 中没有配置 对应新创建的页面，配置一下路径就好啦。</span><br></pre></td></tr></table></figure><p>再比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pages/post/post-detail/post-detail.json</span><br><span class="line">未找到入口 pages/post/post-detail/post-detail.json 文件，或者文件读取失败，请检查后重新编译。</span><br><span class="line">遇到这样的就是因为新创建的页面的 .json 文件是空的，如果没有配置需要配置，可以在文件中写入 “&#123;&#125;”，一个大括号，就搞定啦</span><br></pre></td></tr></table></figure><p>再或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pages/post/post-detail/post-detail 出现脚本错误或者未正确调用 Page()</span><br><span class="line">遇到这样的，就是因为新创建的页面的 .js 文件 中需要配置一下 page 方法。</span><br></pre></td></tr></table></figure><p>以上都是比较基础的问题，仔细看下报错日志，多试一下，再不行的话可以在官方的<a href="https://developers.weixin.qq.com/home?" target="_blank" rel="noopener">开发者社区</a>搜一下相关问题，或者发起提问，基本都可以解决的。</p><h3 id="属性解释"><a href="#属性解释" class="headerlink" title="属性解释"></a>属性解释</h3><h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><p>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。<br>注释：元素可拥有负的 z-index 属性值。<br>注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）！<br>说明：该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远</p><h4 id="font-weight-字体的粗细"><a href="#font-weight-字体的粗细" class="headerlink" title="font-weight 字体的粗细"></a>font-weight 字体的粗细</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">font-weight:normal;</span><br><span class="line">font-weight:bold;</span><br><span class="line">font-weight:900;</span><br></pre></td></tr></table></figure><h3 id="切换图片的两种方式"><a href="#切换图片的两种方式" class="headerlink" title="切换图片的两种方式"></a>切换图片的两种方式</h3><p>可通过 if else 来进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;image wx:if=&quot;&#123;&#123;checked&#125;&#125;&quot; catchtap=&quot;onCheckTap&quot;  src=&quot;/images/icon/check.png&quot;/&gt;</span><br><span class="line">&lt;image wx:else catchtap=&quot;onCheckTap&quot; src=&quot;/images/icon/un_check.png&quot;/&gt;</span><br></pre></td></tr></table></figure><p>通过数据绑定的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;image class=&quot;audio&quot; catchtap=&quot;onAudioTap&quot; </span><br><span class="line">       src=&quot;&#123;&#123;isPlayingMusic ? &apos;/images/music/music-stop.png&apos; : &apos;/images/music/music-start.png&apos;&#125;&#125;&quot;&gt;</span><br><span class="line">&lt;/image&gt;</span><br></pre></td></tr></table></figure><h3 id="应用程序的生命周期"><a href="#应用程序的生命周期" class="headerlink" title="应用程序的生命周期"></a>应用程序的生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">以下代码需要在工程根目录下的 app.js 中进行编写，目前小程序应用程序的生命周期有四个方法</span><br><span class="line"></span><br><span class="line">App(&#123;</span><br><span class="line">   </span><br><span class="line">   gloableData:&#123;</span><br><span class="line">        // 音乐是否在播放</span><br><span class="line">        g_isPlayingMusic: false,</span><br><span class="line">        // 哪一个音乐在播放</span><br><span class="line">        g_currentMusicPostId: null</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span><br><span class="line">   */</span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 当小程序启动，或从后台进入前台显示，会触发 onShow</span><br><span class="line">   */</span><br><span class="line">  onShow: function (options) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 当小程序从前台进入后台，会触发 onHide</span><br><span class="line">   */</span><br><span class="line">  onHide: function () &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</span><br><span class="line">   */</span><br><span class="line">  onError: function (msg) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果我们的某个界面需要用到小程序 app.js 中的相关功能或函数，则需在相应的界面中声明一个 app 变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获取小程序实例</span><br><span class="line">var app = getApp();</span><br></pre></td></tr></table></figure><p>进而即可通过 app 变量  来调用 app.js 中对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.gloableData.g_isPlayingMusic = true;</span><br><span class="line">// 音乐播放，设置存储对应播放的 postId</span><br><span class="line">app.gloableData.g_currentMusicPostId = that.data.currentPostId;</span><br></pre></td></tr></table></figure><h3 id="tab-选项卡"><a href="#tab-选项卡" class="headerlink" title="tab 选项卡"></a>tab 选项卡</h3><p>tabBar<br>如果我们的小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），那么我们可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">在 app.json 文件中进行配置 tab</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;borderStyle&quot;: &quot;white&quot;,</span><br><span class="line">    &quot;position&quot;: &quot;top&quot;,</span><br><span class="line">    &quot;selectedColor&quot;: &quot;#000000&quot;,</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/post/post&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;文章&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;images/tab/yuedu.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;/images/tab/yuedu_hl.png&quot;,</span><br><span class="line">        &quot;backgroundColor&quot;: &quot;#000000&quot;,</span><br><span class="line">        &quot;selectedColor&quot;: &quot;#000000&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/movies/movies&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;电影&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;/images/tab/dianying.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;images/tab/dianying_hl.png&quot;,</span><br><span class="line">        &quot;backgroundColor&quot;: &quot;#000000&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tabBar 页面跳转方法   </p><blockquote><p>wx.switchTab(OBJECT)<br>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</p></blockquote><p>Tip：</p><p>需要配置在 list 外边，否则无效</p><blockquote><p>“borderStyle”: “white”,<br>“position”: “top/bottom”,<br>“selectedColor”: “#000000”,<br>当设置 position 为 top 时，将不会显示 icon<br>tabBar 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序</p></blockquote><h3 id="在小程序中快速创建文件和文件夹的方式"><a href="#在小程序中快速创建文件和文件夹的方式" class="headerlink" title="在小程序中快速创建文件和文件夹的方式"></a>在小程序中快速创建文件和文件夹的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 在 app.json 文件中 pages 配置项下直接编写文件路径，然后 command + s 或 (ctrl + s)</span><br><span class="line"> * ，即可在左侧工程下生成相应的目录和文件；但目前我使用的开发版本号是 0.17.171900</span><br><span class="line"> * ，系统已经支持一次性创建四个文件的功能，直接在你想要的目录下新建目录即可实</span><br><span class="line"> */ </span><br><span class="line">&quot;pages&quot;: [</span><br><span class="line">  &quot;pages/welcome/welcome&quot;,</span><br><span class="line">  &quot;pages/post/post&quot;,</span><br><span class="line">  &quot;pages/movies/movies&quot;,</span><br><span class="line">  &quot;pages/post/post-detail/post-detail&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="小程序调用服务器数据"><a href="#小程序调用服务器数据" class="headerlink" title="小程序调用服务器数据"></a>小程序调用服务器数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">官方示例代码</span><br><span class="line">wx.request(&#123;</span><br><span class="line">  url: &apos;test.php&apos;, //仅为示例，并非真实的接口地址</span><br><span class="line">  data: &#123;</span><br><span class="line">     x: &apos;&apos; ,</span><br><span class="line">     y: &apos;&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  header: &#123;</span><br><span class="line">      &apos;content-type&apos;: &apos;application/json&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">个人实际操作时代码如下</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: &apos;https://api.douban.com/v2/movie/top250&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      method: &apos;GET&apos;,// 默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT</span><br><span class="line">      header: &#123;</span><br><span class="line">        &apos;content-type&apos;: &apos;application/xml&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      success: function (res) &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: function()&#123;</span><br><span class="line">        console.log(&quot;request fail&quot;)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: function()&#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中填写 header 时，遇到些 bug，在这里总结下：</p><p>因为临时用的豆瓣的电影 api，在配置时 header 中按照官方示例填写如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header: &#123;</span><br><span class="line">    &apos;content-type&apos;: &apos;application/json&apos;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>请求豆瓣服务器返回如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET https://api.douban.com/v2/movie/top250 400 (Bad Request)</span><br><span class="line">Object &#123;msg: &quot;Invalid request&quot;, code: 999, request: &quot;GET /v2/top250&quot;&#125;</span><br><span class="line">code:999</span><br><span class="line">msg:&quot;Invalid request&quot;</span><br><span class="line">request:&quot;GET /v2/top250&quot;</span><br></pre></td></tr></table></figure><p>后来尝试把 vaule 修改为空字符串，或者随便的其他字符，后来多次测试发现随便改个值就可以请求成功啦。</p><h5 id="以下是官方的一些-Bug-amp-Tip："><a href="#以下是官方的一些-Bug-amp-Tip：" class="headerlink" title="以下是官方的一些 Bug &amp; Tip："></a>以下是官方的一些 Bug &amp; Tip：</h5><blockquote><p>content-type 默认为 ‘application/json’<br>开发者工具 0.10.102800 版本，header 的 content-type 设置异常；<br>客户端的 HTTPS TLS 版本为1.2，但 Android 的部分机型还未支持 TLS 1.2，所以请确保 HTTPS 服务器的 TLS 版本支持1.2及以下版本；<br>要注意 method 的 value 必须为大写（例如：GET）；<br>url 中不能有端口；<br>request 的默认超时时间和最大超时时间都是 60s；<br>request 的最大并发数是 5；<br>网络请求的 referer 是不可以设置的，格式固定为 <a href="https://servicewechat.com/{appid}/{version}/page-frame.html" target="_blank" rel="noopener">https://servicewechat.com/{appid}/{version}/page-frame.html</a>  其中 {appid} 为小程序的 appid，{version} 为小程序的版本号，版本号为 0 表示为开发版。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用过程遇到的一些问题收集</title>
      <link href="/e180.html"/>
      <url>/e180.html</url>
      
        <content type="html"><![CDATA[<p>最近因为公司统一为我们配置了新 Mac 电脑，想在新电脑上使用自己的 Hexo<a id="more"></a>，就从旧电脑上把 Hexo 文件夹全部 copy 过来了。</p><p>然后在新电脑上执行了</p><blockquote><p>npm install -g hexo-cli</p></blockquote><p>安装下 hexo 环境，完成以后想着部署下 Hexo，就执行了</p><blockquote><p>hexo clean</p></blockquote><p>clean 后报了一大串异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Error: Module version mismatch. Expected 48, got 57.</span><br><span class="line">    at Error (native)</span><br><span class="line">    at Object.Module._extensions..node (module.js:597:18)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">&#123; Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:469:15)</span><br><span class="line">    at Function.Module._load (module.js:417:25)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:469:15)</span><br><span class="line">    at Function.Module._load (module.js:417:25)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br></pre></td></tr></table></figure><p>执行</p><blockquote><p>hexo generate #使用 Hexo 生成静态文件</p></blockquote><p>后也同样报出一串异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">Error: Module version mismatch. Expected 48, got 57.</span><br><span class="line">    at Error (native)</span><br><span class="line">    at Object.Module._extensions..node (module.js:597:18)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">&#123; Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:469:15)</span><br><span class="line">    at Function.Module._load (module.js:417:25)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:469:15)</span><br><span class="line">    at Function.Module._load (module.js:417:25)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">[master 1cf33bb] Site updated: 2017-06-03 02:24:53</span><br><span class="line"> 13 files changed, 103 insertions(+), 103 deletions(-)</span><br><span class="line"> rename 2017/03/&#123;13 =&gt; 27&#125;/hello-world/index.html (93%)</span><br><span class="line"> rewrite content.json (92%)</span><br><span class="line">Username for &apos;https://github.com&apos;: leaderliang</span><br><span class="line">Password for &apos;https://leaderliang@github.com&apos;:</span><br><span class="line">To https://github.com/leaderliang/leaderliang.github.io.git</span><br><span class="line">   a268493..1cf33bb  HEAD -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from https://github.com/leaderliang/leaderliang.github.io.git.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>网上搜了很多解决方案：</p><blockquote><p>npm install –no-optional</p></blockquote><blockquote><p>rm -rf node_modules &amp;&amp; npm install</p></blockquote><p>等等，都不好使，后来还以为是 node 的版本和之前旧电脑上的版本不一致呢，折腾了好几个版本后，发现也不是这个原因，可执行查看 node.js 版本号</p><blockquote><p>node –version</p></blockquote><p>最后在 github 上找到一个方案</p><blockquote><p>npm rebuild</p></blockquote><p>等待执行完成，在执行 clean 操作就不报异常了</p><p>总结：因每台电脑的配置不同导致生成的 node_modules 以及一些配置文件不同造成的。</p><h1 id="Hexo-的一些功能"><a href="#Hexo-的一些功能" class="headerlink" title="Hexo 的一些功能"></a>Hexo 的一些功能</h1><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>在新建文件的时候，可以先写草稿，等到写好之后，再发布出去。那么，就需要草稿的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &quot;新建草稿md&quot;</span><br></pre></td></tr></table></figure><p>这样，文件就会创建在会在 <code>source/_drafts</code> 目录下，如果想在本地部署预览草稿，则可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/MacDev/Hexo/source/_drafts/新建草稿文件.md</span><br><span class="line"># 执行</span><br><span class="line">hexo s --drafts</span><br><span class="line">或者</span><br><span class="line">hexo s --draft</span><br></pre></td></tr></table></figure><p>当文章写好之后，想发布出去，就要移出草稿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo publish &quot;新建草稿文件&quot;</span><br><span class="line">or</span><br><span class="line">hexo P &lt;filename&gt;</span><br></pre></td></tr></table></figure><h1 id="后续补充-hexo-在使用过程中出现的错误总结"><a href="#后续补充-hexo-在使用过程中出现的错误总结" class="headerlink" title="后续补充 hexo 在使用过程中出现的错误总结"></a>后续补充 hexo 在使用过程中出现的错误总结</h1><h2 id="fs-SyncWriteStream-报错-（问题借鉴相关出处）"><a href="#fs-SyncWriteStream-报错-（问题借鉴相关出处）" class="headerlink" title="fs.SyncWriteStream 报错 （问题借鉴相关出处）"></a>fs.SyncWriteStream 报错 （<a href="https://www.jixian.io/2017/07/22/Hexo的几个问题/" target="_blank" rel="noopener">问题借鉴相关出处</a>）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: fs.SyncWriteStream is deprecated</span><br></pre></td></tr></table></figure><p>安装的node版本是8.1，而node.js从8.0开始就已经弃用了前面提到的fs.SyncWriteStream方法，然而作者项目里的一个叫hexo-fs的插件，调用了这个方法，所以就会报错，解决办法，作者没有提供，但是很显然，我只需要更新一下那个插件，就可以搞定，于是更新的方法是，在Hexo博客目录下，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-fs --save</span><br></pre></td></tr></table></figure><p>等待插件更新完毕…</p><p><img src="/img/blog/hexofsSyncWriteStream.png" alt="image"></p><h2 id="Hexo卸载插件命令"><a href="#Hexo卸载插件命令" class="headerlink" title="Hexo卸载插件命令"></a>Hexo卸载插件命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall 插件名 --save</span><br><span class="line">例如卸载七牛云同步插件  npm uninstall hexo-qiniu-sync --save</span><br></pre></td></tr></table></figure><h2 id="DeprecationWarning-fs-SyncWriteStream-is-deprecated"><a href="#DeprecationWarning-fs-SyncWriteStream-is-deprecated" class="headerlink" title="DeprecationWarning: fs.SyncWriteStream is deprecated"></a>DeprecationWarning: fs.SyncWriteStream is deprecated</h2><p>node和hexo插件的版本带来的问题：在node8.x的版本中，fs.SyncWriteStream被弃用了</p><p>更新如下插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-fs --save</span><br><span class="line">npm install hexo-deployer-git@0.3.1 --save</span><br><span class="line">npm install hexo-renderer-ejs@0.3.1 --save</span><br><span class="line">npm install hexo-server@0.2.2 --save</span><br></pre></td></tr></table></figure><h2 id="hexo-添加-gitalk-遇到的问题"><a href="#hexo-添加-gitalk-遇到的问题" class="headerlink" title="hexo 添加 gitalk 遇到的问题"></a>hexo 添加 gitalk 遇到的问题</h2><blockquote><p>有几个参数需要说一下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gitalk_repo: leaderliang.github.io # git repo of the hexo 创建一个与应用名称一样的repo，用来存放评论</span><br><span class="line">gitalk_owner: leaderliang # git repo&apos;s owner 你的github账户名</span><br><span class="line">gitalk_client_id: f00**********3b7ec # github app client id</span><br><span class="line">gitalk_client_secret: ff33*******bd0 # github app client secret</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发布的新文章提示“未找到相关的 Issues 进行评论，请联系xxx初始化创建”</span><br></pre></td></tr></table></figure><p>解决方案，OAuth Apps<br>Homepage URL，这里最后的/号要加，http和https没关系，都可以，因为我是https所以填了https.<br><a href="https://leaderliang.github.io/" target="_blank" rel="noopener">https://leaderliang.github.io/</a><br>Authorization callback URL，也是最后的/号要加，同上<br><a href="https://leaderliang.github.io/" target="_blank" rel="noopener">https://leaderliang.github.io/</a></p><h2 id="hexo-版本升级命令"><a href="#hexo-版本升级命令" class="headerlink" title="hexo 版本升级命令"></a>hexo 版本升级命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">同</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">npm update</span><br><span class="line">输入之后发现出现了一系列的 WARN</span><br></pre></td></tr></table></figure><p>具体可参考： <a href="https://blog.csdn.net/whjkm/article/details/81088518" target="_blank" rel="noopener">https://blog.csdn.net/whjkm/article/details/81088518</a></p><h2 id="Node-Sass-does-not-yet-support-your-current-environment-Windows-64-bit-异常如何解决"><a href="#Node-Sass-does-not-yet-support-your-current-environment-Windows-64-bit-异常如何解决" class="headerlink" title="Node Sass does not yet support your current environment: Windows 64-bit 异常如何解决"></a>Node Sass does not yet support your current environment: Windows 64-bit 异常如何解决</h2><p>上面的异常是在我更新了 node 版本后出现的,  这个异常直接说了 node sass 不支持当前环境，所以可以直接删掉原来不支持本机的 node sass，再重新安装就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除：</span><br><span class="line">npm uninstall --save node-sass</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">npm install --save node-sass</span><br></pre></td></tr></table></figure><h2 id="Hexo-code-hight-light（目前使用的不是这个，等有时间加一下）"><a href="#Hexo-code-hight-light（目前使用的不是这个，等有时间加一下）" class="headerlink" title="Hexo code hight light（目前使用的不是这个，等有时间加一下）"></a>Hexo code hight light（目前使用的不是这个，等有时间加一下）</h2><p>不错的 highlight.js 推荐，地址：<a href="https://highlightjs.org/usage/" target="_blank" rel="noopener">https://highlightjs.org/usage/</a><br>对应的博客简单教程：<a href="https://zihengcat.github.io/2018/03/05/Hexo博客添加highlight-js代码高亮/" target="_blank" rel="noopener">https://zihengcat.github.io/2018/03/05/Hexo博客添加highlight-js代码高亮/</a></p><h2 id="ERROR-Plugin-load-failed-hexo-generator-json-content"><a href="#ERROR-Plugin-load-failed-hexo-generator-json-content" class="headerlink" title="ERROR Plugin load failed: hexo-generator-json-content"></a>ERROR Plugin load failed: hexo-generator-json-content</h2><p>执行命令 <code>npm i hexo-generator-json-content -save</code> </p><h2 id="You-must-install-peer-dependencies-yourself"><a href="#You-must-install-peer-dependencies-yourself" class="headerlink" title="You must install peer dependencies yourself"></a>You must install peer dependencies yourself</h2><p>类似以下问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm WARN babel-eslint@10.0.2 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN react-flip-move@2.9.14 requires a peer of react@0.13.x || 0.14.x || 15.x.x but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN react-flip-move@2.9.14 requires a peer of react-dom@0.13.x || 0.14.x || 15.x.x but none is installed. You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure><p>出现这样问题，原因是 npm 版本较低，更新 npm 版本即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><h2 id="node-版本升级"><a href="#node-版本升级" class="headerlink" title="node 版本升级"></a>node 版本升级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure><p>升级node.js到最新稳定版 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure><p>遇到 ermission denied 就在命令行前加 <code>sudo</code></p><h2 id="was-compiled-against-a-different-Node-js-version-using-错误问题（update-2019-11-07-19-24-49）"><a href="#was-compiled-against-a-different-Node-js-version-using-错误问题（update-2019-11-07-19-24-49）" class="headerlink" title="was compiled against a different Node.js version using 错误问题（update 2019-11-07 19:24:49）"></a>was compiled against a different Node.js version using 错误问题（update 2019-11-07 19:24:49）</h2><p>下面把详细报错的问题展示下，可以对比下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</span><br><span class="line">was compiled against a different Node.js version using</span><br><span class="line">NODE_MODULE_VERSION 57. This version of Node.js requires</span><br><span class="line">NODE_MODULE_VERSION 72. Please try re-compiling or re-installing</span><br><span class="line">the module (for instance, using `npm rebuild` or `npm install`).</span><br><span class="line">...</span><br><span class="line">Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</span><br></pre></td></tr></table></figure><p>出现这种问题，应该是我在搞 RN 的时候把 node 版本升级到最高了<br>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 重新安装hexo</span><br><span class="line">hexo npm install hexo --no--optional</span><br><span class="line"># 如果执行上面命名后，还是提示错误，则先卸载再安装</span><br><span class="line">hexo npm uninstall hexo-cli -g</span><br><span class="line">hexo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"># 如果发现带上前缀不好使的话，可以把 hexo 去掉，执行 npm 的命令</span><br><span class="line">npm install hexo --no--optional</span><br><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"># 对写过的文章是没有影响的，放心执行</span><br></pre></td></tr></table></figure><h2 id="Hexo-添加-PDF-功能"><a href="#Hexo-添加-PDF-功能" class="headerlink" title="Hexo 添加 PDF 功能"></a>Hexo 添加 PDF 功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">npm install --save hexo-pdf</span><br><span class="line"></span><br><span class="line"># 在文章中添加</span><br><span class="line"># 外部链接：</span><br><span class="line">&#123;% pdf https://leaderliang.github.io/file.pdf %&#125;</span><br><span class="line"># 本地连接：</span><br><span class="line">&#123;% pdf ./pdf/kotlin_entry_study_notes.pdf %&#125;</span><br></pre></td></tr></table></figure><h2 id="npm-outdated-哪些需要更新"><a href="#npm-outdated-哪些需要更新" class="headerlink" title="npm outdated 哪些需要更新"></a>npm outdated 哪些需要更新</h2><p>参考： <a href="https://tommy.net.cn/2018/02/26/upgrade-hexo-to-v3-5-0/" target="_blank" rel="noopener">https://tommy.net.cn/2018/02/26/upgrade-hexo-to-v3-5-0/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm outdated</span><br><span class="line">Package                  Current  Wanted   Latest  Location</span><br><span class="line">babel-eslint              10.0.2  10.0.3   10.0.3  hexo-site</span><br><span class="line">eslint                    4.12.1  4.19.1    6.6.0  hexo-site</span><br><span class="line">hexo                       3.9.0   3.9.0    4.0.0  hexo-site</span><br><span class="line">hexo-deployer-git          1.0.0   1.0.0    2.0.0  hexo-site</span><br><span class="line">hexo-fs                    1.0.2   1.0.2    2.0.0  hexo-site</span><br><span class="line">hexo-generator-archive     0.1.5   0.1.5    1.0.0  hexo-site</span><br><span class="line">hexo-generator-category    0.1.3   0.1.3    1.0.0  hexo-site</span><br><span class="line">hexo-generator-index       0.2.1   0.2.1    1.0.0  hexo-site</span><br><span class="line">hexo-generator-tag         0.2.0   0.2.0    1.0.0  hexo-site</span><br><span class="line">hexo-renderer-ejs          0.3.1   0.3.1    1.0.0  hexo-site</span><br><span class="line">hexo-renderer-stylus       0.3.3   0.3.3    1.1.0  hexo-site</span><br><span class="line">hexo-server                0.3.3   0.3.3    1.0.0  hexo-site</span><br><span class="line">hexo-util                  1.4.0   1.5.0    1.5.0  hexo-site</span><br><span class="line">highlight.js              9.15.8  9.16.2   9.16.2  hexo-site</span><br><span class="line">node-sass                 4.12.0  4.13.0   4.13.0  hexo-site</span><br><span class="line">react                     0.14.9  0.14.9  16.11.0  hexo-site</span><br><span class="line">react-dom                 0.14.9  0.14.9  16.11.0  hexo-site</span><br><span class="line">react-flip-move           2.9.14  2.10.2    3.0.4  hexo-site</span><br></pre></td></tr></table></figure><p>把 Hexo 的版本号根据自己需要修改，其他的也根据情况更新一下。</p><p>都修改好了以后，就 npm 更新一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save</span><br></pre></td></tr></table></figure><h2 id="npm-WARN-ajv-keywords-2-1-1-requires-a-peer-of-ajv-5-0-0-but-none-is-installed-You-must-install-peer-dependencies-yourself"><a href="#npm-WARN-ajv-keywords-2-1-1-requires-a-peer-of-ajv-5-0-0-but-none-is-installed-You-must-install-peer-dependencies-yourself" class="headerlink" title="npm WARN ajv-keywords@2.1.1 requires a peer of ajv@^5.0.0 but none is installed. You must install peer dependencies yourself."></a>npm WARN <a href="mailto:ajv-keywords@2.1.1" target="_blank" rel="noopener">ajv-keywords@2.1.1</a> requires a peer of ajv@^5.0.0 but none is installed. You must install peer dependencies yourself.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ajv@^5.0.0 --save 必须要指定版本才可以，要不然还是会安装失败</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 的基本使用以及在使用过程中的问题解决方案整理</title>
      <link href="/bc45.html"/>
      <url>/bc45.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>日常使用 Git 时基础命令和遇到很多小问题，在这里简单记录下…<a id="more"></a></p></blockquote><h3 id="Git-基础命令"><a href="#Git-基础命令" class="headerlink" title="Git 基础命令"></a>Git 基础命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">创建完 github 后，网站提示操作命令行</span><br><span class="line">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:leaderliang/test.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote add .../.git</span><br><span class="line">git remote remove &lt;name&gt;    多个 远端的时候，想要删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir               “文件夹名字”   创建文件夹</span><br><span class="line">touch a.md        创建文件</span><br><span class="line">git init        初始化 git 仓库</span><br><span class="line">git status         查看你当前 git 仓库的一些状态</span><br><span class="line">git add a.md        去操作你想要提交的文件，可以理解把想要提交的文件添加到提交的列表里   </span><br><span class="line">git commit -m “first commit”  commit 是提交的意思，- m 代表是提交信息，执行了以上命令代表我们已经正式进行了第一次提交</span><br><span class="line">git log        可以查看所有产生的 commit 记录</span><br><span class="line"></span><br><span class="line">git branch        查看下当前分支情况</span><br><span class="line">git branch a    创建 a 分支</span><br><span class="line">git checkout a    切换到分支 a 上面</span><br><span class="line">git checkout -b a   新建一个分支 a，并且自动切换到 a 分支</span><br><span class="line">git merge           合并分支 ，前提是要切换到主干上在执行这个命令</span><br><span class="line">git branch -d a    删除 a 分支</span><br><span class="line">git branch -D       有些时候可能会删除失败，比如如果a分支的代码还没有合并到master，你执行 git branch -d a 是删除不了的，它会智能的提示你a分支还有未合并的代码，但是如果你非要删除，那就执 行 git branch -D a 就可以强制删除a分支</span><br><span class="line">git tag v1.0     给代码创建标签</span><br><span class="line">git checkout v1.0   切换到 v1.0 tag 的代码</span><br><span class="line"></span><br><span class="line">rm -rf .git         删除.git</span><br><span class="line">ls -a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">与GitHub 代码的相关操作命令</span><br><span class="line"></span><br><span class="line">首先需要 SSH 授权默认 </span><br><span class="line">Mac 默认是安装有 SSH 的</span><br><span class="line">在终端输入 ssh-keygen -t rsa </span><br><span class="line">指定 rsa 算法生成密钥，接着连续三个回 车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥， id_rsa.pub 就是公钥</span><br><span class="line">在 系统目录 ~/.ssh 下找到 .pub 文件，将内容复制到 Github 上</span><br><span class="line">终端输入 ssh -T git@github.com </span><br><span class="line">进行测试是否授权成功</span><br><span class="line"></span><br><span class="line">如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git push origin master 把本地代码推到远程 master 分支</span><br><span class="line">git pull origin master 把远程最新的代码更新到本地</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git 添加多个代码仓库命令</span><br><span class="line"></span><br><span class="line">#添加github</span><br><span class="line">git remote add origin https://github.com/xxx(仓库地址)</span><br><span class="line">#添加oschina</span><br><span class="line">git remote add oschina https://git.oschina.net/xxxx(仓库地址)</span><br><span class="line">#提交到oschina</span><br><span class="line">git push oschina master(分支名)</span><br><span class="line">#提交到github</span><br><span class="line">git push origin master(分支名)</span><br><span class="line">#从oschina更新</span><br><span class="line">git pull oschina master</span><br><span class="line">#从github更新</span><br><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上传前需要先关联远程仓库地址：</span><br><span class="line">git remote add origin git@github.com:leaderliang/leaderliangtest.git  </span><br><span class="line">origin 名字可以随便取</span><br><span class="line"></span><br><span class="line">kiipu：</span><br><span class="line">git remote add kiipu git@git.coding.net:mycreat/kiipu-android.git  kiipu 目前的关联方式</span><br><span class="line">git push -u kiipu master</span><br><span class="line"></span><br><span class="line">#查看我们当前项目有哪些远程仓库名称或者列表</span><br><span class="line">git remote -v </span><br><span class="line"></span><br><span class="line">#设置自己的用户名和邮箱（也包括 个人和企业搭建的 Git 服务器名字配置）</span><br><span class="line"></span><br><span class="line">#查看当前 git 下配置属性</span><br><span class="line">git config --list </span><br><span class="line">git config --global user.name &quot;liang&quot;</span><br><span class="line">git config --global user.email &quot;liang@100tal.com&quot;</span><br><span class="line"></span><br><span class="line">—-gloabl 是配置系统全局的，去掉 —-gloabl 就可以配置我们当前 git 目录下</span><br></pre></td></tr></table></figure><h3 id="Git-报错相关"><a href="#Git-报错相关" class="headerlink" title="Git 报错相关"></a>Git 报错相关</h3><h4 id="Git-push-出现-“fatal-The-remote-end-hung-up-unexpectedly”-解决方案"><a href="#Git-push-出现-“fatal-The-remote-end-hung-up-unexpectedly”-解决方案" class="headerlink" title="Git push 出现 “fatal: The remote end hung up unexpectedly” 解决方案"></a>Git push 出现 “fatal: The remote end hung up unexpectedly” 解决方案</h4><p>在使用 git push 项目出现 “fatal: The remote end hung up unexpectedly “ 原因是 push 的文件过大</p><p>解决方案：<br>在克隆/创建版本库生成的 .git 目录下面修改生成的 config 文件，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br><span class="line">或仅设置当前目录下</span><br><span class="line">git config http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>大小自己自定义，目前为 500M，最大支持可以自己尝试下。</p><p><img src="/img/blog/git/gitsize.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/3eeb.html"/>
      <url>/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Coding Style</title>
      <link href="/46bc.html"/>
      <url>/46bc.html</url>
      
        <content type="html"><![CDATA[<p>不错的 Android Coding Style，推荐大家在学习和开发过程中可以使用</p><a id="more"></a><p>转自 <a href="https://github.com/LoranWong/Android-Code-Style" target="_blank" rel="noopener">https://github.com/LoranWong/Android-Code-Style</a></p><h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ul><li><a href="#1-project-structure-工程结构">1 Project structure 工程结构</a><ul><li><a href="#11-notice-说明">1.1 Notice 说明</a>    </li><li><a href="#12-resources-directory-structure资源文件夹结构">1.2 Resources directory structure 资源文件夹结构</a>    </li></ul></li><li><a href="#2-package-manner-包管理规范">2 Package Manner 包管理规范</a><ul><li><a href="#21-general-通用">2.1 General 通用</a></li><li><a href="#22-app-包结构">2.2 App 包结构</a></li></ul></li><li><a href="#3-file-naming-文件命名">3 File Naming 文件命名</a><ul><li><a href="#31-class-files-类文件命名">3.1 Class files 类文件命名</a><ul><li><a href="#32-resources-files-资源文件">3.2 Resources files 资源文件</a></li><li><a href="#33-drawable-files">3.3 Drawable files</a></li><li><a href="#34-layout-files-布局文件">3.4 Layout files 布局文件</a></li></ul></li></ul></li><li><a href="#4-inside-code-naming--代码内部命名">4 Inside Code Naming  代码内部命名</a><ul><li><a href="#41-class-variable-naming-类变量命名">4.1 Class Variable Naming 类变量命名</a></li><li><a href="#42-class-method-naming-类方法命名">4.2 Class Method Naming 类方法命名</a></li><li><a href="#43-layoutxml-布局文件变量命名">4.3 layout.xml 布局文件变量命名</a></li><li><a href="#44-stringsxml--dimensxml--colorsxml--xml变量命名">4.4 strings.xml  dimens.xml  colors.xml  xml变量命名</a></li><li><a href="#45-额外注意">4.5 额外注意</a></li></ul></li><li><a href="#5--code-manner-代码规范">5  Code Manner 代码规范</a></li><li><a href="#6-constant-内部类解析">6 Constant 内部类解析</a></li><li><a href="#7-git-提交规范">7 Git 提交规范</a></li></ul><h2 id="1-Project-structure-工程结构"><a href="#1-Project-structure-工程结构" class="headerlink" title="1 Project structure 工程结构"></a>1 Project structure 工程结构</h2><h3 id="1-1-Notice-说明"><a href="#1-1-Notice-说明" class="headerlink" title="1.1 Notice 说明"></a>1.1 Notice 说明</h3><p>New projects should follow the Android Gradle project structure that is defined on the <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Project-Structure" target="_blank" rel="noopener">Android Gradle plugin user guide</a>. The <a href="https://github.com/ribot/android-boilerplate" target="_blank" rel="noopener">BoilerPlate</a> project is a good reference.</p><p>新建工程需要按照最新的Android Gradle的工程结构,在以下定义：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Project-Structure" target="_blank" rel="noopener">Android Gradle plugin user guide</a>. 该工程： <a href="https://github.com/ribot/android-boilerplate" target="_blank" rel="noopener">BoilerPlate</a>  是一个很好的参考材料</p><h4 id="1-2-Resources-directory-structure-资源文件夹结构"><a href="#1-2-Resources-directory-structure-资源文件夹结构" class="headerlink" title="1.2 Resources directory structure    资源文件夹结构"></a>1.2 Resources directory structure    资源文件夹结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res</span><br><span class="line">    anim</span><br><span class="line">    drawable (xml or selector)</span><br><span class="line">    mipmap(pixel image)</span><br><span class="line">    layout</span><br><span class="line">    values</span><br></pre></td></tr></table></figure><h2 id="2-Package-Manner-包管理规范"><a href="#2-Package-Manner-包管理规范" class="headerlink" title="2 Package Manner 包管理规范"></a>2 Package Manner 包管理规范</h2><h3 id="2-1-General-通用"><a href="#2-1-General-通用" class="headerlink" title="2.1 General 通用"></a>2.1 General 通用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package name ： com.chuxin.[project name]</span><br></pre></td></tr></table></figure><h4 id="2-2-App-包结构"><a href="#2-2-App-包结构" class="headerlink" title="2.2 App 包结构"></a>2.2 App 包结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* app</span><br><span class="line">* (class) Constant [后续有文件说明]</span><br><span class="line">* (<span class="class"><span class="keyword">class</span>) <span class="title">Application</span></span></span><br><span class="line"><span class="class">* <span class="title">ui</span></span></span><br><span class="line"><span class="class">* <span class="title">fragment</span></span></span><br><span class="line"><span class="class">* <span class="title">activity</span></span></span><br><span class="line"><span class="class">* <span class="title">base</span></span></span><br><span class="line"><span class="class">* <span class="title">dialog</span></span></span><br><span class="line"><span class="class">* <span class="title">adapter</span></span></span><br><span class="line"><span class="class">* <span class="title">custom</span></span></span><br><span class="line"><span class="class">* <span class="title">service</span></span></span><br><span class="line"><span class="class">* (<span class="title">which</span> <span class="title">servie</span>) ...</span></span><br><span class="line"><span class="class">* <span class="title">entity</span> </span></span><br><span class="line"><span class="class">* <span class="title">local</span></span></span><br><span class="line"><span class="class">* <span class="title">remote</span></span></span><br><span class="line"><span class="class">* <span class="title">manager</span></span></span><br><span class="line"><span class="class">* (<span class="title">which</span> <span class="title">manager</span>) ...</span></span><br><span class="line"><span class="class">* <span class="title">util</span></span></span><br><span class="line"><span class="class">* (<span class="title">which</span> <span class="title">util</span>)...</span></span><br></pre></td></tr></table></figure><h2 id="3-File-Naming-文件命名"><a href="#3-File-Naming-文件命名" class="headerlink" title="3 File Naming 文件命名"></a>3 File Naming 文件命名</h2><h3 id="3-1-Class-files-类文件命名"><a href="#3-1-Class-files-类文件命名" class="headerlink" title="3.1 Class files 类文件命名"></a>3.1 Class files 类文件命名</h3><p>Class names are written in <a href="http://en.wikipedia.org/wiki/CamelCase" target="_blank" rel="noopener">UpperCamelCase</a>. </p><p>For classes that extend an Android component, the name of the class should end with the name of the component; for example: <code>SignInActivity</code>, <code>SignInFragment</code>, <code>ImageUploaderService</code>, <code>ChangePasswordDialog</code>.</p><p>For utilties class , the name of the class should start with its usage , and ends with <code>Utils</code>; for example: <code>HttpUtils</code> , <code>ImageUtils</code></p><blockquote><p>类命名方式采用 <code>大驼峰</code> 命名法</p></blockquote><blockquote><p>对于继承自安卓组件的类来说，类名应该以该组件名结尾，例如 ： <code>SignInActivity</code>, <code>SignInFragment</code>, <code>ImageUploaderService</code>, <code>ChangePasswordDialog</code>.</p></blockquote><blockquote><p>对于工具类来说，命名方式应该以其完成功能开始,以 <code>Utils</code> 结束 ，例如 ：<code>HttpUtils</code> , <code>ImageUtils</code>.</p></blockquote><h3 id="3-2-Resources-files-资源文件"><a href="#3-2-Resources-files-资源文件" class="headerlink" title="3.2 Resources files 资源文件"></a>3.2 Resources files 资源文件</h3><p>Resources file names are written in <strong>lowercase_underscore</strong>. </p><blockquote><p>资源文件以<strong>小写加下划线</strong>的方式命名</p></blockquote><h3 id="3-3-Drawable-files"><a href="#3-3-Drawable-files" class="headerlink" title="3.3 Drawable files"></a>3.3 Drawable files</h3><p>Naming conventions for drawables:</p><blockquote><p>drawable 文件的命名规范</p></blockquote><table><thead><tr><th>Asset Type</th><th>Prefix 前缀</th><th>Example</th></tr></thead><tbody><tr><td>Action bar</td><td><code>ab_</code></td><td><code>ab_stacked.9.png</code></td></tr><tr><td>Button</td><td><code>btn_</code></td><td><code>btn_send_pressed.9.png</code></td></tr><tr><td>Dialog</td><td><code>dialog_</code></td><td><code>dialog_top.9.png</code></td></tr><tr><td>Divider</td><td><code>divider_</code></td><td><code>divider_horizontal.9.png</code></td></tr><tr><td>Icon</td><td><code>ic_</code></td><td><code>ic_star.png</code></td></tr><tr><td>Menu</td><td><code>menu_</code></td><td><code>menu_submenu_bg.9.png</code></td></tr><tr><td>Notification</td><td><code>notification_</code></td><td><code>notification_bg.9.png</code></td></tr><tr><td>Tabs</td><td><code>tab_</code></td><td><code>tab_pressed.9.png</code></td></tr></tbody></table><p>Naming conventions for icons:</p><blockquote><p>icons文件的命名规范</p></blockquote><table><thead><tr><th>Asset Type</th><th>Prefix 前缀</th><th>Example</th></tr></thead><tbody><tr><td>Icons</td><td><code>ic_</code></td><td><code>ic_star.png</code></td></tr><tr><td>Launcher icons</td><td><code>ic_launcher</code></td><td><code>ic_launcher_calendar.png</code></td></tr><tr><td>Menu icons and Action Bar icons</td><td><code>ic_menu</code></td><td><code>ic_menu_archive.png</code></td></tr><tr><td>Status bar icons</td><td><code>ic_stat_notify</code></td><td><code>ic_stat_notify_msg.png</code></td></tr><tr><td>Tab icons</td><td><code>ic_tab</code></td><td><code>ic_tab_recent.png</code></td></tr><tr><td>Dialog icons</td><td><code>ic_dialog</code></td><td><code>ic_dialog_info.png</code></td></tr></tbody></table><p>Naming conventions for selector states:</p><blockquote><p>选择器状态文件的命名规范</p></blockquote><table><thead><tr><th>State</th><th>Suffix  尾缀</th><th>Example</th></tr></thead><tbody><tr><td>Normal</td><td><code>_normal</code></td><td><code>btn_order_normal.9.png</code></td></tr><tr><td>Pressed</td><td><code>_pressed</code></td><td><code>btn_order_pressed.9.png</code></td></tr><tr><td>Focused</td><td><code>_focused</code></td><td><code>btn_order_focused.9.png</code></td></tr><tr><td>Disabled</td><td><code>_disabled</code></td><td><code>btn_order_disabled.9.png</code></td></tr><tr><td>Selected</td><td><code>_selected</code></td><td><code>btn_order_selected.9.png</code></td></tr></tbody></table><h3 id="3-4-Layout-files-布局文件"><a href="#3-4-Layout-files-布局文件" class="headerlink" title="3.4 Layout files 布局文件"></a>3.4 Layout files 布局文件</h3><p>Layout files should match the name of the Android components that they are intended for but moving the top level component name to the beginning. For example, if we are creating a layout for the <code>SignInActivity</code>, the name of the layout file should be <code>activity_sign_in.xml</code>.</p><blockquote><p>布局文件的命名需要与他所嵌入的安卓组件匹配，但是将组件名称前移到开始处,例如,我们要创建一个名字为 <code>SignInActivity</code>, 其名字应该为  <code>activity_sign_in.xml</code>.</p></blockquote><table><thead><tr><th>Component 组件</th><th>Class Name</th><th>Layout Name</th></tr></thead><tbody><tr><td>Activity</td><td><code>UserProfileActivity</code></td><td><code>activity_user_profile.xml</code></td></tr><tr><td>Fragment</td><td><code>SignUpFragment</code></td><td><code>fragment_sign_up.xml</code></td></tr><tr><td>Dialog</td><td><code>ChangePasswordDialog</code></td><td><code>dialog_change_password.xml</code></td></tr><tr><td>AdapterView Item</td><td>—</td><td><code>item_person.xml</code></td></tr></tbody></table><h2 id="4-Inside-Code-Naming-代码内部命名"><a href="#4-Inside-Code-Naming-代码内部命名" class="headerlink" title="4 Inside Code Naming  代码内部命名"></a>4 Inside Code Naming  代码内部命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">Important ： 请不要使用拼音以及数字！！！</span><br><span class="line"></span><br><span class="line">====== 常用缩写 ======</span><br><span class="line"></span><br><span class="line">完整单词 缩写</span><br><span class="line"></span><br><span class="line">A</span><br><span class="line">average ——&gt; avg</span><br><span class="line"></span><br><span class="line">B</span><br><span class="line">back ——&gt; bk</span><br><span class="line">background ——&gt; bg</span><br><span class="line">break ——&gt; brk</span><br><span class="line">buffer ——&gt; buf</span><br><span class="line"></span><br><span class="line">C</span><br><span class="line">color ——&gt; cr(clr)</span><br><span class="line">control ——&gt; ctrl</span><br><span class="line"></span><br><span class="line">D</span><br><span class="line">data ——&gt; dat</span><br><span class="line">delete ——&gt; del</span><br><span class="line">document ——&gt; doc</span><br><span class="line"></span><br><span class="line">E</span><br><span class="line">edit ——&gt; edt</span><br><span class="line">error ——&gt; err</span><br><span class="line">escape ——&gt; esc</span><br><span class="line"></span><br><span class="line">F</span><br><span class="line">flag ——&gt; flg</span><br><span class="line">form ——&gt; frm</span><br><span class="line"></span><br><span class="line">G</span><br><span class="line">grid ——&gt; grd</span><br><span class="line"></span><br><span class="line">I</span><br><span class="line">increment ——&gt; inc</span><br><span class="line">information ——&gt; info</span><br><span class="line">initial ——&gt; init</span><br><span class="line">insert ——&gt; ins</span><br><span class="line">image ——&gt; img</span><br><span class="line"></span><br><span class="line">L</span><br><span class="line">label ——&gt; lab</span><br><span class="line">length ——&gt; len</span><br><span class="line">list ——&gt; lst</span><br><span class="line">library ——&gt; lib</span><br><span class="line"></span><br><span class="line">M</span><br><span class="line">manager ——&gt; mngr(mgr)</span><br><span class="line">message ——&gt; msg</span><br><span class="line"></span><br><span class="line">O</span><br><span class="line">Oracle ——&gt; Ora</span><br><span class="line"></span><br><span class="line">P</span><br><span class="line">panorama ——&gt; pano</span><br><span class="line">password ——&gt; pwd</span><br><span class="line">picture ——&gt; pic</span><br><span class="line">point ——&gt; pt</span><br><span class="line">position ——&gt; pos</span><br><span class="line">print ——&gt; prn</span><br><span class="line">program ——&gt; prg</span><br><span class="line"></span><br><span class="line">S</span><br><span class="line">server ——&gt; srv</span><br><span class="line">source ——&gt; src</span><br><span class="line">statistic ——&gt; stat</span><br><span class="line">string ——&gt; str</span><br><span class="line">Sybase ——&gt; Syb</span><br><span class="line"></span><br><span class="line">T</span><br><span class="line">temp ——&gt; tmp</span><br><span class="line">text ——&gt; txt</span><br><span class="line"></span><br><span class="line">U</span><br><span class="line">user ——&gt; usr</span><br><span class="line"></span><br><span class="line">W</span><br><span class="line">window ——&gt; wnd(win)</span><br></pre></td></tr></table></figure><h3 id="4-1-Class-Variable-Naming-类变量命名"><a href="#4-1-Class-Variable-Naming-类变量命名" class="headerlink" title="4.1 Class Variable Naming 类变量命名"></a>4.1 Class Variable Naming 类变量命名</h3><ul><li>公有变量按 <code>小驼峰</code> 法命名</li><li>私有 &amp; 非静态成员变量以 <code>m</code> 开头</li><li>私有 &amp; 静态成员变量以 <code>s</code> 开头</li><li>常量以大写字母和下划线 <code>_</code> 组成</li><li>尽量使用 <code>功能/描述 + 类型</code> 的模式 ,如 <code>mNameTextView</code></li><li>类中变量的组件类型请不要使用缩写</li><li>注意不要使用 <code>aa</code> <code>bb</code> <code>cc3</code> 这种变态的命名方式 ！！</li><li>类变量过多时请 <code>分块摆放</code> 并且 <code>写好注释</code></li><li><code>接口类</code> 请直接定义在类的最后</li></ul><p>Example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOME_CONSTANT = <span class="number">42</span>;</span><br><span class="line">    <span class="comment">//公有变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> publicField;</span><br><span class="line">    <span class="comment">//私有静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass sSingleton;</span><br><span class="line">    <span class="comment">//默认变量</span></span><br><span class="line">    <span class="keyword">int</span> mPackagePrivate;</span><br><span class="line">    <span class="comment">//私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPrivate;</span><br><span class="line">    <span class="comment">//继承型变量</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mProtected;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Class-Method-Naming-类方法命名"><a href="#4-2-Class-Method-Naming-类方法命名" class="headerlink" title="4.2 Class Method Naming 类方法命名"></a>4.2 Class Method Naming 类方法命名</h3><ul><li><p>类方法采用 <code>小驼峰</code> 命名法</p></li><li><p>根据函数所完成功能命名 ， 如 <code>changView()</code></p></li><li><p>在函数头写对于函数功能、参数和返回值的注释，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取两个数中最大的一个</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value1 参与比较的第一个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value2 参与比较的第二个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 两个参数中最大的一个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (value1 &gt; value2) ? value1 : value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个函数请尽量保持在 <code>50行</code> 之内 ！！</p></li></ul><h3 id="4-3-layout-xml-布局文件变量命名"><a href="#4-3-layout-xml-布局文件变量命名" class="headerlink" title="4.3 layout.xml 布局文件变量命名"></a>4.3 layout.xml 布局文件变量命名</h3><ul><li><code>id</code> 以 <code>所在组件_类型_命名</code> 的模式，例如： <code>@+id/main_tv_name</code> 、 <code>@id/chat_btn_send</code></li><li>布局多处重用的请使用 <code>&lt;include&gt;</code> 标签</li><li>所有文本请定义在 <code>strings.xml</code> 中 , 如 <code>@string/app_name</code></li><li>重用dp请定义在 <code>dimens.xml</code> 中 , 如  <code>@dimen/entry_item_height</code></li><li>对应组件缩写表：</li></ul><table><thead><tr><th>Component 组件</th><th>Abbreviation 缩写</th></tr></thead><tbody><tr><td>Fragment</td><td><code>fgm</code></td></tr><tr><td>TextView</td><td><code>tv</code></td></tr><tr><td>ImageView</td><td><code>iv</code></td></tr><tr><td>Button</td><td><code>btn</code></td></tr><tr><td>EditText</td><td><code>et</code></td></tr><tr><td>LinearLayout</td><td><code>ll</code></td></tr><tr><td>ReleativeLayout</td><td><code>rl</code></td></tr><tr><td>normally : FirstSecond</td><td><code>fs</code></td></tr></tbody></table><h3 id="4-4-strings-xml-dimens-xml-colors-xml-xml变量命名"><a href="#4-4-strings-xml-dimens-xml-colors-xml-xml变量命名" class="headerlink" title="4.4 strings.xml  dimens.xml  colors.xml  xml变量命名"></a>4.4 strings.xml  dimens.xml  colors.xml  xml变量命名</h3><blockquote><p>  遵循 <code>完整性</code> <code>规范性</code> <code>有序性</code>原则</p></blockquote><ul><li><strong>分块并注释</strong>, 将 使用在不同的 <code>Activity</code> 或者 <code>Fragment</code> 中的 <code>xml</code> 变量 进行分块</li><li>命名举例 ：<br><code>login_error_tips</code>  <strong>in</strong>  <code>strings.xml</code><br><code>login_error_tips_height</code> <strong>in</strong> <code>dimens.xml</code><br><code>login_error_tips_bg</code> <strong>in</strong> <code>colors.xml</code></li></ul><table><thead><tr><th>Prefix 前缀</th><th>Description 描述</th></tr></thead><tbody><tr><td><code>error_</code></td><td>An error message</td></tr><tr><td><code>msg_</code></td><td>A regular information message</td></tr><tr><td><code>title_</code></td><td>A title, i.e. a dialog title</td></tr><tr><td><code>action_</code></td><td>An action such as “Save” or “Create”</td></tr></tbody></table><h3 id="4-5-额外注意"><a href="#4-5-额外注意" class="headerlink" title="4.5 额外注意"></a>4.5 额外注意</h3><table><thead><tr><th>Good</th><th>Bad</th></tr></thead><tbody><tr><td><code>XmlHttpRequest</code> <i class="icon-thumbs-up"></i></td><td><code>XMLHTTPRequest</code><i class="icon-thumbs-down"></i></td></tr><tr><td><code>getCustomerId</code>  <i class="icon-thumbs-up"></i></td><td><code>getCustomerID</code><i class="icon-thumbs-down"></i></td></tr><tr><td><code>String url</code> <i class="icon-thumbs-up"></i></td><td><code>String URL</code><i class="icon-thumbs-down"></i></td></tr><tr><td><code>long id</code> <i class="icon-thumbs-up"></i></td><td><code>long ID</code><i class="icon-thumbs-down"></i></td></tr></tbody></table><h2 id="5-Code-Manner-代码规范"><a href="#5-Code-Manner-代码规范" class="headerlink" title="5  Code Manner 代码规范"></a>5  Code Manner 代码规范</h2><p>This is <strong>good</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">    body();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is <strong>bad</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) body();  <span class="comment">// bad!</span></span><br></pre></td></tr></table></figure><hr><p>This is <strong>good</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/text_view_profile"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>This is <strong>bad</strong> :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Don't do this! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/text_view_profile"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-Constant-内部类解析"><a href="#6-Constant-内部类解析" class="headerlink" title="6 Constant 内部类解析"></a>6 Constant 内部类解析</h2><p><code>Constant</code> </p><pre><code>*   `CODE`    --&gt; `request_code`，`app_key` 等*   `CONFIG`  --&gt; 项目的配置变量, 偏向于调试开发使用，如：`IS_DEBUG`, `SHOW_LOG`*   `URL`  --&gt; 网络地址相关*   `COUNT`   --&gt; 某些约定的数字，如一次刷新显示的条目数量。__一定要有注释__*   `PATH`    --&gt; 路径信息，SD卡路径等*   `KEY`    --&gt; 键值对的键的信息,如 `Bundle` 中的键</code></pre><h2 id="7-Git-提交规范"><a href="#7-Git-提交规范" class="headerlink" title="7 Git 提交规范"></a>7 Git 提交规范</h2><p><strong>基本要求</strong></p><ul><li>分段</li></ul><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(Git test) Modify CircleImageView to show rounded rectangle</span><br><span class="line"></span><br><span class="line">https://trello.com/c/M7u5h0QA</span><br><span class="line"></span><br><span class="line">The original function can be used normally,</span><br><span class="line">To show rounded rectangle, you need add param &quot;bao:round&quot; to XML file,</span><br><span class="line">it&apos;s value is the rounded rectangle&apos;s corner radius.</span><br></pre></td></tr></table></figure><p><strong>第一行</strong>: 作为标题，这在 Git 中就会做为默认显示的部分，如图中深黑色字：<br>    <img src="http://t1.qpic.cn/mblogpic/2da122c89f961ea51a7a/2000.jpg" alt="提交信息的显示"></p><p><strong>第二行</strong>: 留空！因为通常在设置了邮件提醒的 Git 系统中，第二行的空行是作为分隔标题和正文的存在。</p><p><strong>第三行</strong>: 开始就是详细说明了。可以加上对此次修改的问题的链接，或者描述。如果有用到 <code>issue</code> 的话可以写上 <code>issue #[issue id]</code>，或者附上 <strong>trello</strong> 的链接。</p><p><del>建议全部用英文写，其他字符有乱码的可能。</del> 并不会乱码</p><ul><li>粒度</li></ul><blockquote><p>说的是做的修改的粒度。如果你一天做了很多的修改，但是就只提交了一次，那么你的粒度就有点大了。</p><p>这样在你描述你的行为的时候就会显得模糊，如果你详细描述的话，提交信息会变得长篇大论。</p><p>但也不要做一点提交一点，这样粒度就会变得太小，会导致一天到晚在写提交信息，没有必要。</p><p>在我看来，这个事情真的只能凭感觉提交，用经验来做判断。因为一个BUG可能可大可小，大的话，你就得分割修复。</p><p>如果小，那么就一次提交修复就可。</p><p>粒度的掌握绝对会影响你的提交信息，因为二者是一一对应的。</p></blockquote><ul><li>宽度</li></ul><blockquote><p>是的，是宽度，不是长度。</p><p>和代码一样，如果你平时注意的话，就不要让你的代码在一行上超过80，不然谁读代码都不好受，包括你自己。</p><p>所以提交信息的宽度也有限制。</p><p>分别是标题不要超过50，内容部分不要超过70。</p></blockquote><hr><p><strong>大概大家都会的没什么用的小Tips：</strong></p><ul><li>使用 <code>git commit</code> 命令并进入 <code>Vim</code> 编辑提交信息，写完后按 <code>Esc</code> 确保不在编辑状态，然后输入 <code>:wq</code> 回车退出并提交。</li><li>直接使用 <code>Android Studio</code> 自带的 VCS 也很方便。</li></ul><hr><p><strong>参考资料：</strong></p><ul><li><a href="http://segmentfault.com/a/1190000002583308" target="_blank" rel="noopener">Git - 如何写好你的提交信息？</a></li><li><a href="https://ruby-china.org/topics/15737" target="_blank" rel="noopener">写出好的 commit message</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Material 主题设置</title>
      <link href="/96e6.html"/>
      <url>/96e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h1><p>最近搭建了用 Hexo 搭建了博客，使用的 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Material</a> 主题，效果还是挺不错的，搭建的过程中遇到不少问题，一开始搭建 博客的操作，大家参考 <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo</a> 官网的文档基本就可搞定，在这里主要记录添加<a href="http://duoshuo.com" target="_blank" rel="noopener">多说</a>评论以及其他 Hexo 主题样式上遇到的问题。</p><h2 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h2><h3 id="为-landsape-添加评论"><a href="#为-landsape-添加评论" class="headerlink" title="为 landsape 添加评论"></a>为 landsape 添加评论</h3><p>最初搭建好博客的时候，使用的是系统默认主题 <strong>landsape</strong> ,添加多说步骤比较简单，如下：</p><p>创建多说站点后，在 Hexo 根目录下的 _config.yml 文件里添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duoshuo_shortname: 你站点的 short_name</span><br></pre></td></tr></table></figure><p>在 themes\landscape\layout_partial\article.ejs 里把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">&lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">&lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class="line">  &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">  &lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">    &lt;!-- 多说评论框 start --&gt;</span><br><span class="line">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 多说评论框 end --&gt;</span><br><span class="line">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.disqus_shortname %&gt;&apos;&#125;;</span><br><span class="line">      (function() &#123;</span><br><span class="line">        var ds = document.createElement(&apos;script&apos;);</span><br><span class="line">        ds.type = &apos;text/javascript&apos;;ds.async = true;</span><br><span class="line">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</span><br><span class="line">        ds.charset = &apos;UTF-8&apos;;</span><br><span class="line">        (document.getElementsByTagName(&apos;head&apos;)[0] </span><br><span class="line">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</span><br><span class="line">      &#125;)();</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">    &lt;!-- 多说公共JS代码 end --&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>PS:</p><p><img src="/img/blog/duoshuo_shortname.jpeg" alt="image"></p><p>配置文件中 duoshuo_shortname 中的 shortname 是你创建站点后的域名的名字，eg: liang.duoshuo.com,则 shortname 就是 liang。</p><p>执行 hexo s 在本地即可查看修改效果;</p><h3 id="为-Material-主题添加评论"><a href="#为-Material-主题添加评论" class="headerlink" title="为 Material 主题添加评论"></a>为 Material 主题添加评论</h3><p>现在 Hexo 用的是 Material 主题，主要配置有以下两个地方：</p><p>在目录 Material 下 _config.yml 中按如下进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    use: duoshuo</span><br><span class="line">    shortname: liang</span><br><span class="line">    duoshuo_thread_key_type: 7e70fd*********e7b6c6351 (个人基本--&gt;基本设置--&gt;密钥)</span><br><span class="line">    duoshuo_embed_js_url: &quot;https://static.duoshuo.com/embed.js&quot;</span><br></pre></td></tr></table></figure><p>当配置了这些后，运行本地查看多说还是没有添加上或者报关于多说的未定义 duoshuoQuery 这样的错误时，打开  layout/_partial/footer-option.ejs,把19行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var duoshuoQuery = &#123;</span><br><span class="line">                short_name: &apos;&lt;%= theme.comment.shortname %&gt;&apos;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.duoshuoQuery = &#123;</span><br><span class="line">                short_name: &apos;&lt;%= theme.comment.shortname %&gt;&apos;</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><p>就可以了。</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><h3 id="为-Material-主题设置代码高亮"><a href="#为-Material-主题设置代码高亮" class="headerlink" title="为 Material 主题设置代码高亮"></a>为 Material 主题设置代码高亮</h3><p>目前使用的是 <a href="https://github.com/isagalaev/highlight.js" target="_blank" rel="noopener">highlight.js</a> 具体可点开查看多种使用方法介绍，或去简单说下我目前配置的方法，大家可作为参考。</p><p>找到 hexo 下 Material 主题的网站 HTML 入口，在 head 标签里配置你所要设置的样式文件的引用</p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/highlight/solarized-white.css&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure><p>在 body 标签里 配置 js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Code hight light--&gt;</span><br><span class="line">&lt;script src=&quot;/js/highlight.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    hljs.initHighlightingOnLoad();    </span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">      $(&apos;.code&apos;).each(function(i, block) &#123;</span><br><span class="line">        hljs.highlightBlock(block);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>配置完成即可使用，想尝试其他方式的可查看 github 上提供的其他方式，css 样或 js 文件可在 <a href="https://cdnjs.com/libraries/highlight.js/9.10.0" target="_blank" rel="noopener">highlight.js</a> 查找下载使用。<br>PS: 需要提前把 css 和 js 文件下载并放在指定路径下。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
